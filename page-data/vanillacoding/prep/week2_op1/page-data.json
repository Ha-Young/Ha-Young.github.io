{"componentChunkName":"component---src-templates-blog-post-js","path":"/vanillacoding/prep/week2_op1","result":{"data":{"markdownRemark":{"html":"<h2>코드리뷰 요청시</h2>\n<p>과제 하고 난 후에 꼭 merge request 해주세요. (매주 금 저녁 7시까지)</p>\n<p>prep가이드 > 과제제출방법 참조.</p>\n<blockquote>\n<p>금 저녁 7시이후에 merge request시에는 코드리뷰를 못 받을수도 있음.</p>\n</blockquote>\n<p>Merge request는 켄님이 알아서 닫음.</p>\n<p>닫힌 것도 볼 수 있다. Closed 탭.</p>\n<h2>코드리뷰 질문</h2>\n<ul>\n<li>merge request시에 질문 작성</li>\n<li>질문 부분에 주석으로 질문 작성</li>\n</ul>\n<h2>벡틱?</h2>\n<p>` 기호를 가리키는 말.\n<code class=\"language-text\"></code> 으로 만든 문자열은 string template라고 안에 변수를 넣을 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hellow </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>something<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> world</span><span class=\"token template-punctuation string\">`</span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h2>substr()</h2>\n<p>String.substr()은 이제 지원 X. 사용하면 안된다.</p>\n<p>substring() 또는 slice()를 사용해야 한다.</p>\n<h2>이번주 과제</h2>\n<h4>Tick Tack Toe 게임 구현하기</h4>\n<p>Prep 가이드 > 과제 관련 안내 란에 오픈.</p>\n<p>Git lab으로 오픈 될 예정.</p>\n<p>README.md를 읽으면서 과제를 파악하자.</p>\n<p>앞으로 모든 과제는 README.md에 상세히 적혀있음.</p>\n<blockquote>\n<p>npm install 등등의 과제 진행 순서도 포함.</p>\n</blockquote>\n<p>구현해야 될 기능은 README.md의 ToDo를 참조.</p>\n<p><u>구글에서 <a href=\"%22%5Bhttps://www.google.com/search?newwindow=1&#x26;hl=ko&#x26;source=hp&#x26;ei=TjGEX-jMJ56Fr7wPzfWX4AE&#x26;q=%ED%8B%B1%ED%83%9D%ED%86%A0&#x26;oq=%ED%8B%B1%ED%83%9D%ED%86%A0&#x26;gs_lcp=CgZwc3ktYWIQAzICCAAyAggAMgIIADICCAAyAggAMgIIADICCAAyAggAMgIIADICCAA6CAgAELEDEIMBOgQIABADOgUIABCxA1DAh2BYq5RgYM2VYGgBcAB4AYAB0gGIAbUJkgEFMC44LjGYAQCgAQGqAQdnd3Mtd2l6sAEA&#x26;sclient=psy-ab&#x26;ved=0ahUKEwjoq_nK7a7sAhWewosBHc36BRwQ4dUDCAc&#x26;uact=5%5D(https://www.google.com/search?newwindow=1&#x26;hl=ko&#x26;source=hp&#x26;ei=TjGEX-jMJ56Fr7wPzfWX4AE&#x26;q=%ED%8B%B1%ED%83%9D%ED%86%A0&#x26;oq=%ED%8B%B1%ED%83%9D%ED%86%A0&#x26;gs_lcp=CgZwc3ktYWIQAzICCAAyAggAMgIIADICCAAyAggAMgIIADICCAAyAggAMgIIADICCAA6CAgAELEDEIMBOgQIABADOgUIABCxA1DAh2BYq5RgYM2VYGgBcAB4AYAB0gGIAbUJkgEFMC44LjGYAQCgAQGqAQdnd3Mtd2l6sAEA&#x26;sclient=psy-ab&#x26;ved=0ahUKEwjoq_nK7a7sAhWewosBHc36BRwQ4dUDCAc&#x26;uact=5)%22\">Tick Tack Toe(틱택토)</a> 검색하시면 브라우저에서 간단히 해보실 수 있습니다.</u></p>\n<ol>\n<li>git clone</li>\n<li>cd tick-tack-toe</li>\n<li>npm install</li>\n<li>code . 혹은 vscode로 오픈</li>\n<li>\n<p>git checkout -b '이름'</p>\n<ul>\n<li>모든 과제마다 브랜치를 따야된다.</li>\n</ul>\n</li>\n<li>npm start</li>\n<li><a href=\"http://localhost:port\">http://localhost:port</a> 로 확인 가능</li>\n<li>개발...</li>\n<li>종료시 ctrl + c </li>\n</ol>\n<p>index.html, index.js를 이용해 작업해보자.</p>\n<p><strong>과제 할 때 기능 추가나 수정사항이 있을 때 바로바로 commit 하고 메세지를 잘 남기자.</strong><br>\n-> 작업 이력관리에 도움이 되고 리뷰받을 때 리뷰어 분이 나의 작업 프로세스를 확인 할 수 있기때문에 리뷰를 더 잘 받을 수 있다.</p>\n<h2>Q. MR 여는건 언제?</h2>\n<p>과제 처음부터 MR(merge request)를 열기보다는, 나중에 열자. 하지만, <strong>금요일 저녁 7시 전에 작업이 완료되지 않았더라도 금요일 저녁 7시 전에는 꼭 열어두자.</strong></p>\n<h2>Q. 브랜치 이름 중복?</h2>\n<p>이전 과제와는 상관 없다.</p>\n<p>하지만, 다른사람들과 중복되지 않게 이름으로 하는 것이 좋다.</p>\n<h2>이번주 과제 핵심 주제 (주의깊게 봐야 될)</h2>\n<p>이번주 내용이 많을 수 있으므로 미리미리 강의 시청을 해두자.</p>\n<p>DOM 보다는 Scope &#x26; Hoisting이 더 우선순위!</p>\n<p>DOM에서는 요소 선택하는 방법들 이벤트들 슥 훑어보는 느낌으로.</p>\n<p>Scope &#x26; Hoisting은 꼼꼼히 보고 이해하자.\n이해가 부족하면 인터넷 꼭 찾아보자.</p>\n<h2>Q. 0 == null, 0 == undefined 가 false?</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token boolean\">true</span> \n<span class=\"token number\">1</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true </span>\n<span class=\"token number\">0</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true </span>\n<span class=\"token number\">0</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false </span>\n<span class=\"token number\">0</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false </span>\n<span class=\"token number\">0</span> <span class=\"token operator\">==</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true, look at Logical NOT operator </span>\n<span class=\"token number\">0</span> <span class=\"token operator\">==</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true, look at Logical NOT operator </span>\n<span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>0 == false는 결과가 true인데,</p>\n<p>0 == null,\n0 == undefined\n는 false이다. 왜 그런걸까?</p>\n<p>저 상황에서는 == 연산자로 <strong>type coercion</strong>이 발생했기 때문인데,\n왜 type coercion이 발생하는지에 대해서는 알 필요가 없다.</p>\n<p>그리고 <strong>== 비교는 쓰지 않는것이 좋다.</strong> - 일반적인 js convention이 아니다.</p>\n<p><strong>javascript에서 비교는 무조건 === 3개로!</strong></p>\n<h2>Q. !!의 의미?</h2>\n<p>!는 not 연산자. not은 반대 Boolean으로 바꾼다.</p>\n<p>그리고 모든 값에 대하여 Boolean 형으로 바꾸는데,</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> value <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> bolVal <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>value <span class=\"token comment\">// false</span>\n<span class=\"token keyword\">var</span> bolVal2 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>value <span class=\"token comment\">// true</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>이러한 특성 때문에,</p>\n<p>!!연산자로 해당 변수값을 boolean형으로 바꾸는데 쓰기도 한다.\n-> 사실 이상황 아니면 잘 쓰지 않는다.</p>\n<p>현업에서는 Boolean(피연산자) 와 !! 비슷하게 쓰이는 것 같고, 회사 convention에 따르면 된다. 없으면 본인이 편한대로.</p>\n<h2>Q. currenttarget &#x3C;-> target</h2>\n<p>수요일 오피스아워에서 얘기 할 것.</p>\n<p>강의 들을 때, 공부할 때 자세히 살펴보자.</p>\n<h2>Q. 파일 마지막에 \\n 개행문자?</h2>\n<p>스스로 올린 과제가 잘 올라갔는지 확인하자.</p>\n<p>깃 저장소(깃랩)에 보면 No newline at end of file이라는 메세지가 있을 수 있는데,</p>\n<p>이 부분은 Git에서 알려주는 메세지.</p>\n<p><strong>Git은 모든 파일에 마지막에 빈 줄이 필요</strong>하다.\nGit이 파일 구분할 때 필요하다고 함.</p>\n<p>개행문자라기보다 그냥 enter로 빈 줄 하나 만들어주면 된다.</p>\n<p>더 자세한 내용은 구글링해보자.</p>\n<h2>Q. 객체 property? key?</h2>\n<p>부르기에 차이. 부르는 사람 마음.</p>\n<p>property, 속성, key .. 상관없음.</p>\n<h2>ETC</h2>\n<blockquote>\n<ul>\n<li>캔님 애플 16인치 쓰신다고하네요. (부럽...)</li>\n<li>캔님 수염은 가끔씩 민다고하시네요.</li>\n<li>블로그 리뷰는 Slack 9기방에 적어두면 한번 봐주신다고 합니다.</li>\n<li>부트캠프 테스트는 12월 둘째주에 봐도 되지만,\n신청은 그전에 미리미리 해둬야 된다고 하네요.</li>\n</ul>\n</blockquote>","excerpt":"코드리뷰 요청시 과제 하고 난 후에 꼭 merge request 해주세요. (매주 금 저녁 7시까지) prep가이드 > 과제제출방법 참조. 금 저녁 7시이후에 merge request시에는 코드리뷰를 못 받을수도 있음. Merge request…","frontmatter":{"date":"12 October, 2020","path":"/vanillacoding/prep/week2_op1","title":"Prep 2주차 월요일 오피스아워 정리"},"fields":{"readingTime":{"text":"4 min read"}}}},"pageContext":{"slug":"/vanillacoding_prep/Prep2주차수요일_오피스아워정리/","previous":{"frontmatter":{"path":"/algorithm/programmers/lv3_long_length_pelindrom","draft":false,"category":"algorithm"},"fields":{"slug":"/programmers_algorithm_python/2020-10-12-프로그래머스_가장_긴_팰린드롬_Lv3/"}},"next":{"frontmatter":{"path":"/algorithm/programmers/lv2_tri_snail","draft":false,"category":"algorithm"},"fields":{"slug":"/programmers_algorithm_python/2020-10-16-프로그래머스_삼각_달팽이_Lv2/"}}}},"staticQueryHashes":["3649515864","63159454"]}