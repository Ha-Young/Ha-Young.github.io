{"componentChunkName":"component---src-templates-blog-post-js","path":"/vanillacoding/prep/week3_op3","result":{"data":{"markdownRemark":{"html":"<h2>Q. 이번과제 수정사항 생기면 계속 재 풀이하는데?</h2>\n<p>이럴때는 개발을 위해서 네비게이터를 따로 만들어 둔다던지 등의 조작을 한다.</p>\n<p>어떠한 기능이나 프로세스를 개발 하고자 할 때 개발자 자체적으로 테스트를 진행 한다면(단위 테스트) 개발, 테스트를 위해서 <strong>해당 기능이나 프로세스에 포함되지는 않더라도 개발, 테스트만을 위한 함수라던지 프로세스를 만들어서 기능 확인, 테스트를 한다.</strong></p>\n<h2>변수 네이밍에 Array 단어?</h2>\n<p>보통 변수 네이밍에 Array 단어는 잘 넣지 않는다.</p>\n<p><code class=\"language-text\">someArray</code> 라고 하기 보다는 <code class=\"language-text\">someElements</code> <code class=\"language-text\">someList</code> 와 같이 복수표현이나 List로 나타내는 것이 좋다.</p>\n<h2>변수 네이밍 너무 디테일?</h2>\n<p>네이밍에 구현방식이나 너무 디테일하게 들어가도 좋지 않다.</p>\n<p>어떠한 기능을 하는지만 알 수 있도록 네이밍을 하고 너무 디테일하게 들어가면 수정사항이 발생했을 때 기능은 같더라도 내부 구현방식이 달라질 수 있기 때문.</p>\n<h2>Q. element.appendChild VS element.innerHTML</h2>\n<blockquote>\n<p>둘 중에 어떠한 방식으로 하는게 더 나을까?</p>\n</blockquote>\n<p>정답은 없다.</p>\n<p>상황, 문맥에 따라서 결정을 하면 된다.</p>\n<p>그렇기 때문에 두 방법이 어떻게 다른지, 어떠한 방식으로 작동되는지를 알고 있어야 된다.</p>\n<h4>다른 예시로 string.prototype.substr() VS string.prototype.substring()</h4>\n<p>이런 비교는 무조건 substring()인데, 이유는 substr()은 곧 없어질 (더이상 지원이 없는) 함수이기 때문.</p>\n<p><strong>두 함수나 기능을 비교할 때 장단점이 각각 있는거라면, 장단점에 맞춰서 상황에 맞게 쓰면 된다.</strong></p>\n<h2>css 작성시 flex, grid 지원?</h2>\n<p>css 작성할 때 flex, grid와 같은 최신 css를 지원하지 않는 브라우저가 있다.</p>\n<p>하지만, 우리가 쓸 브라우저는 최신 브라우저들일 것이기 때문에 걱정안해도 된다.</p>\n<h2>Q. css 중복되는 요소?</h2>\n<p>css에 중복되는 요소가 있는데 </p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-css line-numbers\"><code class=\"language-css\"><span class=\"token selector\">.className</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>와 같이 중복되는 요소는 공통적인 클래스로 빼내서 사용해도 된다. (좋은 방법!)</p>\n<p>나중에는 css module등의 방법들이 있다.</p>\n<h2>Q. css작성시 BEM 방식?</h2>\n<p>BEM 쓰는 회사는 잘 없다. (최근에는 없다고 봐도 무방)</p>\n<p>옛날에 hot 할 때가 있었는데 지금은 굳이 안봐도 될듯.</p>\n<p>요즘에는 css를 js에서 쓸 수도 있고 ( <code class=\"language-text\">css in js</code> ), <code class=\"language-text\">css module</code> 등 다양한 방식이 있다.</p>\n<p>이것도 각각의 장단점이 있기 때문에 어떠한 방식이 제일 좋다 라고 할 수는 없고 본인이 편한 것, 회사에 맞게 사용하면 된다.</p>\n<h2>ETC</h2>\n<ul>\n<li>\n<p>개선사항할만한 사항이 있다면 기억해두자! 마지막 설문조사에 쓰자.</p>\n<ul>\n<li>없다면 개선할만한게 뭐가있을까 생각해보는것도...</li>\n</ul>\n</li>\n<li>매 기수 바뀌는 진행방식. 다음엔 어떻게 바뀔까?</li>\n</ul>","excerpt":"Q…","frontmatter":{"date":"21 October, 2020","path":"/vanillacoding/prep/week3_op3","title":"Prep 3주차 금요일 오피스아워 정리"},"fields":{"readingTime":{"text":"2 min read"}}}},"pageContext":{"slug":"/vanillacoding_prep/Prep3주차금요일_오피스아워정리/","previous":{"frontmatter":{"path":"/vanillacoding/prep/week3_op2","draft":false,"category":"vanilla coding"},"fields":{"slug":"/vanillacoding_prep/Prep3주차수요일_오피스아워정리/"}},"next":{"frontmatter":{"path":"/vanillacoding/prep/week4_op1","draft":false,"category":"vanilla coding"},"fields":{"slug":"/vanillacoding_prep/Prep 4주차 월요일 오피스아워 정리/"}}}}}