{"componentChunkName":"component---src-templates-blog-post-js","path":"/vanillacoding/prep/week3_op1","result":{"data":{"markdownRemark":{"html":"<h2>과제</h2>\n<p>먼저 살펴 볼 함수는</p>\n<p>calculatorWinner() -> 승자 판별하는 함수. 어떻게 승자판별하는지 잘 파악해보자.</p>\n<p>배열 어떻게 넘겨주고 하는건 그 다음.</p>\n<p>그리고 승자판별을 언제해야되느냐? 이 타이밍은 잘 생각해보자.</p>\n<h2>Q. 과제에서 css :before, :after 선택자 어떤역할?</h2>\n<p>css에는 box-sizing이라는 속성이 있는데,</p>\n<p>블록 요소는 안에서부터 padding, border, margin의 순서대로 존재.</p>\n<p>근데, box-sizing 속성에 따라 이러한 값들에 대한 값이 달라질 수 있다.</p>\n<p>과제에서 box-sizing: inherit; 속성은 각 브라우저마다 다르게 작동할 수 있는 box-sizing속성을 일관되게 맞춰준다고 보면 됨.</p>\n<h4>Reset-css</h4>\n<p>브라우저 별로 내장되어있는 css 설정값(h1의 크기차이 등)은 다를 수 있기다.\n각 브라우저별로 다른 설정값들을 맞춰주기에는 힘드므로 모든 브라우저 기본 css 설정값을 없애서 처음부터 일관되게 개발하기 위해 쓴다.</p>\n<h2>Q. calculateWinner 함수부분</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>squares<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> squares<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> squares<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> squares<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> squares<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p><strong>Q. 앞의 squares[a] &#x26;&#x26; squares[a] 는 항상 같은 것 아닌가?</strong></p>\n<p>이 부분에서는 3파트가 있는데,</p>\n<p>일단 여기서 비교연산자 <code class=\"language-text\">===</code> 우선순위가 <code class=\"language-text\">&amp;&amp;</code>연산자보다 크다</p>\n<p>그래서 먼서 <code class=\"language-text\">===</code>연산자가 수행되고 난 후에 <code class=\"language-text\">&amp;&amp;</code> 연산자가 작동되는데 이는 우리가 저번주차 Operator Truthy Falsy에서 봤던 논리연산자. </p>\n<p><code class=\"language-text\">&amp;&amp;</code>연산자는 Falsy를 찾는 연산자라고 보면 되는데,</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>squares<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">~</span><span class=\"token operator\">~</span> <span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>와 같이 되면서, squares[a]가 Falsy인지 아닌지 유무를 판단하는 것. 더 자세히 말하면 <strong>squares[a]가 존재하는지 존재하지 않는지를 판별하는 것</strong></p>\n<p>좀 더 디테일한 예를 살펴보면,</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    title<span class=\"token operator\">:</span> <span class=\"token string\">\"vanilla coding\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ToDo..</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p> 다음과 같은 상황에서는 문제 될 것이 없다.</p>\n<p>하지만</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token comment\">/* \n  {\n    title: \"vanilla coding\"\n  }\n  */</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ToDo..</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>다음과 같은 상황에서는 arr[0]이 존재하지 않아서 문제가 발생할 수 있다.</p>\n<p>arr[0]이 존재하지 않기때문에 undefined가 되고,</p>\n<p><strong>undefined.title이 되면서 애러</strong>가 난다.</p>\n<blockquote>\n<p>undefined는 객체가 아니기 때문에 dot notation을 사용할 수 없다.</p>\n</blockquote>\n<p>그래서 이럴때, 간단하게 예외처리를 하면서 이러한 애러를 막을 수 있는데,</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ToDo</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>다음과 같이 배열에 인덱싱을하고 속성을 참조하는 구문 앞에 arr[0] &#x26;&#x26; 을 넣어서 arr[0]의 값이 falsy인지 확인 한 후에 진행하도록 하는 것.</p>\n<blockquote>\n<p>arr[0]이 falsy면 false값으로 if문을 벗어난다. </p>\n</blockquote>\n<h2>Q. 스크립트에서 console.log와 브라우저 개발자도구에서 console.log</h2>\n<p>Q. 스크립트에서 console.log와 브라우저 개발자도구에서의 console.log로 똑같은 변수를 찍으면 없다고 함.</p>\n<p>이 문제는 우리가 parcel 모듈을 써서 그럼.</p>\n<p>parcel로 빌드하면 스크립트에서 작성된 변수명이나 이런것들이 변환되어서(보호?) 빌드되기 때문에 개발자 도구에서 콘솔이 찍히지 않는다.</p>\n<p><strong>따라서 Console.log대신 개발자 도구로 디버깅해보자</strong></p>\n<h2>getElementByClassName 유의사항</h2>\n<p>만약, getElementByClassName으로 Element를 가져올 경우, <strong>유사배열의 형태</strong>로 값을 가져온다.</p>\n<blockquote>\n<p>HTMLCollection</p>\n</blockquote>\n<p>그래서 주의해야되고, 배열처럼 다뤄줘야 된다.</p>\n<blockquote>\n<p>배열과 같이 [] indexing을 해줘야 함.</p>\n</blockquote>\n<p>왜 유사배열로 가져오나면\nClassName은 같은 ClassName을 가지고 있는 Element가 여러개 있을 수 있기 때문에 여러개를 가져 오도록 해야 되기 때문.</p>\n<p>반대로 id는 page에 하나만 있어야 되므로\n<code class=\"language-text\">getElementById()</code>로 가져오는 값은 반드시 하나인 것.</p>\n<p>쉽게 이해할려면, nodeList, htmlElementList등과 비슷하다고 생각하면 된다.</p>\n<h2>event 객체</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\">element<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ToDo</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>위 함수에 인자로 전달받는 event객체는 event에 대한 정보를 담고있는 객체!</p>\n<h2>event 객체에서 target 과 currentTarget 차이?</h2>\n<p>event 객체에서,\ntarget은 event가 실제로 일어나는 element라고 보면되고,</p>\n<blockquote>\n<p>click이벤트면 실제 click한 element</p>\n</blockquote>\n<p>event.currentTarget은 event가 실제 장착된 element라고 보면 된다.</p>\n<blockquote>\n<p>click 이벤트면 element.addEventListener() 로 실제 이벤트 등록한 element</p>\n</blockquote>\n<p>아마 대부분의 경우에서는 target과 currentTarget은 같을 것 같다.</p>\n<p>하지만 다른 경우가 존재하는데,</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-html line-numbers\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>outer<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>inner<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    \n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>다음과 같이 outer에 이벤트를 추가하면,\n자식인 inner에도 해당 이벤트가 발생이 된다.</p>\n<p>근데, inner에서 이벤트가 발생할때 </p>\n<p>target과 currentTarget이 달라질 수 있다.</p>\n<blockquote>\n<p>target : inner\ncurrentTarget : outer</p>\n</blockquote>\n<p>바로 event를 추가한 element 내부에 존재하는 element가 있을 때, 이 element에서 event가 발생되었을 때, </p>\n<h2>다음 결과는?</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2 출력 동일 함수 scope에 a변수 존재</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3 출력 </span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>여기서 Scope는</p>\n<h5>Global Scope</h5>\n<ul>\n<li>a = 3</li>\n<li>function foo</li>\n</ul>\n<h5>foo 함수 Scope</h5>\n<ul>\n<li>a = 2</li>\n</ul>\n<h2>다음 결과는?</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n  <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>다음과 같은 상황에서는 </p>\n<p>foo함수내부에서\nconsole.log(a)가 실행 되기 이전에\na가 선언이 먼저 되고 (값만 할당되지 않은 상태)로 Hoisting이 일어나기 때문.</p>\n<p>Hoisting으로 a변수가 존재하긴 하나 값은 할당되지 않은 상태에서 console.log(a)가 실행 된 것.</p>\n<p>그래서 javascript 내부적으로는 다음과 같이 작동한다고 보면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>실제로 이렇게 바뀌는건 아니고, 내부적으로 작동한다고 알아두자.</p>\n<h2>다음 결과는?</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>i가 5까지 간다음 for 조건문을 탈출하기 때문.</p>\n<h2>다음 결과는?</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2출력</span>\n  <span class=\"token punctuation\">}</span>\n  \n  a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>실행 순서를 파악하면 답은 쉽다.</p>\n<p>foo함수가 실행되기 직전에 이미 a = 2로 바꾸어 놓았기 때문.</p>\n<h2>예제 콘솔에 복붙 했는데 undefined?</h2>\n<p>console.log() 찍은 것 말고도 콘솔에 undefined가 나오는데 이는 복붙한 소스코드의 리턴값.</p>\n<p>함수 선언의 결과값은 undefined.</p>\n<h2>같은 Scope에서 변수 계속 선언?</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">prep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> value <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token comment\">// ToDo</span>\n  \n  <span class=\"token keyword\">var</span> value <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 이렇게 하지말자.</span>\n  <span class=\"token comment\">// 같은 Scope에서는 재선언 하지말고 이미 만들어진 변수를 활용하면 됨.</span>\n  value <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">function</span> <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> value <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 다른 Scope에서는 해도 상관 X.</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>호이스팅 예제</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// var a;  &lt;- Hoisting</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>전역변수 = 객체객체 속성. 그럼 delete?</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">delete</span> window<span class=\"token punctuation\">.</span>something <span class=\"token comment\">// false</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>전역 객체에서의 속성 삭제는 안된다.</p>","excerpt":"과제 먼저 살펴 볼 함수는 calculatorWinner() -> 승자 판별하는 함수. 어떻게 승자판별하는지 잘 파악해보자. 배열 어떻게 넘겨주고 하는건 그 다음. 그리고 승자판별을 언제해야되느냐? 이 타이밍은 잘 생각해보자. Q. 과제에서 css :before, :after…","frontmatter":{"date":"14 October, 2020","path":"/vanillacoding/prep/week3_op1","title":"Prep 2주차 수요일 오피스아워 정리"},"fields":{"readingTime":{"text":"5 min read"}}}},"pageContext":{"slug":"/vanillacoding_prep/Prep3주차월요일 오피스아워 정리/","previous":{"frontmatter":{"path":"/algorithm/programmers/lv4_wordpuzzle","draft":false,"category":"algorithm"},"fields":{"slug":"/programmers_algorithm_python/2020-10-13-프로그래머스_단어퍼즐_Lv4/"}},"next":{"frontmatter":{"path":"/vanillacoding/prep/week2_op3","draft":false,"category":"vanilla coding"},"fields":{"slug":"/vanillacoding_prep/Prep2주차금요일_오피스아워정리/"}}}},"staticQueryHashes":["3649515864","63159454"]}