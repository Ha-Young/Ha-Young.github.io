{"componentChunkName":"component---src-templates-blog-post-js","path":"/vanillacoding/prep/week1_oh2","result":{"data":{"markdownRemark":{"html":"<h1>1주차 수요일 오피스아워 정리</h1>\n<h2>오피스아워에서 하는 것</h2>\n<ul>\n<li>월요일 : 해당 주 과제, 배우는 것에 대하여 설명</li>\n<li>수요일 : 해당 주 주제에 관해 주요한 부분 설명</li>\n<li>금요일 : 해당 주차 과제에 대한 솔루션</li>\n</ul>\n<h2>JavaScript Type</h2>\n<ul>\n<li>Boolean</li>\n<li>Null</li>\n<li>Undefined</li>\n<li>Number</li>\n<li>String</li>\n<li>Symbol</li>\n<li>Object</li>\n</ul>\n<p>NaN의 type은 number</p>\n<p>NaN은 주로 애러상황에서 만나게 됨</p>\n<p>숫자가 아닌걸 숫자로 변환하려고 하였을때.</p>\n<p>isNaN()으로 판별가능. type은 number이기 때문에 판별 불가</p>\n<h4>undefined</h4>\n<p>undefined는 주로 대입으로 선언하지 않음</p>\n<p>컨벤션이 주로 그러하지 않다는 말</p>\n<p>초기값 세팅이 안되어 있을 때 주로 나온다 (빈값으로 쓰이는편)</p>\n<h4>Object 타입</h4>\n<p>함수, 배열과 같은 것들...</p>\n<h4>심볼</h4>\n<p>지금 당장은 몰라도 됨.</p>\n<p>하지만 나중에는 꼭 알고있어야 됨.</p>\n<p>심볼이라는 자료형은 객체를 만들 때 </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">var obj = {\n\ta: 1,\n\tb: 2\n};</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>와 같은걸 암호화? 처럼 할 수 있음</p>\n<p>조금 더 자바스크립트 코드에 보안성 강화와 유지보수측면에서 좋음.</p>\n<p>고유한 값? 암호화 된 값? 해쉬키 값? 같은거라고 생각하면 됨</p>\n<h2>Truthy and Falsy</h2>\n<p>Falsy는 어떤것들이 있나?</p>\n<blockquote>\n<p>false, 0, -0, \"\", null, undefined, NaN, 0n</p>\n</blockquote>\n<ul>\n<li>function을 Boolean으로 바꾸면 Truthy</li>\n</ul>\n<h4>Big int 0n?</h4>\n<ul>\n<li>javascript 검색할때는 default로 MDN을 보자.</li>\n<li>0n -> big int 형식으로 Falsy!</li>\n</ul>\n<h2>Q. Or, And Operator 문법애러</h2>\n<h4>함수 || \"hello\"</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"hello\"</span> <span class=\"token comment\">// Error</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">\"hello\"</span> <span class=\"token comment\">// Pass</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>function foo() {} || \"hello\" 로 하면 애러가 난다.\n-> 애러가 났다는건 문법상 잘못되었다는 것.</p>\n<p>(function foo(){}) || \"hello\" 와 같이 확실하게 구분지어야 한다.</p>\n<h4>객체 || \"hello\" , 객체 &#x26;&#x26; \"hello\"</h4>\n<p>{} &#x26;&#x26; \"hello\" 도 안됨 문법상 애러.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token string\">\"hello\"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token string\">\"hello\"</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span>title<span class=\"token operator\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>dㅘ 같이 순서를 바꾸면 되는데, 이유는 나중에 찾아보고 알려주신다고 함.</p>\n<h2>function</h2>\n<p>function에서 사람들이 제일 많이 햇갈리는게 return값.</p>\n<p><strong>모든 자바스크립트의 함수는 실행 후 결과값을 반환.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">// 함수를 만든 것. 선언. (실행 X)</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 함수 실행 * 소괄호가 들어간다</span>\n\n<span class=\"token comment\">// 함수 실행문 위치한 자리에는 반환값이 들어간다</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// var a = 4 + 5와 같다.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// 함수에는 return문이 없을 수도 있다. (명시하지 않을 수 있다.) 하지만 결과값은 undefined로 반환된다.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//a = undefined + undefined;</span>\n\n<span class=\"token comment\">// a -> NaN</span>\n<span class=\"token comment\">// undefined는 덧셈을 할 수 없는데 덧셈을 하였으므로 NaN이 된다. </span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>아래문도 똑같이 함수 반환값이 바로 결과로 적용된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  something <span class=\"token operator\">:</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// something : 8</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>이 부분은 많이 중요. 가장 기초적임.</strong></p>\n<h2>Control Flow</h2>\n<p>반복문은 기초적인 틀에 사로잡히지 말아야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// ToDo</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 와 같은 형태를 가장 많이 쓴다.</span>\n<span class=\"token comment\">// 하지만 이러한 형태로 익숙해지지말고 원리를 이해해서 다르게 적용시킬 줄 알아야 한다</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">+=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ToDo</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//와 같이 짝수만 적용 50번 반복된다.</span>\n\n<span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ToDo</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//와 같이 배열 역순으로 순회.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Object</h2>\n<p>초보자때는 Object에 대해 햇갈릴 것이 많을 수 있다.</p>\n<p>아직 익숙하지 않아서 그런 것.</p>\n<h4>식별자</h4>\n<p>변수와 같은데, 선언시 JavaScript 선언 규칙에 맞춰줘야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> _sfsd <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> $dsfsfs <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> ewefwef <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> <span class=\"token number\">12312</span>afefw <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error 문법적으로 안됨.</span>\n<span class=\"token keyword\">var</span> sfsdf123 <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> asdfs123sdfsadf <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> a ffd <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//공백 안됨 Error</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>이 규칙은 객체의 Key값에도 적용된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  _obj<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  $asd<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  sdf<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">123</span>fff<span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Error 문법 애러,</span>\n  <span class=\"token number\">3</span> abc <span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Error</span>\n  \n  <span class=\"token string\">'3abc'</span><span class=\"token operator\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//string타입으로 key를 주면 가능</span>\n<span class=\"token punctuation\">}</span>\n\nobj<span class=\"token punctuation\">.</span><span class=\"token number\">3</span>abc <span class=\"token comment\">// Error</span>\nobj<span class=\"token punctuation\">[</span><span class=\"token string\">'3abc'</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 대괄호를 이용해서 가져올 수 있다.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  b<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  c<span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> prop <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">// 반복문을 통해 객체의 key값을 순회 할 수 있다.</span>\n<span class=\"token comment\">// 순서는 선언순서와 같이 나올텐데, </span>\n<span class=\"token comment\">// * MDN에서 for in 문에 배열에 사용할 때는 특정순서로 작동된다는 보장은 없다고 한다. (arbitrary하게 작용)</span>\n<span class=\"token comment\">// * 따라서 for in 문에대해서 key값을 순회할 때 순서가 순차적이지 않고 arbitrary하다는 점 기억!</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Q. 객체 리터럴 - 리터럴 (literal)</h2>\n<p>리터럴 뜻은 문자 그대로의.</p>\n<p>객체에서의 리터럴은 객체를 만드는 방법은 여러개가 있는데</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  b<span class=\"token operator\">:</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">c</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>이렇게 직접적으로 만드는 방법이 객체 리터럴 선언 방법</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// 객체 리터럴 선언이 아닌 객체 선언 방법</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> obj2 <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> obj3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">함수명</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>배열도 리터럴 선언 방식이 있는데,</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// 배열 리터럴이 아닌 것</span>\n<span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> arr2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// 객체 리터럴</span>\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  b<span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 배열 리터럴</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>말 그대로 선언할 때 객체나 배열 형태의 값을\n직접적으로 표현하는게 리터럴 즉, 객체 리터럴, 배열 리터럴이고\n이 리터럴 즉, 객체 리터럴, 배열 리터럴로 바로 선언해주면\n객체, 배열을 리터럴로 생성했다고 할 수 있을 것 같습니다.</p>\n<h2>Q. 배열에서 요소와 key, value 차이</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"adding\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"add\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">.</span>length <span class=\"token comment\">// 4</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>위와 같이 객체 추가시에 길이가 추가 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">.</span>length <span class=\"token comment\">// 3</span>\narr<span class=\"token punctuation\">.</span>adding <span class=\"token operator\">=</span> <span class=\"token string\">\"add\"</span><span class=\"token punctuation\">;</span>\narr <span class=\"token comment\">// [1, 2, 3, adding: \"add\"]</span>\narr<span class=\"token punctuation\">.</span>length <span class=\"token comment\">// 3</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>위 방법에서 3째줄과 같이 요소를 추가하면 길이 변화가 없음.</p>\n<p><strong>why?</strong></p>\n<p>위 방법은 arr 배열객체에 key, value(property?)를 넣어준 것</p>\n<p>해당 방법은 요소를 넣어 준 것이라서 length에 변화가 없다.</p>\n<p>요소로 추가를 해줘야 length에 변화가 있음</p>\n<h2>ETC...</h2>\n<blockquote>\n<ul>\n<li>난문가 탄생</li>\n<li>요즘에는 혹시를 Hoxy라고 한단다.. 나는 몰랐다 ㅠㅠ</li>\n<li>금요일에는 깜짝 놀랄만한 것이 있다는데 과연?</li>\n</ul>\n</blockquote>","excerpt":"1주차 수요일 오피스아워 정리 오피스아워에서 하는 것 월요일 : 해당 주 과제, 배우는 것에 대하여 설명 수요일 : 해당 주 주제에 관해 주요한 부분 설명 금요일 : 해당 주차 과제에 대한 솔루션 JavaScript Type Boolean Null Undefined Number…","frontmatter":{"date":"07 October, 2020","path":"/vanillacoding/prep/week1_oh2","title":"바닐라코딩 Prep코스 사전준비 - 1주차 두번째 오피스아워 정리"},"fields":{"readingTime":{"text":"5 min read"}}}},"pageContext":{"slug":"/vanillacoding_prep/Prep1주차수요일_오피스아워정리/","previous":{"frontmatter":{"path":"/algorithm/python_code_review","draft":false,"category":"algorithm"},"fields":{"slug":"/algorithm/2020-09-28_코드리뷰_파이썬_꿀팁/"}},"next":{"frontmatter":{"path":"/vanillacoding/prep/week1_op3","draft":false,"category":"vanilla coding"},"fields":{"slug":"/vanillacoding_prep/Prep1주차금요일_오피스아워정리/"}}}}}