{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020/cpp/2020-08-05-C++-콘솔-입력/","result":{"data":{"site":{"siteMetadata":{"title":"HaYoung's Log","author":"@Ha-Young","siteUrl":"https://ha-young.github.io","comment":{"utterances":"Ha-Young/my-blog"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"8df21ef0-995d-524b-b314-49c4dc7e9b05","excerpt":"C, C++ 콘솔 입력 간단 비교 C언어 콘솔 입력 C++언어 콘솔 입력 C언어에서의 scanf를 통한 입력은 경계검사를 하지 않기때문에 안전하지 않았다. C++의 cin은 scanf를 어느정도 대체하였는데, 차이는 null 스트링 < - > stream 스트링 의 차이이다. null 스트링 : 마지막 비트가 null. 하나하나 읽으면서 null이면 그만 읽는 식. 표현하기위해 비트 하나가 필요(null 비트) stream…","html":"<h3 id=\"c-c-콘솔-입력-간단-비교\" style=\"position:relative;\"><a href=\"#c-c-%EC%BD%98%EC%86%94-%EC%9E%85%EB%A0%A5-%EA%B0%84%EB%8B%A8-%EB%B9%84%EA%B5%90\" aria-label=\"c c 콘솔 입력 간단 비교 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>C, C++ 콘솔 입력 간단 비교</h3>\n<ul>\n<li>C언어 콘솔 입력</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d %s\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>month<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>date<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>todos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>C++언어 콘솔 입력</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">cin <span class=\"token operator\">>></span> month <span class=\"token operator\">>></span> date <span class=\"token operator\">>></span> todos<span class=\"token punctuation\">;</span></code></pre></div>\n<p>C언어에서의 scanf를 통한 입력은 경계검사를 하지 않기때문에 안전하지 않았다.</p>\n<p>C++의 cin은 scanf를 어느정도 대체하였는데, 차이는</p>\n<p>null 스트링 &#x3C; - > stream 스트링 의 차이이다.</p>\n<ul>\n<li>null 스트링 : 마지막 비트가 null. 하나하나 읽으면서 null이면 그만 읽는 식. 표현하기위해 비트 하나가 필요(null 비트)</li>\n<li>stream 스트링 : 헤더에 길이값이 있는 것. 정해진 길이만 읽음. 길이비트 필요. null 스트링보다 비트가 많이 필요하지만 빠르게 읽을 수 있다.(정해진 크기의 값을 바로 읽기 때문)</li>\n</ul>\n<h3 id=\"c언어에서-사용\" style=\"position:relative;\"><a href=\"#c%EC%96%B8%EC%96%B4%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9\" aria-label=\"c언어에서 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>C++언어에서 사용</h3>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre class=\"language-c++\"><code class=\"language-c++\"># include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n{\n    int month;\n    int date;\n\n    cin &gt;&gt; month &gt;&gt; date;\n}</code></pre></div>\n<h3 id=\"cin도-똑같이-메모리-할당-이슈가-있다\" style=\"position:relative;\"><a href=\"#cin%EB%8F%84-%EB%98%91%EA%B0%99%EC%9D%B4-%EB%A9%94%EB%AA%A8%EB%A6%AC-%ED%95%A0%EB%8B%B9-%EC%9D%B4%EC%8A%88%EA%B0%80-%EC%9E%88%EB%8B%A4\" aria-label=\"cin도 똑같이 메모리 할당 이슈가 있다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>cin도 똑같이 메모리 할당 이슈가 있다</h3>\n<p>c언어보다 표현이 보다 쉬워지고 안전해졌지만 그래도 메모리 할당이슈는 여전했는데,</p>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre class=\"language-c++\"><code class=\"language-c++\">char input[4];\ncin &gt;&gt; input;  // input의 길이를 모른다.</code></pre></div>\n<p>이와 같이 컴퓨터 입장으로서는 정해진 입력해야되는 변수의 정확한 크기를 모를 때 발생할 수 있다.</p>\n<p>해결하는 방법은</p>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre class=\"language-c++\"><code class=\"language-c++\">char input[4];\ncin &gt;&gt; setw(4) &gt;&gt; input;</code></pre></div>\n<p>과 같이 미리 잘라두는 것.</p>\n<h3 id=\"스트림-상태-확인\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%8A%B8%EB%A6%BC-%EC%83%81%ED%83%9C-%ED%99%95%EC%9D%B8\" aria-label=\"스트림 상태 확인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스트림 상태 확인</h3>\n<p>우리가 stream을 사용할때 stream 상태를 확인 할수가 있는데,</p>\n<p>C언어에서</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// todo</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>와 표현했었다.</p>\n<p>C++에서는 다음과 같이 확인 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre class=\"language-c++\"><code class=\"language-c++\">cin &gt;&gt; line;\nif (!cin.eof())\n{\n    // todo\n}</code></pre></div>\n<h3 id=\"istream-상태확인-메서드\" style=\"position:relative;\"><a href=\"#istream-%EC%83%81%ED%83%9C%ED%99%95%EC%9D%B8-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"istream 상태확인 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>istream 상태확인 메서드</h3>\n<p>네임스페이스 - ios_base</p>\n<ul>\n<li>good()</li>\n<li>eof()</li>\n<li>fail()</li>\n<li>bad()</li>\n</ul>\n<p>를 통해 steam 상태를 확인 할 수 있다.</p>\n<h3 id=\"입력값을-통한-비교\" style=\"position:relative;\"><a href=\"#%EC%9E%85%EB%A0%A5%EA%B0%92%EC%9D%84-%ED%86%B5%ED%95%9C-%EB%B9%84%EA%B5%90\" aria-label=\"입력값을 통한 비교 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>입력값을 통한 비교</h3>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre class=\"language-c++\"><code class=\"language-c++\">int number;\ncin &gt;&gt; number;</code></pre></div>\n<p>와 같이 한다고 가정해보자.</p>\n<p>우선 입력값에 따른 eofbit와 failbit는 다음과 같다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">입력값</th>\n<th align=\"center\">eofbit</th>\n<th align=\"center\">failbit</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">456abc</td>\n<td align=\"center\">unset</td>\n<td align=\"center\">unset</td>\n</tr>\n<tr>\n<td align=\"center\">456</td>\n<td align=\"center\">(un)set</td>\n<td align=\"center\">unset</td>\n</tr>\n<tr>\n<td align=\"center\">abc</td>\n<td align=\"center\">unset</td>\n<td align=\"center\">set</td>\n</tr>\n<tr>\n<td align=\"center\">eof</td>\n<td align=\"center\">set</td>\n<td align=\"center\">set</td>\n</tr>\n</tbody>\n</table>\n<p>기본적으로 숫자를 읽는것이기 때문에 문자가 나오면 멈추는데,</p>\n<ul>\n<li>첫번째 - 456을 읽고 a에서 포인터가 멈춰있는 상태. 일단 456이라는 숫자는 읽어서 값으로 들어가있다. 그래서 실패하지는 않아서 failbit가 unset 하지만, 끝나지도 않았으므로 eofbit도 unset</li>\n<li>두번째 - 456을 읽고 456 뒷 부분에 포인터가 위치(다 읽은 상태) 그래서 eofbit set. failbit unset.\n(un)set이라 한 이유는 가끔 unset이 될 때가 있다. 이럴때는 입력버리기를 사용해야 된다.</li>\n<li>세번째 - abc 문자에서 a에 포인터가 멈춰있는 상태. 숫자값도 아닐뿐더러 읽은 값이 없어서 failbit set, eofbit unset</li>\n<li>네번째 - eof를 읽긴 했으므로 eofbit는 set되나, 숫자값이 아니므로 failbit set</li>\n</ul>\n<h3 id=\"입력-버리기discarding-input\" style=\"position:relative;\"><a href=\"#%EC%9E%85%EB%A0%A5-%EB%B2%84%EB%A6%AC%EA%B8%B0discarding-input\" aria-label=\"입력 버리기discarding input permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>입력 버리기(Discarding Input)</h3>\n<p>입력상태 (스트림상태)를 무시하고, 버리고 다시 입력받고 싶을 때 사용한다.</p>\n<ul>\n<li>cin.clear() - 스트림을 good 상태로 돌려줌.</li>\n<li>cin.ignore() - 문자 1개를 버림</li>\n<li>cin.ignore(10) - 문자 10개를 버림</li>\n</ul>\n<blockquote>\n<p>ignore는 eof에 도달하거나 지정한 수만큼 버리면 멈춘다.</p>\n</blockquote>\n<ul>\n<li>cin.ignore(10, ‘\\n’) - 문자 10개를 버리거나 newline을 만나면 멈춤.</li>\n<li>cin.ingore(LLONG_MAX, ‘\\n’) - 최대 문자 수 (한 줄) 를 버리거나 newline을 만나면 멈춤.</li>\n</ul>\n<h3 id=\"입력-함수\" style=\"position:relative;\"><a href=\"#%EC%9E%85%EB%A0%A5-%ED%95%A8%EC%88%98\" aria-label=\"입력 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>입력 함수</h3>\n<h6 id=\"get-함수\" style=\"position:relative;\"><a href=\"#get-%ED%95%A8%EC%88%98\" aria-label=\"get 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>get() 함수</h6>\n<p>뉴라인 문자, 혹은 설정문자를 만나기 직전까지의 모든 문자를 가져온다.</p>\n<p><u>뉴라인 문자는 입력스트림에 남아있다.</u></p>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre class=\"language-c++\"><code class=\"language-c++\">get(firstName, 100); // 99개 문자 혹은 newline까지의 문자.\nget(firstName, 100, &#39;#&#39;) // 99개 문자 혹은 &#39;#&#39; 문자가 나올때까지.</code></pre></div>\n<h6 id=\"getline-함수\" style=\"position:relative;\"><a href=\"#getline-%ED%95%A8%EC%88%98\" aria-label=\"getline 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>getline() 함수</h6>\n<p>뉴라인 문자 혹은 설정문자를 만나기 직전까지의 모든 문자를 가져온다.</p>\n<p><u>뉴라인 문자는 입력스트림에서 버린다.</u></p>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre class=\"language-c++\"><code class=\"language-c++\">getline(firstName, 100); // 99개 문자 혹은 newline까지의 문자.\ngetline(firstName, 100, &#39;#&#39;) // 99개 문자 혹은 &#39;#&#39; 문자가 나올때까지.</code></pre></div>\n<p>차이점은 뉴라인을 버리냐 마냐</p>\n<h3 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h3>\n<ol>\n<li>입력스트림</li>\n<li>`>> 연산자</li>\n<li>스트림 상태 (파일 입력에서도 쓰임)</li>\n<li>입력 버리기 (파일 입력에서도 쓰임)</li>\n</ol>","tableOfContents":"<ul>\n<li><a href=\"/2020/cpp/2020-08-05-C++-%EC%BD%98%EC%86%94-%EC%9E%85%EB%A0%A5/#c-c-%EC%BD%98%EC%86%94-%EC%9E%85%EB%A0%A5-%EA%B0%84%EB%8B%A8-%EB%B9%84%EA%B5%90\">C, C++ 콘솔 입력 간단 비교</a></li>\n<li><a href=\"/2020/cpp/2020-08-05-C++-%EC%BD%98%EC%86%94-%EC%9E%85%EB%A0%A5/#c%EC%96%B8%EC%96%B4%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9\">C++언어에서 사용</a></li>\n<li><a href=\"/2020/cpp/2020-08-05-C++-%EC%BD%98%EC%86%94-%EC%9E%85%EB%A0%A5/#cin%EB%8F%84-%EB%98%91%EA%B0%99%EC%9D%B4-%EB%A9%94%EB%AA%A8%EB%A6%AC-%ED%95%A0%EB%8B%B9-%EC%9D%B4%EC%8A%88%EA%B0%80-%EC%9E%88%EB%8B%A4\">cin도 똑같이 메모리 할당 이슈가 있다</a></li>\n<li><a href=\"/2020/cpp/2020-08-05-C++-%EC%BD%98%EC%86%94-%EC%9E%85%EB%A0%A5/#%EC%8A%A4%ED%8A%B8%EB%A6%BC-%EC%83%81%ED%83%9C-%ED%99%95%EC%9D%B8\">스트림 상태 확인</a></li>\n<li><a href=\"/2020/cpp/2020-08-05-C++-%EC%BD%98%EC%86%94-%EC%9E%85%EB%A0%A5/#istream-%EC%83%81%ED%83%9C%ED%99%95%EC%9D%B8-%EB%A9%94%EC%84%9C%EB%93%9C\">istream 상태확인 메서드</a></li>\n<li><a href=\"/2020/cpp/2020-08-05-C++-%EC%BD%98%EC%86%94-%EC%9E%85%EB%A0%A5/#%EC%9E%85%EB%A0%A5%EA%B0%92%EC%9D%84-%ED%86%B5%ED%95%9C-%EB%B9%84%EA%B5%90\">입력값을 통한 비교</a></li>\n<li><a href=\"/2020/cpp/2020-08-05-C++-%EC%BD%98%EC%86%94-%EC%9E%85%EB%A0%A5/#%EC%9E%85%EB%A0%A5-%EB%B2%84%EB%A6%AC%EA%B8%B0discarding-input\">입력 버리기(Discarding Input)</a></li>\n<li>\n<p><a href=\"/2020/cpp/2020-08-05-C++-%EC%BD%98%EC%86%94-%EC%9E%85%EB%A0%A5/#%EC%9E%85%EB%A0%A5-%ED%95%A8%EC%88%98\">입력 함수</a></p>\n<ul>\n<li>\n<ul>\n<li>\n<ul>\n<li><a href=\"/2020/cpp/2020-08-05-C++-%EC%BD%98%EC%86%94-%EC%9E%85%EB%A0%A5/#get-%ED%95%A8%EC%88%98\">get() 함수</a></li>\n<li><a href=\"/2020/cpp/2020-08-05-C++-%EC%BD%98%EC%86%94-%EC%9E%85%EB%A0%A5/#getline-%ED%95%A8%EC%88%98\">getline() 함수</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"/2020/cpp/2020-08-05-C++-%EC%BD%98%EC%86%94-%EC%9E%85%EB%A0%A5/#%EC%A0%95%EB%A6%AC\">정리</a></li>\n</ul>","frontmatter":{"title":"C++ 콘솔 입력","date":"August 05, 2020"}}},"pageContext":{"slug":"/2020/cpp/2020-08-05-C++-콘솔-입력/","previous":{"fields":{"slug":"/2020/cpp/2020-08-05-C++-콘솔-출력/"},"frontmatter":{"title":"C++ 콘솔 출력","category":"c++","draft":false}},"next":{"fields":{"slug":"/2020/cpp/2020-08-05-C에서-C++로-오면서-생긴것들/"},"frontmatter":{"title":"C에서 C++로 오면서 생긴것들","category":"c++","draft":false}}}}}