{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020/cpp/2020-08-05-C++-콘솔-출력/","result":{"data":{"site":{"siteMetadata":{"title":"HaYoung's Log","author":"@Ha-Young","siteUrl":"https://ha-young.github.io","comment":{"utterances":"Ha-Young/my-blog"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"352030e9-8464-5ab9-85b5-471ef6b8a30f","excerpt":"C, C++ 콘솔 출력 간단 비교 C언어 콘솔 출력 C++ 언어 콘솔 출력 C++에서의 출력은  C언어에서 %d, %s, %x 등과 같은 규격을 없애는 등 C언어의 불편한점을 해소하려고 했다. stream 개념을 도입하여 흐름을 표현하였다. (<< 연산자 - push operator) C++언어에서 사용 여기서 전처리기 include를 통해 iostream을 가져와야 한다. std:: <- 라고 쓰는 이유는 namespace때문인데, namespace…","html":"<h3 id=\"c-c-콘솔-출력-간단-비교\" style=\"position:relative;\"><a href=\"#c-c-%EC%BD%98%EC%86%94-%EC%B6%9C%EB%A0%A5-%EA%B0%84%EB%8B%A8-%EB%B9%84%EA%B5%90\" aria-label=\"c c 콘솔 출력 간단 비교 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>C, C++ 콘솔 출력 간단 비교</h3>\n<ul>\n<li>C언어 콘솔 출력</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"오늘날짜 : %d \\n할 일 : %s\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"블로그 포스팅하기\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>C++ 언어 콘솔 출력</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre class=\"language-c++\"><code class=\"language-c++\">cout &lt;&lt; &quot;오늘날짜 : &quot; &lt;&lt; date &lt;&lt; &quot;\\n할 일 : &quot; &lt;&lt; todo &lt;&lt; endl;</code></pre></div>\n<p>C++에서의 출력은  C언어에서 %d, %s, %x 등과 같은 규격을 없애는 등 C언어의 불편한점을 해소하려고 했다.</p>\n<p>stream 개념을 도입하여 흐름을 표현하였다. (&#x3C;&#x3C; 연산자 - push operator)</p>\n<h3 id=\"c언어에서-사용\" style=\"position:relative;\"><a href=\"#c%EC%96%B8%EC%96%B4%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9\" aria-label=\"c언어에서 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>C++언어에서 사용</h3>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre class=\"language-c++\"><code class=\"language-c++\"># include &lt;iostream&gt;\n// using namepsace std;\n\nint main()\n{\n    int month = 8;\n    int date = 5;\n\n    std::cout &lt;&lt; &quot;오늘은 &quot; &lt;&lt; month &lt;&lt; &quot;월 &quot; &lt;&lt; date &lt;&lt; &quot;일 입니다.&quot; &lt;&lt; std::endl   \n}</code></pre></div>\n<ul>\n<li>여기서 전처리기 include를 통해 iostream을 가져와야 한다.</li>\n<li>std:: &#x3C;- 라고 쓰는 이유는 namespace때문인데, namespace는 이름을 저장하는 공간이라고 보면 된다.\n우리가 큰 단위의 개발을 하면서 비슷한 이름들이 생길 가능성이 크기 때문에  서로 다른 모듈들에게서\n중복되는 이름이 없도록 구역을 나눈다고 보면 된다. (자바의 package와 비슷)\n여기서 std는 namespace이고 std namespace의 자원을 쓸 때 ::로 표현한다.</li>\n<li>위에는 주석처리 되어 있지만 using namespace std라고 하면 앞에 std::cout과 같은 표현을 cout으로 할 수 있다. 미리 namespace를 참조한다고 선언하는 것이라고 보면 된다.</li>\n<li>&#x3C;&#x3C; 연산자는 push operator로 C언어에서는 비트연산자로 쓰였다.\n하지만 C++에서는 연산자 오버로딩이라는게 있어서 이와같이 다른 연산자로 사용할 수 있다.</li>\n<li>endl은 c의 \\n과 같으나 다른점은 endl은 flush를 한다는 점.</li>\n</ul>\n<h3 id=\"pragma-once\" style=\"position:relative;\"><a href=\"#pragma-once\" aria-label=\"pragma once permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pragma once</h3>\n<p>우리가 C++개발을 하면서 다른모듈들을 사용하기 위해 include를 자주 할 텐데, 겹치는 모듈들이 생길 수가 있다.\n각기 다른 모듈들에서 어떠한 모듈들을 또 include하고 있는지 모르기 때문에 한번씩만 가져오게 할 수 있는 방법이 </p>\n<blockquote>\n<h1 id=\"pragma-once-1\" style=\"position:relative;\"><a href=\"#pragma-once-1\" aria-label=\"pragma once 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pragma once</h1>\n</blockquote>\n<h3 id=\"조정자-manipulator\" style=\"position:relative;\"><a href=\"#%EC%A1%B0%EC%A0%95%EC%9E%90-manipulator\" aria-label=\"조정자 manipulator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>조정자 (manipulator)</h3>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre class=\"language-c++\"><code class=\"language-c++\">cout &lt;&lt; showbase</code></pre></div>\n<p>C++에서는 출력을 할 때 조정자(manipulator)라는 것이 생겼는데,\n출력을 보조해준다.</p>\n<ul>\n<li>showpos / noshowpos - 부호표시</li>\n<li>dec / hex / oct - 진법표현 (10 / 16 / 8 진수)</li>\n<li>uppercase / nouppercase - 소, 대문자</li>\n<li>showbase / noshowbase - 숫자 앞에 Ox (16진수)</li>\n<li>left / internal / right - 정렬 (왼쪽/가운데/오른쪽) 주로 setw()와 많이 쓴다.</li>\n<li>noshowpoint / showpoint - 소수점을 보여주냐 마냐</li>\n<li>fixed / scientific - 소수점 표기법 (고정소수점 / 지수표기)</li>\n<li>boolalpha / noboolalpha - true를 1 / false를 0 으로 표기</li>\n</ul>\n<p>그외 #include <iomanip> 안에 있는 조정자도 있다.</p>\n<ul>\n<li>setw() - 컬럼 영역 설정</li>\n<li>setfill() - 빈 영역 문자로 채우기</li>\n<li>setprecision() - 소수점 자리 보정</li>\n</ul>\n<p>와 같고 사용법은 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre class=\"language-c++\"><code class=\"language-c++\">cout &lt;&lt; showbase &lt;&lt; hex &lt;&lt; 10 &lt;&lt; endl;\ncout &lt;&lt; setw(10) &lt;&lt; left &lt;&lt; &quot;hello&quot; &lt;&lt; endl;</code></pre></div>\n<h3 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h3>\n<ol>\n<li>Hello World 출력해보기</li>\n<li>네임스페이스</li>\n<li>out 스트림</li>\n<li>&#x3C;&#x3C; 연산자</li>\n<li>출력형식 지정 - 조정자(manipulator)</li>\n</ol>","frontmatter":{"title":"C++ 콘솔 출력","date":"August 05, 2020"}}},"pageContext":{"slug":"/2020/cpp/2020-08-05-C++-콘솔-출력/","previous":{"fields":{"slug":"/2020/cpp/2020-08-05-C++는-여전히-쓰이는가-쓰지-않더라도-왜-배워야-하는가/"},"frontmatter":{"title":"C++는 여전히 쓰이는가? 쓰지 않더라도 왜 배워야 하는가?","category":"cpp","draft":false}},"next":{"fields":{"slug":"/2020/cpp/2020-08-05-C++-콘솔-입력/"},"frontmatter":{"title":"C++ 콘솔 입력","category":"cpp","draft":false}}}}}