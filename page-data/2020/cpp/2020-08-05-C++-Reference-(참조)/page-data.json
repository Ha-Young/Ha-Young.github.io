{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020/cpp/2020-08-05-C++-Reference-(참조)/","result":{"data":{"site":{"siteMetadata":{"title":"HaYoung's Log","author":"@Ha-Young","siteUrl":"https://ha-young.github.io","comment":{"utterances":"Ha-Young/my-blog"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"4ffb246d-a315-5a27-adaa-358945318e33","excerpt":"C++ Reference (참조) 초창기 C에서 C++로 넘어올 때, 추가된 개념인데 C, C++ 개발자 사이에서는 호불호가 많이 갈리는 기능인 것 같다. 어떠한 사람들은 포인터로 다 대체가 되기 때문에 포인터만 쓰는 것이 좋다고 하고 어떠한 사람들은 포인터보다 편하기 때문에 사용하기 좋아하는 것 같다. 우선 Reference 문법은 자바와 비슷하지만 성능저하가 없다. (자바는 안정성을 위해 포인터를 없앰 - 매니지드) 똑같이 C++에서 안정성을 보장해야 될 때 Reference…","html":"<h3 id=\"c-reference-참조\" style=\"position:relative;\"><a href=\"#c-reference-%EC%B0%B8%EC%A1%B0\" aria-label=\"c reference 참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>C++ Reference (참조)</h3>\n<p>초창기 C에서 C++로 넘어올 때, 추가된 개념인데 C, C++ 개발자 사이에서는 호불호가 많이 갈리는 기능인 것 같다.</p>\n<p>어떠한 사람들은 포인터로 다 대체가 되기 때문에 포인터만 쓰는 것이 좋다고 하고 어떠한 사람들은 포인터보다 편하기 때문에 사용하기 좋아하는 것 같다.</p>\n<p>우선 Reference 문법은</p>\n<ul>\n<li>자바와 비슷하지만 성능저하가 없다. (자바는 안정성을 위해 포인터를 없앰 - 매니지드)</li>\n<li>똑같이 C++에서 안정성을 보장해야 될 때 Reference를 쓰면 된다.</li>\n</ul>\n<blockquote>\n<p><strong>하지만, 주소연산(포인터연산)이나 주소값 변경 등을 할 때에는 꼭 포인터를 써야 된다.</strong></p>\n<p>Call by Reference &#x3C; - > Call by Value</p>\n</blockquote>\n<ul>\n<li>Java에서는 원시타입을 제외한 타입 (Object)은 모두 Reference.</li>\n<li>C, C++은 모든 타입에 똑같이 동작한다.\nobject도 참조에 의한 연산을 하려면 포인터로 받아야 한다.</li>\n</ul>\n<h3 id=\"c에서-사용\" style=\"position:relative;\"><a href=\"#c%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9\" aria-label=\"c에서 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>C++에서 사용</h3>\n<p>C++에서 사용할 때 &#x26;(엠퍼센드) 기호를 붙여서 표현한다.</p>\n<ul>\n<li>C++에서 참조는 별칭</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre class=\"language-c++\"><code class=\"language-c++\">int number = 100;\nint&amp; reference = number;</code></pre></div>\n<p>다음과 같이 number를 참조로 reference변수명을 통해 접근가능하다.</p>\n<ul>\n<li>NULL이 될 수 없다</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre class=\"language-c++\"><code class=\"language-c++\">int&amp; reference = NULL; // ERROR</code></pre></div>\n<ul>\n<li>초기화 중에 반드시 선언되어야 한다</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre class=\"language-c++\"><code class=\"language-c++\">int&amp; reference; // ERROR</code></pre></div>\n<ul>\n<li>참조하는 대상을 바꿀 수 없다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre class=\"language-c++\"><code class=\"language-c++\">int number1 = 100;\nint number2 = 200;\nint&amp; reference = number1;\nreference = number2;</code></pre></div>\n<p><strong>이렇게 하면 reference가 참조하는 변수 number1의 값이 바뀐다.</strong></p>\n<p>그래서 number1, number2 모두 200의 값이 된다.</p>\n<h3 id=\"swap-함수를-통한-포인터과-refence비교\" style=\"position:relative;\"><a href=\"#swap-%ED%95%A8%EC%88%98%EB%A5%BC-%ED%86%B5%ED%95%9C-%ED%8F%AC%EC%9D%B8%ED%84%B0%EA%B3%BC-refence%EB%B9%84%EA%B5%90\" aria-label=\"swap 함수를 통한 포인터과 refence비교 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Swap 함수를 통한 포인터과 Refence비교</h3>\n<ul>\n<li>Pointer</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre class=\"language-c++\"><code class=\"language-c++\">void swap(int *number1, int *number2)\n{\n    int temp = *number1;\n    *number1 = *number2;\n    *number2 = temp;\n}</code></pre></div>\n<ul>\n<li>Reference</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre class=\"language-c++\"><code class=\"language-c++\">void swap(int&amp; number1, int&amp; number2)\n{\n    int temp = number1;\n    number1 = number2;\n    number1 = temp;\n}</code></pre></div>\n<h3 id=\"참조의-장점\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0%EC%9D%98-%EC%9E%A5%EC%A0%90\" aria-label=\"참조의 장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조의 장점</h3>\n<ul>\n<li>null 값이 들어갈 수 없어서 안전하다.</li>\n<li>우리가 소유하지 않은 메모리에 접근 할 수 없어 안전.</li>\n</ul>\n<h3 id=\"컴퓨터는-참조가-뭔지-알까\" style=\"position:relative;\"><a href=\"#%EC%BB%B4%ED%93%A8%ED%84%B0%EB%8A%94-%EC%B0%B8%EC%A1%B0%EA%B0%80-%EB%AD%94%EC%A7%80-%EC%95%8C%EA%B9%8C\" aria-label=\"컴퓨터는 참조가 뭔지 알까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컴퓨터는 참조가 뭔지 알까?</h3>\n<p>컴퓨터는 참조가 무엇인지 모르는데,\n포인터와 참조를 빌드시켜서 어셈블리어를 살펴보면 똑같은 어셈블리어로 만들어져 있는걸 확인 할 수 있다.</p>\n<p>이를 통해 실제로 빌드가 되면 포인터와 참조는 같은것이라고 볼 수 있고\n단지, 인간이 코드를 이해하기 쉽게, 포인터 대신에 사용할 수 있게 하는 것이라고 볼 수 있다.\n(실수도 막아준다)</p>\n<p>컴파일러가 참조를 포인터로 바꿔주는 것.(기계가 이해 할 수 있도록)</p>\n<h3 id=\"추천하는-코딩표준\" style=\"position:relative;\"><a href=\"#%EC%B6%94%EC%B2%9C%ED%95%98%EB%8A%94-%EC%BD%94%EB%94%A9%ED%91%9C%EC%A4%80\" aria-label=\"추천하는 코딩표준 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>추천하는 코딩표준</h3>\n<ul>\n<li>읽기전용 매개변수는 상수참조로</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre class=\"language-c++\"><code class=\"language-c++\">const int&amp; a</code></pre></div>\n<ul>\n<li>출력결과용 매개변수는 포인터로</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre class=\"language-c++\"><code class=\"language-c++\">int* result</code></pre></div>\n<p>어쨋든, 둘 다 함수내에서 assert 함수를 통해 null 체크를 해야한다.</p>\n<p>C#에서는 out키워드를 이용하면된다.</p>\n<h3 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h3>\n<ul>\n<li>참조</li>\n<li>포인터와 참조에 대한 코딩표준</li>\n</ul>","frontmatter":{"title":"C++ Reference (참조)","date":"August 05, 2020"}}},"pageContext":{"slug":"/2020/cpp/2020-08-05-C++-Reference-(참조)/","previous":{"fields":{"slug":"/2020/cpp/2020-08-05-C에서-C++로-오면서-생긴것들/"},"frontmatter":{"title":"C에서 C++로 오면서 생긴것들","category":"c++","draft":false}},"next":{"fields":{"slug":"/2020/cpp/2020-08-05-C++-String-문자열/"},"frontmatter":{"title":"C++ String 문자열","category":"c++","draft":false}}}}}