{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020/drafts/바닐라코딩-Prep으로받은-코드스타일링_정리/","result":{"data":{"site":{"siteMetadata":{"title":"HaYoung's Log","author":"@Ha-Young","siteUrl":"https://ha-young.github.io","comment":{"utterances":"Ha-Young/my-blog"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"dee9801e-b5d4-5fb0-85cf-fb70cee459e8","excerpt":"🔧 개발관련 ● .gitignore에 package-lock.json…","html":"<h2 id=\"-개발관련\" style=\"position:relative;\"><a href=\"#-%EA%B0%9C%EB%B0%9C%EA%B4%80%EB%A0%A8\" aria-label=\" 개발관련 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔧 개발관련</h2>\n<h3 id=\"●-gitignore에-package-lockjson을-넣으면-안된다\" style=\"position:relative;\"><a href=\"#%E2%97%8F-gitignore%EC%97%90-package-lockjson%EC%9D%84-%EB%84%A3%EC%9C%BC%EB%A9%B4-%EC%95%88%EB%90%9C%EB%8B%A4\" aria-label=\"● gitignore에 package lockjson을 넣으면 안된다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>● .gitignore에 package-lock.json을 넣으면 안된다.</h3>\n<p>나는 <code class=\"language-text\">package-lock.json</code>이 필요없이, 그냥 <code class=\"language-text\">npm install</code>시에 생기는 부산물이라고 생각해서 <code class=\"language-text\">.gitignore</code>에 <code class=\"language-text\">package-lock.json</code>을 추가했던 적이 있다. 하지만 이 <code class=\"language-text\">package-lock.json</code>은 <code class=\"language-text\">package.json</code>의 부족한 정보를 담고있는 것인데, <code class=\"language-text\">pack.json</code>에 우리가 다운받으면 나오는 버전에 대한 정보는 사실 명확한 버전이 아니라 버전에 대한 <code class=\"language-text\">범위(Caret Range)</code>를 표기하고 있다. 그래서 명확한 버전이 아니기 때문에 명확한 버전에 대한 정보를 담는 것이 바로 <code class=\"language-text\">package-lock.json</code>이고 이 <code class=\"language-text\">package-lock.json</code>이 있다면 <code class=\"language-text\">npm install</code>시에 <code class=\"language-text\">package-lock.json</code>을 통해 <code class=\"language-text\">node-modules</code>폴더를 생성하게 된다. 만약, <code class=\"language-text\">package-lock.json</code>이 없다면 <code class=\"language-text\">package.json</code>을 참고해서 생성되기 때문에 명확하지 않은 정보로 생성이 된다. </p>\n<p>소스를 배포나 공유시에 이 <code class=\"language-text\">package-lock.json</code>이 없다면, 내가 다운받고 개발한 환경과 다르게 <code class=\"language-text\">package.json</code>을 통해 명확하지 않은 모듈들을 받을 수 있으므로 제대로 작동하지 않을 확률이 높다.</p>\n<p>따라서 <strong><code class=\"language-text\">package-lock.json</code>은 소스 코드를 배포 혹은 공유시에 함게 공유</strong>되어야 한다.</p>\n<h3 id=\"●-npm-패키지-매니저를-쓴-프로젝트라면-계속-npm으로-사용하자\" style=\"position:relative;\"><a href=\"#%E2%97%8F-npm-%ED%8C%A8%ED%82%A4%EC%A7%80-%EB%A7%A4%EB%8B%88%EC%A0%80%EB%A5%BC-%EC%93%B4-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EB%9D%BC%EB%A9%B4-%EA%B3%84%EC%86%8D-npm%EC%9C%BC%EB%A1%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EC%9E%90\" aria-label=\"● npm 패키지 매니저를 쓴 프로젝트라면 계속 npm으로 사용하자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>● npm 패키지 매니저를 쓴 프로젝트라면 계속 npm으로 사용하자</h3>\n<p>package-lock.json이 있다면, npm 패키지 매니저를 이용해 모듈 인스톨이 구성된 상태일 것이다.</p>\n<p>하지만 모르고 yarn을 이용해 다시 yarn add를 통해서 구현을 했는데, 이렇게 하면 위와 같이 package-lock.json을 참조하지않아 제대로 된 버전의 모듈들이 설치되지 않는다. 즉, 이전에 개발된 환경과 다른 개발환경이 조성되어 문제가 생길 확률이 높다. 따라서 npm 패키지 매니저를 쓴 프로젝트라면 계속해서 npm 패키지 매니저를 써야 한다.</p>\n<h3 id=\"●-변수에-leteral로-할당하는-것-보다-상수로-관리할-수-있다면-관리하자\" style=\"position:relative;\"><a href=\"#%E2%97%8F-%EB%B3%80%EC%88%98%EC%97%90-leteral%EB%A1%9C-%ED%95%A0%EB%8B%B9%ED%95%98%EB%8A%94-%EA%B2%83-%EB%B3%B4%EB%8B%A4-%EC%83%81%EC%88%98%EB%A1%9C-%EA%B4%80%EB%A6%AC%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8B%A4%EB%A9%B4-%EA%B4%80%EB%A6%AC%ED%95%98%EC%9E%90\" aria-label=\"● 변수에 leteral로 할당하는 것 보다 상수로 관리할 수 있다면 관리하자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>● 변수에 leteral로 할당하는 것 보다 상수로 관리할 수 있다면 관리하자.</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> startButtonElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.start-btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> answerTextBoxElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input.input-answer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> timeLimit <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>과 같이 관리하는 것 보다</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">START_BTN_CLASSNAME</span> <span class=\"token operator\">=</span> <span class=\"token string\">'.start-btn'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">ANSWER_TEXT_BOX_SELECTOR</span> <span class=\"token operator\">=</span> <span class=\"token string\">'input.input-answer'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">TIME_LIMIT</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>과 같이 상수로 저장시켜두고, (별도로 상수 파일을 만들면 더 좋다. <code class=\"language-text\">variable.js</code>)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> startButtonElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token constant\">START_BTN_CLASSNAME</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> answerTextBoxElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ANSWER_TEXT_BOX_SELECTOR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> timeLimit <span class=\"token operator\">=</span> <span class=\"token constant\">TIME_LIMIT</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>와 같이 상수를 이용하게끔 하면 재사용에 대해 대비할 수 있고 훨씬 완성도 있어 보인다.</p>\n<h3 id=\"●-디버깅을-위한-consolelog는-prpull-request-혹은-mrmerge-request전에-항상-제거하자\" style=\"position:relative;\"><a href=\"#%E2%97%8F-%EB%94%94%EB%B2%84%EA%B9%85%EC%9D%84-%EC%9C%84%ED%95%9C-consolelog%EB%8A%94-prpull-request-%ED%98%B9%EC%9D%80-mrmerge-request%EC%A0%84%EC%97%90-%ED%95%AD%EC%83%81-%EC%A0%9C%EA%B1%B0%ED%95%98%EC%9E%90\" aria-label=\"● 디버깅을 위한 consolelog는 prpull request 혹은 mrmerge request전에 항상 제거하자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>● 디버깅을 위한 console.log는 PR(Pull Request) 혹은 MR(Merge Request)전에 항상 제거하자</h3>\n<p>완성 후 제출을 하는 PR이나 MR에서 디버깅을 위한 console.log가 찍혀있다면 코드 완성도의 느낌이 떨어질 수 있고, master에 Merge시킬 때 관리자가 일일이 다 제거해야되는 번거로움이 생긴다. </p>\n<h3 id=\"●-커밋후-pr-혹은-mr로-올리는-작업에-todo와-같은-주석은-없도록-하자\" style=\"position:relative;\"><a href=\"#%E2%97%8F-%EC%BB%A4%EB%B0%8B%ED%9B%84-pr-%ED%98%B9%EC%9D%80-mr%EB%A1%9C-%EC%98%AC%EB%A6%AC%EB%8A%94-%EC%9E%91%EC%97%85%EC%97%90-todo%EC%99%80-%EA%B0%99%EC%9D%80-%EC%A3%BC%EC%84%9D%EC%9D%80-%EC%97%86%EB%8F%84%EB%A1%9D-%ED%95%98%EC%9E%90\" aria-label=\"● 커밋후 pr 혹은 mr로 올리는 작업에 todo와 같은 주석은 없도록 하자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>● 커밋후 PR 혹은 MR로 올리는 작업에 ToDo와 같은 주석은 없도록 하자</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">doWorkSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ToDo</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 부분은 실제 업무로 들어갔을 때 만약 남들이 봤을 때 주석으로 ToDo로 적혀있다면,\n해당 커밋과 PR, MR에 대한 작업을 덜 한건지 다음 작업을 위해 남겨둔건지 햇갈린다.</p>\n<p>해당 PR, MR에 대한 작업을 덜 한것처럼 보일 수 있기때문에 미완성의 느낌이 나서 커밋에 대한 작업이 다 된건지 안된건지 보는사람으로 부터 생각을 하게 한다는 점 때문에 없애는 편이 낫다.</p>\n<h3 id=\"●--css-반응형-작업은-media-query-break-point를-45개-기준을-두고-작업한다\" style=\"position:relative;\"><a href=\"#%E2%97%8F--css-%EB%B0%98%EC%9D%91%ED%98%95-%EC%9E%91%EC%97%85%EC%9D%80-media-query-break-point%EB%A5%BC-45%EA%B0%9C-%EA%B8%B0%EC%A4%80%EC%9D%84-%EB%91%90%EA%B3%A0-%EC%9E%91%EC%97%85%ED%95%9C%EB%8B%A4\" aria-label=\"●  css 반응형 작업은 media query break point를 45개 기준을 두고 작업한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>●  css 반응형 작업은 (media query) break point를 4~5개 기준을 두고 작업한다.</h3>\n<p>이 부분은 내가 break point를 디바이스 (width) 기준으로 break point를 4~5개로 잡고 작업하는지 모르고,</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span>361px<span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span>399px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">html</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 30%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span>400px<span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span>439px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">html</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 32.5%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span>440px<span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span>479px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token selector\">html</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 35%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* ... 반복 ...*/</span></code></pre></div>\n<p>다음과 같이 40px정도 단위로 작업을 해서 media query가 굉장히 많았다.</p>\n<p>이럴경우 유지보수가 힘들기 때문에 4~5개의 기준을 두고 일한다고 한다.</p>\n<p>기준은 각 회사나 제품마다 다르겠지만 4~5 개의 break point를 두는건 비슷한 것 같다.</p>\n<p>참고자료</p>\n<ul>\n<li><a href=\"https://getbootstrap.com/docs/4.5/layout/grid/#grid-options\">Bootstrap 기준 참고</a></li>\n</ul>\n<h3 id=\"●-id-selector는-사용하지-말자\" style=\"position:relative;\"><a href=\"#%E2%97%8F-id-selector%EB%8A%94-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80-%EB%A7%90%EC%9E%90\" aria-label=\"● id selector는 사용하지 말자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>● ID Selector는 사용하지 말자</h3>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">#id-selector</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'black'</span><span class=\"token punctuation\">;</span>\n    ...\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>CSS에서 ID 선택자는 잘 사용하지 않는다. ID 선택자는  유연성이 떨어지고 (하나 이상이 필요한 경우 더 추가 할 수 없음) 필요한 경우 재정의하기가 더 어렵고 클래스보다 특이성이 높다.</p>\n<p>참고자료\n<a href=\"https://developer.mozilla.org/en-US/docs/MDN/Guidelines/Code_guidelines/CSS#Dont_use_ID_selectors\">Don’t use ID selectors</a></p>\n<h3 id=\"●-스크롤-없는-풀페이지-화면을-만들고-싶다면-overflow-hidden을-사용하자\" style=\"position:relative;\"><a href=\"#%E2%97%8F-%EC%8A%A4%ED%81%AC%EB%A1%A4-%EC%97%86%EB%8A%94-%ED%92%80%ED%8E%98%EC%9D%B4%EC%A7%80-%ED%99%94%EB%A9%B4%EC%9D%84-%EB%A7%8C%EB%93%A4%EA%B3%A0-%EC%8B%B6%EB%8B%A4%EB%A9%B4-overflow-hidden%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%9E%90\" aria-label=\"● 스크롤 없는 풀페이지 화면을 만들고 싶다면 overflow hidden을 사용하자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>● 스크롤 없는 풀페이지 화면을 만들고 싶다면 overflow: hidden을 사용하자</h3>\n<p>풀페이지 화면을 만들기위해 body에 margin-top 속성을 작성한 적이 있었는데,\nbody에 margin-top을 넣는경우는 잘 없으니 body에 overflow: hidden을 사용하자.</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/overflow\">https://developer.mozilla.org/en-US/docs/Web/CSS/overflow</a></p>\n<h2 id=\"-코드스타일-관련\" style=\"position:relative;\"><a href=\"#-%EC%BD%94%EB%93%9C%EC%8A%A4%ED%83%80%EC%9D%BC-%EA%B4%80%EB%A0%A8\" aria-label=\" 코드스타일 관련 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎭 코드스타일 관련</h2>\n<h3 id=\"●-줄임말-보다는-길더라도-명확하게-naming하자\" style=\"position:relative;\"><a href=\"#%E2%97%8F-%EC%A4%84%EC%9E%84%EB%A7%90-%EB%B3%B4%EB%8B%A4%EB%8A%94-%EA%B8%B8%EB%8D%94%EB%9D%BC%EB%8F%84-%EB%AA%85%ED%99%95%ED%95%98%EA%B2%8C-naming%ED%95%98%EC%9E%90\" aria-label=\"● 줄임말 보다는 길더라도 명확하게 naming하자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>● 줄임말 보다는 길더라도 명확하게 Naming하자</h3>\n<p>과제 중에 상수로 표기하고 싶어서 , 이를 리뷰로 남겨주셨다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> ClassNames <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    active<span class=\"token operator\">:</span> <span class=\"token string\">\"active\"</span><span class=\"token punctuation\">,</span>\n    gBoardCell<span class=\"token operator\">:</span> <span class=\"token string\">\"gboard_cell\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// gboard도 globalBoard인지 gameBoard인지 햇갈린다.</span>\n    \n    qs<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// qs가 무엇일까?</span>\n        player1Score<span class=\"token operator\">:</span> <span class=\"token string\">\"#play1-score\"</span><span class=\"token punctuation\">,</span>\n        player2Score<span class=\"token operator\">:</span> <span class=\"token string\">\"#play2-score\"</span><span class=\"token punctuation\">,</span>\n        tieScore<span class=\"token operator\">:</span> <span class=\"token string\">\"#ties-score\"</span><span class=\"token punctuation\">,</span>\n        soundOn<span class=\"token operator\">:</span> <span class=\"token string\">\"#sound-on\"</span><span class=\"token punctuation\">,</span>\n        soundOff<span class=\"token operator\">:</span> <span class=\"token string\">\"#sound-off\"</span><span class=\"token punctuation\">,</span>\n  \t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>다음과 같이 DOM조작을 위해서 HTML의 class name을 상수화 시켰었다.\n여기서 <code class=\"language-text\">query selector</code>를 <code class=\"language-text\">qs</code>로 줄여 썼는데 리뷰어분이 <code class=\"language-text\">qs</code>가 무엇인지 추론을 해야 하는 상황이 생겼고 이는 한번 볼 코드를 여러번 보게 만든 요인이 된다.</p>\n<p>또 위의 <code class=\"language-text\">gBoardCell</code> 또한 <code class=\"language-text\">global board</code>인지 <code class=\"language-text\">game board</code>인지 햇갈린다.</p>\n<blockquote>\n<p>실제로 리뷰어님은 global board로 인지하셨다.</p>\n</blockquote>\n<p>다음과 같이 네이밍에 있어서 줄임말이 효과적인지 다시한번 생각해보게 되었고 줄여서 누구나 알 수 있거나 명확하지 않다면 줄임말을 사용하지 않기로 하였다.</p>\n<h3 id=\"●-var-대신에-let-const를-사용하자\" style=\"position:relative;\"><a href=\"#%E2%97%8F-var-%EB%8C%80%EC%8B%A0%EC%97%90-let-const%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%9E%90\" aria-label=\"● var 대신에 let const를 사용하자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>● var 대신에 let, const를 사용하자</h3>\n<p>var는 호이스팅의 문제와 함수 스코프가 적용되는 등의 개발중에 알수없는 문제를 야기시킬 수 있다.</p>\n<p>따라서 var 대신 let, const를 사용하자.</p>\n<p>변수 선언은 </p>\n<p>const로 선언하고 변경되는 값이면 let으로 변경하도록 하자.</p>\n<p>참고자료</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var\">var</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\">const</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\">let</a></li>\n<li><a href=\"https://stackoverflow.com/questions/21237105/const-in-javascript-when-to-use-it-and-is-it-necessary\">Const in JavaScript: when to use it and is it necessary?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/762011/whats-the-difference-between-using-let-and-var\">What’s the difference between using “let” and “var”?</a></li>\n</ul>\n<h3 id=\"●-naming에-있어서-일관성을-가져가자\" style=\"position:relative;\"><a href=\"#%E2%97%8F-naming%EC%97%90-%EC%9E%88%EC%96%B4%EC%84%9C-%EC%9D%BC%EA%B4%80%EC%84%B1%EC%9D%84-%EA%B0%80%EC%A0%B8%EA%B0%80%EC%9E%90\" aria-label=\"● naming에 있어서 일관성을 가져가자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>● naming에 있어서 일관성을 가져가자</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> className <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  btnStart<span class=\"token operator\">:</span> <span class=\"token string\">\"btn-start\"</span><span class=\"token punctuation\">,</span>\n  soundBtn<span class=\"token operator\">:</span> <span class=\"token string\">\"sound-btn\"</span><span class=\"token punctuation\">,</span>\n  restartBtn<span class=\"token operator\">:</span> <span class=\"token string\">\"restart-btn\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> btnStartElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'btn-start'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> soundBtnElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sound-btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> restartBtnElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'restart-btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>다음과 같은 코드의 문제점은 무엇일까? </p>\n<p>-> 코드의 일관성이 떨어져 보인다.</p>\n<p><code class=\"language-text\">btnStart</code>는 btn으로 시작되지만, <code class=\"language-text\">soundBtn</code>과 <code class=\"language-text\">restartBtn</code>은 btn으로 끝난다.\n이는 코드가 정돈되어 보이지 않고 심할경우 가독성 또한 헤칠 수 있다.</p>\n<p>왠만하면 네이밍에 있어서도 코드의 일관성을 가지자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> className <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  startBtn<span class=\"token operator\">:</span> <span class=\"token string\">\"start-btn\"</span><span class=\"token punctuation\">,</span>\n  soundBtn<span class=\"token operator\">:</span> <span class=\"token string\">\"sound-btn\"</span><span class=\"token punctuation\">,</span>\n  restartBtn<span class=\"token operator\">:</span> <span class=\"token string\">\"restart-btn\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"●-함축적인-표현보다-길더라도-명확하게-naming하자\" style=\"position:relative;\"><a href=\"#%E2%97%8F-%ED%95%A8%EC%B6%95%EC%A0%81%EC%9D%B8-%ED%91%9C%ED%98%84%EB%B3%B4%EB%8B%A4-%EA%B8%B8%EB%8D%94%EB%9D%BC%EB%8F%84-%EB%AA%85%ED%99%95%ED%95%98%EA%B2%8C-naming%ED%95%98%EC%9E%90\" aria-label=\"● 함축적인 표현보다 길더라도 명확하게 naming하자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>● 함축적인 표현보다 길더라도 명확하게 Naming하자</h3>\n<p>변수나 함수 Naming시에 짧고 함축적인 것 보다 무조건 명확하게 작성하는게 중요하다.</p>\n<p>예를들어,</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> quizCount<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getQuizCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> quizCount<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>처럼 되어있다면, 이 quizCount는 전체 quiz의 개수인지 내가 푼 quiz의 개수인지 알 수 없다.</p>\n<p>logic을 확인해봐야 하는 번거로움이 생긴다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> currentQuizCount<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> allQuizCount<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getCurrentQuizCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> currentQuizCount<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">allQuizCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> allQuizCount<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>와 같이 표현하는게 훨씬 좋다.</p>\n<h3 id=\"●-bool-변수-naming\" style=\"position:relative;\"><a href=\"#%E2%97%8F-bool-%EB%B3%80%EC%88%98-naming\" aria-label=\"● bool 변수 naming permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>● Bool 변수 Naming</h3>\n<p>Bool 변수 네이밍에 있어서 일반변수처럼 표기하기보다는 Bool 변수임을 알 수 있도록 표기하는것이 좋다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> myTurn <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// X</span>\n<span class=\"token keyword\">const</span> isMyTurn <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// O</span></code></pre></div>\n<p>아래 사이트를 참조하자.</p>\n<p><a href=\"https://soojin.ro/blog/naming-boolean-variables\">Bool 변수 이름 제대로 짓기 위한 최소한의 영어 문법</a></p>\n<h3 id=\"●-css-작성시에는-규칙성을-가져야-한다\" style=\"position:relative;\"><a href=\"#%E2%97%8F-css-%EC%9E%91%EC%84%B1%EC%8B%9C%EC%97%90%EB%8A%94-%EA%B7%9C%EC%B9%99%EC%84%B1%EC%9D%84-%EA%B0%80%EC%A0%B8%EC%95%BC-%ED%95%9C%EB%8B%A4\" aria-label=\"● css 작성시에는 규칙성을 가져야 한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>● css 작성시에는 규칙성을 가져야 한다.</h3>\n<p>css 작성시에 아무 속성이나 순서없이 적지말고 이 또한 규칙성을 가지고 작성해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1. Layout Properties (position, float, clear, display)\n2. Box Model Properties (width, height, margin, padding)\n3. Visual Properties (color, background, border, box-shadow)\n4. Typography Properties (font-size, font-family, text-align, text-transform)\n5. Misc Properties (cursor, overflow, z-index)</code></pre></div>\n<p>대부분 위의 순으로 작성을 한다.</p>\n<p>이외에도 알파벳 순이라던지 회사마다 다른 컨벤션을 가지고 있다.</p>\n<p>중점은 <strong>css작성에도 규칙성과 일관성이 있어야 된다는 점!</strong></p>\n<h3 id=\"●-newline-추가\" style=\"position:relative;\"><a href=\"#%E2%97%8F-newline-%EC%B6%94%EA%B0%80\" aria-label=\"● newline 추가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>● newline 추가</h3>\n<p>git을 이용할때에는 항상 파일의 끝에 <code class=\"language-text\">new line</code>이 추가되어야 한다.</p>\n<p>이는 git에서 <code class=\"language-text\">new line</code>을 통해 파일 구분을 하기 때문.</p>\n<p><strong><code class=\"language-text\">new line</code>이 없다면 git에서 문제가 생길 확률이 높다.</strong></p>\n<p>없으면 git에서 No newline at end of file이라는 경고를 보여준다.</p>\n<p>아래 문서를 참조하자</p>\n<p><a href=\"https://stackoverflow.com/questions/729692/why-should-text-files-end-with-a-newline\">Why should text files end with a newline?</a></p>\n<h3 id=\"●-사용하지-않는-변수-꼭-제거하기\" style=\"position:relative;\"><a href=\"#%E2%97%8F-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94-%EB%B3%80%EC%88%98-%EA%BC%AD-%EC%A0%9C%EA%B1%B0%ED%95%98%EA%B8%B0\" aria-label=\"● 사용하지 않는 변수 꼭 제거하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>● 사용하지 않는 변수 꼭 제거하기</h3>\n<p>사용하지 않는 변수는 꼭 제거해야 한다.</p>\n<h3 id=\"●-함수-naming에서는-동사가-앞에-와야-한다\" style=\"position:relative;\"><a href=\"#%E2%97%8F-%ED%95%A8%EC%88%98-naming%EC%97%90%EC%84%9C%EB%8A%94-%EB%8F%99%EC%82%AC%EA%B0%80-%EC%95%9E%EC%97%90-%EC%99%80%EC%95%BC-%ED%95%9C%EB%8B%A4\" aria-label=\"● 함수 naming에서는 동사가 앞에 와야 한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>● 함수 Naming에서는 동사가 앞에 와야 한다.</h3>\n<p>함수 이름은 동사로 시작하는 것이 일반적.</p>\n<p>국내에만 국한된 것이 아니라 세계적으로 쓰는 컨벤션.</p>\n<p>영어로 이해할 수 있게 잘 네이밍 하는 것이 상당히 중요하다.</p>\n<h3 id=\"●-자바스크립트는-일반적으로-camelcase를-사용한다\" style=\"position:relative;\"><a href=\"#%E2%97%8F-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%8A%94-%EC%9D%BC%EB%B0%98%EC%A0%81%EC%9C%BC%EB%A1%9C-camelcase%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C%EB%8B%A4\" aria-label=\"● 자바스크립트는 일반적으로 camelcase를 사용한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>● 자바스크립트는 일반적으로 camelCase를 사용한다</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> camelCase <span class=\"token operator\">=</span> <span class=\"token string\">'thisIsCamelCase'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"●-naming할-때-단수-복수-표현을-명확히-하자\" style=\"position:relative;\"><a href=\"#%E2%97%8F-naming%ED%95%A0-%EB%95%8C-%EB%8B%A8%EC%88%98-%EB%B3%B5%EC%88%98-%ED%91%9C%ED%98%84%EC%9D%84-%EB%AA%85%ED%99%95%ED%9E%88-%ED%95%98%EC%9E%90\" aria-label=\"● naming할 때 단수 복수 표현을 명확히 하자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>● Naming할 때 단수, 복수 표현을 명확히 하자.</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"> </code></pre></div>\n<h3 id=\"●-dom-요소-naming\" style=\"position:relative;\"><a href=\"#%E2%97%8F-dom-%EC%9A%94%EC%86%8C-naming\" aria-label=\"● dom 요소 naming permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>● DOM 요소 Naming</h3>\n<h2 id=\"-자바스크립트-문법-관련\" style=\"position:relative;\"><a href=\"#-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%AC%B8%EB%B2%95-%EA%B4%80%EB%A0%A8\" aria-label=\" 자바스크립트 문법 관련 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📕 자바스크립트 문법 관련</h2>\n<h3 id=\"●-arrayprototypefill\" style=\"position:relative;\"><a href=\"#%E2%97%8F-arrayprototypefill\" aria-label=\"● arrayprototypefill permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>● Array.prototype.fill()</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> squares <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>다음과 같이 반복적인 표현을 </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> squares <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>length<span class=\"token operator\">:</span><span class=\"token number\">9</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>와 같은 표현으로 간단하게 표현할 수 있다.</p>\n<h3 id=\"●-logical-true-not을-잘-활용하자-truthy-falsy\" style=\"position:relative;\"><a href=\"#%E2%97%8F-logical-true-not%EC%9D%84-%EC%9E%98-%ED%99%9C%EC%9A%A9%ED%95%98%EC%9E%90-truthy-falsy\" aria-label=\"● logical true not을 잘 활용하자 truthy falsy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>● Logical TRUE, NOT을 잘 활용하자 (Truthy, Falsy)</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>someVariable <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ToDo...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>와 같은 표현보다</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>someVariable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ToDo...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>와 같이 Falsy를 이용하자.</p>\n<p>참고자료\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_NOT\">Logical NOT (!)</a></p>\n<h3 id=\"●-dom으로-style-property를-수정하는-것-대신-classlist로-스타일-변경을-꾀하자\" style=\"position:relative;\"><a href=\"#%E2%97%8F-dom%EC%9C%BC%EB%A1%9C-style-property%EB%A5%BC-%EC%88%98%EC%A0%95%ED%95%98%EB%8A%94-%EA%B2%83-%EB%8C%80%EC%8B%A0-classlist%EB%A1%9C-%EC%8A%A4%ED%83%80%EC%9D%BC-%EB%B3%80%EA%B2%BD%EC%9D%84-%EA%BE%80%ED%95%98%EC%9E%90\" aria-label=\"● dom으로 style property를 수정하는 것 대신 classlist로 스타일 변경을 꾀하자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>● DOM으로 style property를 수정하는 것 대신 classList로 스타일 변경을 꾀하자</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>soundFlag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    soundOn<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">\"block\"</span><span class=\"token punctuation\">;</span>\n    soundOff<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">\"none\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    soundOn<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">\"none\"</span><span class=\"token punctuation\">;</span>\n    soundOff<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">\"block\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>다음과 같이 직접적으로 DOM Element의 style property를 수정하지 말고,\nclassList로 이미 정의된 class를 추가함으로써 스타일 변경을 꾀하는 것이 좋다.</p>\n<p>위와 같이 수정하면 inline css로 적용되기 때문에 css적용 우선순위의 문제와 가독성을 헤칠 가능성이 있다.\n또, css파일로 스타일을 관리하는 것이 훨씬 유지보수성이 좋다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">element<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundColor <span class=\"token operator\">=</span> <span class=\"token string\">\"white\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> white</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>안녕하세요<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>정리하자면, <strong>css파일에 적용시킬 css class를 미리 만들어놓고 이 class를 add, remove</strong> 하는 식으로 관리하는 것이 훨씬 좋다.</p>\n<p>참고자료</p>\n<ul>\n<li><a href=\"https://www.w3schools.com/css/css_howto.asp\">External CSS VS Internal CSS VS Inline CSS</a></li>\n</ul>\n<h3 id=\"●-addeventlistener-callback함수의-인자인-event-객체에서-target과-currenttarget-차이\" style=\"position:relative;\"><a href=\"#%E2%97%8F-addeventlistener-callback%ED%95%A8%EC%88%98%EC%9D%98-%EC%9D%B8%EC%9E%90%EC%9D%B8-event-%EA%B0%9D%EC%B2%B4%EC%97%90%EC%84%9C-target%EA%B3%BC-currenttarget-%EC%B0%A8%EC%9D%B4\" aria-label=\"● addeventlistener callback함수의 인자인 event 객체에서 target과 currenttarget 차이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>● addEventListener callback함수의 인자인 event 객체에서 target과 currentTarget 차이?</h3>\n<p>event 객체에서, target은 event가 실제로 일어나는 element라고 보면되고,</p>\n<blockquote>\n<p>click이벤트면 실제 click한 element</p>\n</blockquote>\n<p>event.currentTarget은 event가 실제 장착된 element라고 보면 된다.</p>\n<blockquote>\n<p>click 이벤트면 element.addEventListener() 로 실제 이벤트 등록한 element</p>\n</blockquote>\n<p>아마 대부분의 경우에서는 target과 currentTarget은 같을 것 같다.</p>\n<p>하지만 다른 경우가 존재하는데,</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>outer<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>inner<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    \n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>다음과 같이 outer에 이벤트를 추가하면, 자식인 inner에도 해당 이벤트가 발생이 된다.</p>\n<p>근데, inner를 클릭해서 outer에 추가한 이벤트가 발생할때에</p>\n<p>target과 currentTarget이 달라질 수 있다.</p>\n<blockquote>\n<p>target : inner / currentTarget : outer</p>\n</blockquote>\n<p>바로 event를 추가한 element 내부에 존재하는 element가 있을 때, 이 내부에 존재하는 element에서 등록된 event가 발생되었다면 <strong><code class=\"language-text\">currentTarget</code>은 Event가 등록된 element</strong>이고, <strong><code class=\"language-text\">target</code>은 현재 이벤트가 발생된 element</strong>이다.</p>\n<h3 id=\"●-addeventlistener에-함수-인스턴스-차이\" style=\"position:relative;\"><a href=\"#%E2%97%8F-addeventlistener%EC%97%90-%ED%95%A8%EC%88%98-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EC%B0%A8%EC%9D%B4\" aria-label=\"● addeventlistener에 함수 인스턴스 차이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>● addEventListener에 함수 인스턴스 차이</h3>\n<p>아래 예제를 통해 차이를 확인하자.</p>\n<ul>\n<li>\n<p>선언 및 생성된 함수 인스턴스</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">onClickHandler</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function\">onSubmitMessage</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'submit'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nbuttonElement<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> onClickHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nformElement<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'submit'</span><span class=\"token punctuation\">,</span> onSubmitMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nbuttonElement<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> onClickHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 이미 똑같은 함수 인스턴스로 이벤트 등록되어 있기 때문에 추가 등록 되지 않음 replace됨</span>\nformElement<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'submit'</span><span class=\"token punctuation\">,</span> onSubmitMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 이미 똑같은 함수 인스턴스로 이벤트 등록되어 있기 때문에 추가 등록 되지 않음 replace됨</span>\n\n<span class=\"token comment\">// 버튼 클릭시 'click' 로그 한 번</span>\n<span class=\"token comment\">// submit시 'submit' 로그 한 번</span></code></pre></div>\n</li>\n<li>\n<p>익명함수 인스턴스</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">buttonElement<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nformElement<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'submit'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'submit'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 함수 인스턴스는 새롭게 생성된 함수 인스턴스이기 때문에 로직만 같을 뿐 똑같은 함수 인스턴스가 없으므로 이벤트 리스너에 추가된다.</span>\nbuttonElement<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nformElement<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'submit'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'submit'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 버튼 클릭시 'click' 로그 두 번</span>\n<span class=\"token comment\">// submit시 'submit' 로그 두 번</span></code></pre></div>\n</li>\n</ul>\n<p>참고자료 : <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Multiple_identical_event_listeners\">Multiple identical event listeners</a></p>\n<h3 id=\"-addeventlistener의-callback-함수에서의-this-키워드\" style=\"position:relative;\"><a href=\"#-addeventlistener%EC%9D%98-callback-%ED%95%A8%EC%88%98%EC%97%90%EC%84%9C%EC%9D%98-this-%ED%82%A4%EC%9B%8C%EB%93%9C\" aria-label=\" addeventlistener의 callback 함수에서의 this 키워드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎇 addEventListener의 callback 함수에서의 this 키워드</h3>\n<p>내가 클래스 키워드를 이용해서 컴포넌트를 만들어봤는데, 이 때 이 컴포넌트에 해당되는 버튼을 클릭하면 버튼클릭 이벤트를 추가하는 부분을 넣은 적이 있었다. 하지만 내부에서 <code class=\"language-text\">this</code>키워드가 제대로 동작하지 않았는데 다음을 살펴보자.</p>\n<p><code class=\"language-text\">#</code>으로 붙은 변수들은 class에서 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#Field_declarations\">private field</a>로 선언된 것들이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">myComponent</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 아래는 private field 선언</span>\n    #targetElement<span class=\"token punctuation\">;</span>\n    #requireData<span class=\"token punctuation\">;</span>\n    #onClickButton<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> $target<span class=\"token punctuation\">,</span> requireData<span class=\"token punctuation\">,</span> onClickButton <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#targetElement <span class=\"token operator\">=</span> $target<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#requireData <span class=\"token operator\">=</span> requireData<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#onClickButton <span class=\"token operator\">=</span> onClickButton<span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buttonElement <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#targetElement<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">function</span> <span class=\"token function\">setEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 아래와 같이 button Element에 함수 선언식으로 구현된 함수를 onClick Event로 추가</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>buttonElement<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onButtonClickInnerHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n\t<span class=\"token keyword\">function</span> <span class=\"token function\">onButtonClickInnerHandler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this data:'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>requireData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 현재 클래스로 생성된 인스턴스의 requireData를 사용하려고 하였음.</span>\n        \n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">#onClickButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 생성자 인자로 받았던 onClickButton함수 실행</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드처럼 구현을 했었는데, 문제가 있었다.</p>\n<p>문제는 <code class=\"language-text\">addEventListener</code>로 등록된 <code class=\"language-text\">onButtonClickInnerHandler</code> 함수에서 발생하였는데,\n<code class=\"language-text\">addEventListener</code>로 등록된 함수에서의 <code class=\"language-text\">this</code>키워드는 <code class=\"language-text\">event.target</code>과 똑같다.</p>\n<h3 id=\"-moduleexports는-es5가-아니라-nodejs-문법이고-commonjs이다\" style=\"position:relative;\"><a href=\"#-moduleexports%EB%8A%94-es5%EA%B0%80-%EC%95%84%EB%8B%88%EB%9D%BC-nodejs-%EB%AC%B8%EB%B2%95%EC%9D%B4%EA%B3%A0-commonjs%EC%9D%B4%EB%8B%A4\" aria-label=\" moduleexports는 es5가 아니라 nodejs 문법이고 commonjs이다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎇 module.exports는 ES5가 아니라 NodeJS 문법이고, CommonJS이다.</h3>\n<p>우리가 흔히 쓰는 <code class=\"language-text\">import</code> <code class=\"language-text\">export</code> 키워드는 ES2015에서 새롭게 도입된 키워드.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> lodash <span class=\"token keyword\">from</span> <span class=\"token string\">\"lodash\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">moduleFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ToDo...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만 이 전에 모듈사용은 다음과같이</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> lodash <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lodash\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">moduleFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ToDo...</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> moduleFunc<span class=\"token punctuation\">;</span></code></pre></div>\n<p>와 같이 <code class=\"language-text\">require</code>를 사용하였는데, 이는 JavaScript 문법이 아니고 당연히 ES5 문법이 아니다.</p>\n<p><strong>이는 <code class=\"language-text\">NodeJS</code>에서 기본모듈시스템으로 도입된 <code class=\"language-text\">CommonJS</code>이다.</strong></p>\n<p>CommonJS 관련 문서는 아래를 참조하자.</p>\n<ul>\n<li><a href=\"https://flaviocopes.com/commonjs/\">Indroduction to CommonJS</a></li>\n<li><a href=\"https://poiemaweb.com/es6-module\">Poiemaweb Module</a></li>\n<li><a href=\"https://nodejs.org/docs/latest/api/modules.html\">Node.js Documentation Modules</a></li>\n</ul>","frontmatter":{"title":"바닐라코딩 Prep 과제로 받은 코드스타일링","date":"December 03, 2020"}}},"pageContext":{"slug":"/2020/drafts/바닐라코딩-Prep으로받은-코드스타일링_정리/","previous":{"fields":{"slug":"/2020/vanillacoding_prep/Prep 9주차 수요일 오피스아워 정리/"},"frontmatter":{"title":"바닐라코딩 Prep 9주차 수요일 오피스아워 정리","category":"vanilla coding","draft":false}},"next":null}}}