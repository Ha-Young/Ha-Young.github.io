{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020/algorithm/2020-09-28_코드리뷰_파이썬_꿀팁/","result":{"data":{"site":{"siteMetadata":{"title":"HaYoung's Log","author":"@Ha-Young","siteUrl":"https://ha-young.github.io","comment":{"utterances":"Ha-Young/my-blog"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"a1973749-b384-5b36-8987-882ebc6087bc","excerpt":"코드리뷰를 통해 배우는 파이썬 inline if else의 사용\n파이썬에서는  와같은 삼항 연산자 대신에  와 같은 형태로 쓸 수 있다. list의  연산은 O(n)\n파이썬 List는 다양한 연산을 지원하지만 기본적으로 가변 배열 기반이므로  연산이 O(n)의 시간복잡도를 가진다.\n따라서 큐의 형태로 쓰인다면  모듈을 사용하여  연산을 사용하는 편이 O(…","html":"<h2 id=\"코드리뷰를-통해-배우는-파이썬\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C%EB%A6%AC%EB%B7%B0%EB%A5%BC-%ED%86%B5%ED%95%B4-%EB%B0%B0%EC%9A%B0%EB%8A%94-%ED%8C%8C%EC%9D%B4%EC%8D%AC\" aria-label=\"코드리뷰를 통해 배우는 파이썬 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드리뷰를 통해 배우는 파이썬</h2>\n<ol>\n<li>inline if else의 사용\n파이썬에서는 <code class=\"language-text\">condition ? a : b</code> 와같은 삼항 연산자 대신에 <code class=\"language-text\">a if condition else b</code> 와 같은 형태로 쓸 수 있다.</li>\n<li>list의 <code class=\"language-text\">pop(0)</code> 연산은 O(n)\n파이썬 List는 다양한 연산을 지원하지만 기본적으로 가변 배열 기반이므로 <code class=\"language-text\">pop(0)</code> 연산이 O(n)의 시간복잡도를 가진다.\n따라서 큐의 형태로 쓰인다면 <code class=\"language-text\">deque</code> 모듈을 사용하여 <code class=\"language-text\">popleft()</code> 연산을 사용하는 편이 O(1)의 시간복잡도를 가져 더 좋은 성능을 낼 수 있다.</li>\n<li>무한 혹은 경계 값이 필요할 경우\n<code class=\"language-text\">sys</code> 모듈의 <code class=\"language-text\">maxsize</code>를 사용하거나, 코딩테스트에서 <code class=\"language-text\">sys</code> 모듈을 사용할 수 없다면, <code class=\"language-text\">float(&#39;inf&#39;)</code> 를 활용할 수 있다.</li>\n<li>PEP8 규칙을 지키자\n<a href=\"https://www.python.org/dev/peps/pep-0008\">https://www.python.org/dev/peps/pep-0008</a></li>\n<li>\n<p>파이썬의 문자열 슬라이싱은 범위를 벗어나면 빈 문자열을 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt;&gt;&gt; s = &#39;hello world! this is python3&#39;\n&gt;&gt;&gt; print(s[len(s):999])\n\n&gt;&gt;&gt; type(s[len(s):999])\n&lt;class &#39;str&#39;&gt;\n&gt;&gt;&gt; len(s[len(s):999])\n0</code></pre></div>\n</li>\n<li>마지막 인덱스에 접근할 때에는 <code class=\"language-text\">len() - 1</code> 보다는 <code class=\"language-text\">-1</code>로 접근한다.</li>\n<li><code class=\"language-text\">zip()</code> 을 활용해서 iterable한 것을 묶어서 사용할 수 있다.</li>\n<li>전역변수를 사용하기 보단 nested function(중첩 함수)를 사용하자(코드가 지저분해지지 않는 선에서)</li>\n<li>파이썬에서 재귀 호출은 매우 느리고 꼬리재귀도 지원이 되지 않기 때문에 stack을 활용해서 재귀 구조를 풀어놓는게 좋다.</li>\n<li>\n<p><code class=\"language-text\">extend()</code>의 활용\n<code class=\"language-text\">extend()</code>는 내부의 iterable을 값만 추가해주는 함수다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">dx = [0, 1, 0, -1]\ndy = [1, 0, -1, 0]\n...\nq.extend([(a + x, b + y) for x, y in zip(dx, dy)])</code></pre></div>\n<p>위와 같은 형태로 활용할 수 있다. <a href=\"https://m.blog.naver.com/PostView.nhn?blogId=wideeyed&#x26;logNo=221541104629&#x26;categoryNo=50\">https://m.blog.naver.com/PostView.nhn?blogId=wideeyed&#x26;logNo=221541104629&#x26;categoryNo=50</a></p>\n</li>\n<li>파이썬은 <code class=\"language-text\">try ~ except</code> 를 통해 예외처리를 한다.\nJava처럼 사전에 예외조건을 캐치하고 미리 방지하는 방어적인 방식이 아니다. <a href=\"https://suwoni-codelab.com/python%20%EA%B8%B0%EB%B3%B8/2018/03/06/Python-Basic-EAFP/\">https://suwoni-codelab.com/python%20%EA%B8%B0%EB%B3%B8/2018/03/06/Python-Basic-EAFP/</a></li>\n<li><code class=\"language-text\">heappop()</code> 후 <code class=\"language-text\">heappush()</code> 를 한다면 <code class=\"language-text\">heapreplace()</code> 사용을 고려해보자.\n로직도 간단해지고 보기 좋아진다.</li>\n<li>좀 더 파이써닉하게 코드 짜는 법\n<code class=\"language-text\">for ~ else</code> 문법, <code class=\"language-text\">list comprehension</code> 같은 파이썬에서만 존재하는 문법을 가능하면 적극적으로 사용하도록 노력한다.</li>\n<li>\n<p>python <code class=\"language-text\">for ~ else</code> 문법\n<a href=\"https://itholic.github.io/python-for-else/\">https://itholic.github.io/python-for-else/</a>\n<code class=\"language-text\">else</code> 아래는 for 문이 끊김 없이 다 돌았을 때 동작함</p>\n<blockquote>\n<p>for ~ else문은 “for문에서 break가 발생하지 않았을 경우”의 동작을 else문에 적어주는 것이다.</p>\n</blockquote>\n</li>\n<li>\n<p>N x M 크기의 2차원 리스트 초기화 방법</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">n = 3\nm = 3\narray = [[0] * m for _ in range(n)]</code></pre></div>\n</li>\n<li>\n<p>문자열 padding 하는 법(0말고 다른 문자도 가능한 방법도 존재)</p>\n<ol>\n<li><code class=\"language-text\">str.zfill(size)</code> 함수 사용(0으로 크기 벗어난 값 채움)</li>\n<li><code class=\"language-text\">str.rjust(size, fill_char)</code> 함수 사용(<code class=\"language-text\">fill_char</code>로 채움) <code class=\"language-text\">fill_char</code> 의 길이는 1글자로 제한됨</li>\n</ol>\n</li>\n<li>\n<p><code class=\"language-text\">format()</code>의 활용</p>\n<ul>\n<li>이진수 변환: <code class=\"language-text\">format(number, &#39;b&#39;)</code></li>\n<li>zero padding 이진수 변환: <code class=\"language-text\">format(number, &#39;0&#39; + str(size) + &#39;b&#39;)</code></li>\n<li><code class=\"language-text\">0b</code> prefix 이진수 변환: <code class=\"language-text\">format(number, &#39;#0&#39; + str(size) + &#39;b&#39;)</code> 주의: 0b도 자릿수에 포함됨.</li>\n</ul>\n</li>\n<li>진법 변환시 주의할 점\n진법 변환 후 prefix가 붙어서 보통 <code class=\"language-text\">bin(number)[2:]</code> 와 같은 형태로 prefix를 제거함</li>\n<li>\n<p>숫자 비트연산 방법</p>\n<ul>\n<li>AND연산: <code class=\"language-text\">num1 &amp; num2</code></li>\n<li>OR 연산: <code class=\"language-text\">num1 | num2</code></li>\n<li>XOR연산: <code class=\"language-text\">num1 ^ num2</code></li>\n<li>NOT연산: <code class=\"language-text\">~num1</code></li>\n</ul>\n</li>\n<li>문자열 치환\n<code class=\"language-text\">str.replace(search_str, replace_str[, count])</code> <code class=\"language-text\">search_str</code>: 탐색할 문자열\n<code class=\"language-text\">replace_str</code>: 대체할 문자열\n<code class=\"language-text\">count</code>: 치환할 횟수\n주의: 정규표현식은 지원하지 않음. 정규표현식을 사용하려면 <code class=\"language-text\">re</code> 모듈의 <code class=\"language-text\">sub</code> 함수를 사용한다.</li>\n<li>\n<p>n * m 이차원 배열 90도 회전</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def rotate_a_matrix_by_90_degree(a):\n    return [list(reversed(i) for i in zip(*key))]</code></pre></div>\n</li>\n<li>파이썬의 리스트는 편의 연산자 때문에 생각과는 다르게 동작할 수 있다.\n<code class=\"language-text\">+</code> 연산자를 쓰면 뒤에 append가 된다.\n<code class=\"language-text\">*</code> 연산자를 쓰면 리스트의 요소를 여러개 복사할 수 있다. (이건 초기화할 때 많이 사용)</li>\n<li>파이썬은 문자열과 정수형의 합연산시에 타입 변환을 자동으로 해주지 않는다!! (Java와 차이점)</li>\n<li>\n<p>파이썬의 list comprehension 잘 사용하기</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">for x in list:\n    if x == y:\n        count += 1</code></pre></div>\n<p>이런 코드는</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">count += [1 for x in list if x == y]</code></pre></div>\n<p>로 변경하는게 더 파이써닉하다.</p>\n</li>\n<li>\n<p>파이썬의 <code class=\"language-text\">*</code>(asterisk, 언팩 연산자)란?\n파이썬의 <code class=\"language-text\">*</code>는 튜플이나, 리스트의 요소를 풀어 헤칠 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">a = (&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;)\nb = [1, 2, 3, 4]\n&gt;&gt;&gt; print(*a)\na b c d\n&gt;&gt;&gt; print(*b)\n1 2 3 4</code></pre></div>\n<p>응용해서 zip 함수와 함께 사용하는 예</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">a = [(&#39;A&#39;, 13), (&#39;B&#39;, 14), (&#39;C&#39;, 15)]\n&gt;&gt;&gt; list(zip(*a))  # 내부 요소가 튜플로 나온다\n[(&#39;A&#39;, &#39;B&#39;, &#39;C&#39;), (13, 14, 15)]\n&gt;&gt;&gt; list(map(list, zip(*a)))  # 튜플에 list 함수를 적용한다.\n[[&#39;A&#39;, &#39;B&#39;, &#39;C&#39;], [13, 14, 15]]</code></pre></div>\n</li>\n<li>파이썬의 collections 모듈의 defaultdict 사용시 주의할 점\npython의 defaultdict는 키가 없는 값 조회시 default값을 생성한다.\n여기서 발생하는 문제가 바로 <code class=\"language-text\">for ... in</code> 구문을 사용할 떄 발생한다.\n존재하지 않는 키로 검색할 때, default값을 생성하면서 크기가 변하게 되기 때문이다.\n이런 문제상황을 해결할 때에는 <code class=\"language-text\">list()</code>로 감싸주어 복사본을 생성해주면 된다.</li>\n<li>\n<p><code class=\"language-text\">nonlocal</code>사용법\n파이썬에서는 중첩함수를 지원하는데, 중첩함수 내부에서 외부 함수의 변수를 사용하고 싶을 때가 있을 수 있다.\n이 때, 해당 변수에 <code class=\"language-text\">nonlocal variable</code> 과 같은 식으로 선언해주면 binding 가능한 해당 변수를 찾는다.\n단, 전역 변수는 해당되지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">x = 0\n\ndef func():\n    nonlocal x\n    x = 33\n\nfunc()\nprint(x)</code></pre></div>\n<p>위와 같이는 사용할 수 없다. <code class=\"language-text\">no binding for nonlocal &#39;x&#39; found</code> 가 발생한다.\n애초에 전역변수를 사용하려고 하지 않는 것이 좋다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def func1():\n    x = 0\n\n    def func2():\n        nonlocal x\n        x = 33\n\n    func2()\n    print(x)  # 33출력</code></pre></div>\n</li>\n<li>\n<p>list의 <code class=\"language-text\">count(element)</code>는 요소를 넣어주면 요소의 개수를 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&gt;&gt;&gt; a = [1, 1, 1, 3, 2, 2, 1]\n&gt;&gt;&gt; a.count(1)\n4</code></pre></div>\n</li>\n</ol>","frontmatter":{"title":"코드리뷰를 통해 배운 파이썬, 파이썬을 활용한 코딩문제 꿀팁!","date":"September 28, 2020"}}},"pageContext":{"slug":"/2020/algorithm/2020-09-28_코드리뷰_파이썬_꿀팁/","previous":{"fields":{"slug":"/2020/algorithm/2020-09-28_알고리즘_문제풀이_가이드/"},"frontmatter":{"title":"알고리즘 문제풀이 가이드!","category":"algorithm-tip","draft":false}},"next":{"fields":{"slug":"/2020/vanillacoding_prep/Prep1주차수요일_오피스아워정리/"},"frontmatter":{"title":"바닐라코딩 Prep코스 사전준비 - 1주차 두번째 오피스아워 정리","category":"vanilla coding","draft":false}}}}}