{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020/data-structrue/2020-09-22-자료구조-Tree에-대해-알아보자---2-이진탐색트리-구현/","result":{"data":{"site":{"siteMetadata":{"title":"HaYoung's Log","author":"@Ha-Young","siteUrl":"https://ha-young.github.io","comment":{"utterances":"Ha-Young/my-blog"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"9665e200-778e-553e-bdc9-79ad8ac7f876","excerpt":"이진 탐색 트리 구현 이진 탐색트리를 만들기 위해서는 기본적으로 Node 클래스와 해당 Node클래스에 left, right로 다음 노드를 연결하는 링크드리스트 형태와 같이 구현을 해야한다. 1. 노드 클래스 만들기 이진트리에 데이터를 가지고 left, right 링크드 리스트를 포함하는 Node 클래스를 만든다. 2. 이진 탐색 트리 클래스(NodeMgmt) 구현 다음으로 이진 탐색 트리 클래스(NodeMgmt)를 만든다.\n이진트리클래스는 다음과 같은 기능을 한다. 삽입 (Insert…","html":"<h2 id=\"이진-탐색-트리-구현\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EC%A7%84-%ED%83%90%EC%83%89-%ED%8A%B8%EB%A6%AC-%EA%B5%AC%ED%98%84\" aria-label=\"이진 탐색 트리 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이진 탐색 트리 구현</h2>\n<p>이진 탐색트리를 만들기 위해서는 기본적으로 Node 클래스와 해당 Node클래스에 left, right로 다음 노드를 연결하는 링크드리스트 형태와 같이 구현을 해야한다.</p>\n<h3 id=\"1-노드-클래스-만들기\" style=\"position:relative;\"><a href=\"#1-%EB%85%B8%EB%93%9C-%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"1 노드 클래스 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 노드 클래스 만들기</h3>\n<p>이진트리에 데이터를 가지고 left, right 링크드 리스트를 포함하는 Node 클래스를 만든다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value\n        self<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        self<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span></code></pre></div>\n<h3 id=\"2-이진-탐색-트리-클래스nodemgmt-구현\" style=\"position:relative;\"><a href=\"#2-%EC%9D%B4%EC%A7%84-%ED%83%90%EC%83%89-%ED%8A%B8%EB%A6%AC-%ED%81%B4%EB%9E%98%EC%8A%A4nodemgmt-%EA%B5%AC%ED%98%84\" aria-label=\"2 이진 탐색 트리 클래스nodemgmt 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 이진 탐색 트리 클래스(NodeMgmt) 구현</h3>\n<p>다음으로 이진 탐색 트리 클래스(NodeMgmt)를 만든다.\n이진트리클래스는 다음과 같은 기능을 한다.</p>\n<ol>\n<li>삽입 (Insert)</li>\n<li>탐색</li>\n<li>삭제</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">NodeMgmt</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> head\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span></code></pre></div>\n<h3 id=\"3-이진-탐색-트리-삽입insert-구현\" style=\"position:relative;\"><a href=\"#3-%EC%9D%B4%EC%A7%84-%ED%83%90%EC%83%89-%ED%8A%B8%EB%A6%AC-%EC%82%BD%EC%9E%85insert-%EA%B5%AC%ED%98%84\" aria-label=\"3 이진 탐색 트리 삽입insert 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 이진 탐색 트리 삽입(Insert) 구현</h3>\n<p>이진 탐색 트리에 삽입을 구현하는건 쉽다.\n조건이 만족할때까지 (빈 노드를 만날 때 까지) 계속해서 노드와 크기비교를 하면서 찾아가면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">NodeMgmt</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> head\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> value <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">break</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">break</span></code></pre></div>\n<p>이진 탐색 트리의 조건에 부합하게 데이터를 삽입해주면 된다.</p>\n<h3 id=\"4-이진-탐색-트리-탐색search-구현\" style=\"position:relative;\"><a href=\"#4-%EC%9D%B4%EC%A7%84-%ED%83%90%EC%83%89-%ED%8A%B8%EB%A6%AC-%ED%83%90%EC%83%89search-%EA%B5%AC%ED%98%84\" aria-label=\"4 이진 탐색 트리 탐색search 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 이진 탐색 트리 탐색(Search) 구현</h3>\n<p>이진 탐색 트리의 탐색을 구현하는 방법은 삽입과 똑같이 노드의 값을 비교하면서 찾아가면 되는데,\n같은값을 찾으면 True를 return 하고 끝에 도달했을 때에는 못찾은 것이니, False를 리턴한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">NodeMgmt</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> head\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n        <span class=\"token keyword\">while</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> value<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n            <span class=\"token keyword\">elif</span> value <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></code></pre></div>\n<h3 id=\"5-이진-탐색-트리-삭제delete-구현-아이디어\" style=\"position:relative;\"><a href=\"#5-%EC%9D%B4%EC%A7%84-%ED%83%90%EC%83%89-%ED%8A%B8%EB%A6%AC-%EC%82%AD%EC%A0%9Cdelete-%EA%B5%AC%ED%98%84-%EC%95%84%EC%9D%B4%EB%94%94%EC%96%B4\" aria-label=\"5 이진 탐색 트리 삭제delete 구현 아이디어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 이진 탐색 트리 삭제(Delete) 구현 아이디어</h3>\n<p>위의 삽입과 탐색과 달리 이진 탐색 트리 삭제는 매우 복잡하다.</p>\n<p>그래서 경우의 수를 나뉘어서 구현하면 그나마 쉬운데, 경우의 수는 다음과 같다.</p>\n<h4 id=\"1-leaf-node-삭제\" style=\"position:relative;\"><a href=\"#1-leaf-node-%EC%82%AD%EC%A0%9C\" aria-label=\"1 leaf node 삭제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Leaf Node 삭제</h4>\n<ul>\n<li>Leaf Node: Child Node 가 없는 Node</li>\n<li>삭제할 Node의 Parent Node가 삭제할 Node를 가리키지 않도록 한다.<img src=\"http://www.fun-coding.org/00_Images/tree_remove_leaf.png\" alt=\"img\"></li>\n</ul>\n<h4 id=\"2-child-node-가-하나인-node-삭제\" style=\"position:relative;\"><a href=\"#2-child-node-%EA%B0%80-%ED%95%98%EB%82%98%EC%9D%B8-node-%EC%82%AD%EC%A0%9C\" aria-label=\"2 child node 가 하나인 node 삭제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Child Node 가 하나인 Node 삭제</h4>\n<ul>\n<li>삭제할 Node의 Parent Node가 삭제할 Node의 Child Node를 가리키도록 한다.<img src=\"http://www.fun-coding.org/00_Images/tree_remove_1child.png\" alt=\"img\"></li>\n</ul>\n<h4 id=\"3-child-node-가-두-개인-node-삭제\" style=\"position:relative;\"><a href=\"#3-child-node-%EA%B0%80-%EB%91%90-%EA%B0%9C%EC%9D%B8-node-%EC%82%AD%EC%A0%9C\" aria-label=\"3 child node 가 두 개인 node 삭제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Child Node 가 두 개인 Node 삭제</h4>\n<p>아래 둘 중 하나를 선택.</p>\n<ol>\n<li><strong>삭제할 Node의 오른쪽 자식 중, 가장 작은 값을 삭제할 Node의 Parent Node가 가리키도록 한다.</strong></li>\n<li><strong>삭제할 Node의 왼쪽 자식 중, 가장 큰 값을 삭제할 Node의 Parent Node가 가리키도록 한다.</strong><img src=\"http://www.fun-coding.org/00_Images/tree_remove_2child.png\" alt=\"img\"></li>\n</ol>\n<h5 id=\"31-삭제할-node의-오른쪽-자식중-가장-작은-값을-삭제할-node의-parent-node가-가리키게-할-경우\" style=\"position:relative;\"><a href=\"#31-%EC%82%AD%EC%A0%9C%ED%95%A0-node%EC%9D%98-%EC%98%A4%EB%A5%B8%EC%AA%BD-%EC%9E%90%EC%8B%9D%EC%A4%91-%EA%B0%80%EC%9E%A5-%EC%9E%91%EC%9D%80-%EA%B0%92%EC%9D%84-%EC%82%AD%EC%A0%9C%ED%95%A0-node%EC%9D%98-parent-node%EA%B0%80-%EA%B0%80%EB%A6%AC%ED%82%A4%EA%B2%8C-%ED%95%A0-%EA%B2%BD%EC%9A%B0\" aria-label=\"31 삭제할 node의 오른쪽 자식중 가장 작은 값을 삭제할 node의 parent node가 가리키게 할 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.1. 삭제할 Node의 오른쪽 자식중, 가장 작은 값을 삭제할 Node의 Parent Node가 가리키게 할 경우</h5>\n<ul>\n<li>삭제할 Node의 오른쪽 자식 선택</li>\n<li>오른쪽 자식의 가장 왼쪽에 있는 Node를 선택</li>\n<li>해당 Node를 삭제할 Node의 Parent Node의 왼쪽 Branch가 가리키게 함</li>\n<li>해당 Node의 왼쪽 Branch가 삭제할 Node의 왼쪽 Child Node를 가리키게 함</li>\n<li>해당 Node의 오른쪽 Branch가 삭제할 Node의 오른쪽 Child Node를 가리키게 함</li>\n<li>만약 해당 Node가 오른쪽 Child Node를 가지고 있었을 경우에는, 해당 Node의 본래 Parent Node의 왼쪽 Branch가 해당 오른쪽 Child Node를 가리키게 함</li>\n</ul>\n<h5 id=\"32-삭제할-node의-왼쪽-자식중-가장-큰-값을-삭제할-node의-parent-node가-가리키게-할-경우\" style=\"position:relative;\"><a href=\"#32-%EC%82%AD%EC%A0%9C%ED%95%A0-node%EC%9D%98-%EC%99%BC%EC%AA%BD-%EC%9E%90%EC%8B%9D%EC%A4%91-%EA%B0%80%EC%9E%A5-%ED%81%B0-%EA%B0%92%EC%9D%84-%EC%82%AD%EC%A0%9C%ED%95%A0-node%EC%9D%98-parent-node%EA%B0%80-%EA%B0%80%EB%A6%AC%ED%82%A4%EA%B2%8C-%ED%95%A0-%EA%B2%BD%EC%9A%B0\" aria-label=\"32 삭제할 node의 왼쪽 자식중 가장 큰 값을 삭제할 node의 parent node가 가리키게 할 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2. 삭제할 Node의 왼쪽 자식중, 가장 큰 값을 삭제할 Node의 Parent Node가 가리키게 할 경우</h5>\n<ul>\n<li>삭제할 Node의 왼쪽 자식 선택</li>\n<li>왼쪽 자식의 가장 오른쪽에 있는 Node를 선택</li>\n<li>해당 Node를 삭제할 Node의 Parent Node의 왼쪽 Branch가 가리키게 함</li>\n<li>해당 Node의 오른쪽 Branch가 삭제할 Node의 오른쪽 Child Node를 가리키게 함</li>\n<li>해당 Node의 오른쪽 Branch가 삭제할 Node의 오른쪽 Child Node를 가리키게 함</li>\n<li>만약 해당 Node가 왼쪽 Child Node를 가지고 있었을 경우에는, 해당 Node의 본래 Parent Node의 오른쪽 Branch가 해당 왼쪽 Child Node를 가리키게 함</li>\n</ul>\n<h3 id=\"6-이진-탐색-트리-삭제delete-구현\" style=\"position:relative;\"><a href=\"#6-%EC%9D%B4%EC%A7%84-%ED%83%90%EC%83%89-%ED%8A%B8%EB%A6%AC-%EC%82%AD%EC%A0%9Cdelete-%EA%B5%AC%ED%98%84\" aria-label=\"6 이진 탐색 트리 삭제delete 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. 이진 탐색 트리 삭제(Delete) 구현</h3>\n<h4 id=\"1-삭제할-node-탐색\" style=\"position:relative;\"><a href=\"#1-%EC%82%AD%EC%A0%9C%ED%95%A0-node-%ED%83%90%EC%83%89\" aria-label=\"1 삭제할 node 탐색 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 삭제할 Node 탐색</h4>\n<ul>\n<li>\n<p>삭제할 Node가 없는 경우도 처리해야 함</p>\n<ul>\n<li>이를 위해 삭제할 Node가 없는 경우는 False를 리턴하고, 함수를 종료 시킴</li>\n</ul>\n</li>\n<li>\n<p>우리가 삭제를 하기 위해서는 현재노드도 중요하지만 부모노드 (parent) 를 알고 있어야 됨.</p>\n<ul>\n<li>삭제노드의 child node를 parent node와 연결시켜 주어야 됨.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    searched <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n    self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n    self<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n    <span class=\"token keyword\">while</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> value<span class=\"token punctuation\">:</span>\n            searched <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n            <span class=\"token keyword\">break</span>\n        <span class=\"token keyword\">elif</span> value <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node\n            self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node\n            self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n\n    <span class=\"token keyword\">if</span> searched <span class=\"token operator\">==</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n    <span class=\"token comment\">### 이후부터 Case들을 분리해서, 코드 작성</span></code></pre></div>\n<h4 id=\"2-case1-삭제할-node가-leaf-node인-경우\" style=\"position:relative;\"><a href=\"#2-case1-%EC%82%AD%EC%A0%9C%ED%95%A0-node%EA%B0%80-leaf-node%EC%9D%B8-%EA%B2%BD%EC%9A%B0\" aria-label=\"2 case1 삭제할 node가 leaf node인 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Case1: 삭제할 Node가 Leaf Node인 경우</h4>\n<p><img src=\"http://www.fun-coding.org/00_Images/tree_remove_leaf_code.png\" alt=\"img\"></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># self.current_node 가 삭제할 Node, self.parent는 삭제할 Node의 Parent Node인 상태</span>\n    <span class=\"token keyword\">if</span>  self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">and</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> value <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        <span class=\"token keyword\">del</span> self<span class=\"token punctuation\">.</span>current_node</code></pre></div>\n<h4 id=\"3-case2-삭제할-node가-child-node를-한-개-가지고-있을-경우\" style=\"position:relative;\"><a href=\"#3-case2-%EC%82%AD%EC%A0%9C%ED%95%A0-node%EA%B0%80-child-node%EB%A5%BC-%ED%95%9C-%EA%B0%9C-%EA%B0%80%EC%A7%80%EA%B3%A0-%EC%9E%88%EC%9D%84-%EA%B2%BD%EC%9A%B0\" aria-label=\"3 case2 삭제할 node가 child node를 한 개 가지고 있을 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Case2: 삭제할 Node가 Child Node를 한 개 가지고 있을 경우</h4>\n<img src=\"http://www.fun-coding.org/00_Images/tree_remove_1child_code.png\" width=\"400\">\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">    <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">and</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> value <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left\n    <span class=\"token keyword\">elif</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">and</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> value <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right</code></pre></div>\n<h4 id=\"4-case3-1-삭제할-node가-child-node를-두-개-가지고-있을-경우-삭제할-node가-parent-node-왼쪽에-있을-때\" style=\"position:relative;\"><a href=\"#4-case3-1-%EC%82%AD%EC%A0%9C%ED%95%A0-node%EA%B0%80-child-node%EB%A5%BC-%EB%91%90-%EA%B0%9C-%EA%B0%80%EC%A7%80%EA%B3%A0-%EC%9E%88%EC%9D%84-%EA%B2%BD%EC%9A%B0-%EC%82%AD%EC%A0%9C%ED%95%A0-node%EA%B0%80-parent-node-%EC%99%BC%EC%AA%BD%EC%97%90-%EC%9E%88%EC%9D%84-%EB%95%8C\" aria-label=\"4 case3 1 삭제할 node가 child node를 두 개 가지고 있을 경우 삭제할 node가 parent node 왼쪽에 있을 때 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Case3-1: 삭제할 Node가 Child Node를 두 개 가지고 있을 경우 (삭제할 Node가 Parent Node 왼쪽에 있을 때)</h4>\n<ul>\n<li>\n<p>기본 사용 가능 전략</p>\n<ol>\n<li><strong>삭제할 Node의 오른쪽 자식 중, 가장 작은 값을 삭제할 Node의 Parent Node가 가리키도록 한다.</strong></li>\n<li>삭제할 Node의 왼쪽 자식 중, 가장 큰 값을 삭제할 Node의 Parent Node가 가리키도록 한다.</li>\n</ol>\n</li>\n<li>\n<p>기본 사용 가능 전략 중, 1번 전략을 사용하여 코드를 구현하기로 함</p>\n<ul>\n<li>경우의 수가 또다시 두가지가 있음</li>\n<li><strong>Case3-1-1:</strong> 삭제할 Node가 Parent Node의 왼쪽에 있고, 삭제할 Node의 오른쪽 자식 중, 가장 작은 값을 가진 Node의 Child Node가 없을 때</li>\n<li>\n<p><strong>Case3-1-2:</strong> 삭제할 Node가 Parent Node의 왼쪽에 있고, 삭제할 Node의 오른쪽 자식 중, 가장 작은 값을 가진 Node의 오른쪽에 Child Node가 있을 때</p>\n<ul>\n<li>가장 작은 값을 가진 Node의 Child Node가 왼쪽에 있을 경우는 없음, 왜냐하면 왼쪽 Node가 있다는 것은 해당 Node보다 더 작은 값을 가진 Node가 있다는 뜻이기 때문임</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<img src=\"http://www.fun-coding.org/00_Images/tree_remove_2child_code_left.png\" width=\"600\">\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">    <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">and</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># case3</span>\n        <span class=\"token keyword\">if</span> value <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">:</span> <span class=\"token comment\"># case3-1</span>\n            self<span class=\"token punctuation\">.</span>change_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n            self<span class=\"token punctuation\">.</span>change_node_parent <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n            <span class=\"token keyword\">while</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>change_node_parent <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node\n                self<span class=\"token punctuation\">.</span>change_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>left\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>change_node_parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>right\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>change_node_parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n            self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node\n            self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n            self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>left</code></pre></div>\n<h4 id=\"5-case3-2-삭제할-node가-child-node를-두-개-가지고-있을-경우-삭제할-node가-parent-node-오른쪽에-있을-때\" style=\"position:relative;\"><a href=\"#5-case3-2-%EC%82%AD%EC%A0%9C%ED%95%A0-node%EA%B0%80-child-node%EB%A5%BC-%EB%91%90-%EA%B0%9C-%EA%B0%80%EC%A7%80%EA%B3%A0-%EC%9E%88%EC%9D%84-%EA%B2%BD%EC%9A%B0-%EC%82%AD%EC%A0%9C%ED%95%A0-node%EA%B0%80-parent-node-%EC%98%A4%EB%A5%B8%EC%AA%BD%EC%97%90-%EC%9E%88%EC%9D%84-%EB%95%8C\" aria-label=\"5 case3 2 삭제할 node가 child node를 두 개 가지고 있을 경우 삭제할 node가 parent node 오른쪽에 있을 때 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. Case3-2: 삭제할 Node가 Child Node를 두 개 가지고 있을 경우 (삭제할 Node가 Parent Node 오른쪽에 있을 때)</h4>\n<ul>\n<li>\n<p>기본 사용 가능 전략</p>\n<ol>\n<li><strong>삭제할 Node의 오른쪽 자식 중, 가장 작은 값을 삭제할 Node의 Parent Node가 가리키도록 한다.</strong></li>\n<li>삭제할 Node의 왼쪽 자식 중, 가장 큰 값을 삭제할 Node의 Parent Node가 가리키도록 한다.</li>\n</ol>\n</li>\n<li>\n<p>기본 사용 가능 전략 중, 1번 전략을 사용하여 코드를 구현하기로 함</p>\n<ul>\n<li>경우의 수가 또다시 두가지가 있음</li>\n<li><strong>Case3-2-1:</strong> 삭제할 Node가 Parent Node의 오른쪽에 있고, 삭제할 Node의 오른쪽 자식 중, 가장 작은 값을 가진 Node의 Child Node가 없을 때</li>\n<li>\n<p>Case3-2-2:</p>\n<p>삭제할 Node가 Parent Node의 오른쪽에 있고, 삭제할 Node의 오른쪽 자식 중, 가장 작은 값을 가진 Node의 오른쪽에 Child Node가 있을 때</p>\n<ul>\n<li>가장 작은 값을 가진 Node의 Child Node가 왼쪽에 있을 경우는 없음, 왜냐하면 왼쪽 Node가 있다는 것은 해당 Node보다 더 작은 값을 가진 Node가 있다는 뜻이기 때문임</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://www.fun-coding.org/00_Images/tree_remove_2child_code_right.png\" alt=\"img\"></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>change_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n            self<span class=\"token punctuation\">.</span>change_node_parent <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n            <span class=\"token keyword\">while</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>change_node_parent <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node\n                self<span class=\"token punctuation\">.</span>change_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>left\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>change_node_parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>right\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>change_node_parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n            self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node\n            self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left\n            self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right</code></pre></div>\n<h2 id=\"전체-구현-소스\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%B2%B4-%EA%B5%AC%ED%98%84-%EC%86%8C%EC%8A%A4\" aria-label=\"전체 구현 소스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전체 구현 소스</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value\n        self<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        self<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">NodeMgmt</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> head\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> value <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">break</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">break</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n        <span class=\"token keyword\">while</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> value<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n            <span class=\"token keyword\">elif</span> value <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 삭제할 노드 탐색</span>\n        searched <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n        self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n        self<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n        <span class=\"token keyword\">while</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> value<span class=\"token punctuation\">:</span>\n                searched <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n                <span class=\"token keyword\">break</span>\n            <span class=\"token keyword\">elif</span> value <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node\n                self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node\n                self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n\n        <span class=\"token keyword\">if</span> searched <span class=\"token operator\">==</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n        <span class=\"token comment\"># case1</span>\n        <span class=\"token keyword\">if</span>  self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">and</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> value <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n        <span class=\"token comment\"># case2</span>\n        <span class=\"token keyword\">elif</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">and</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> value <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left\n        <span class=\"token keyword\">elif</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">and</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> value <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n\n        <span class=\"token comment\"># case 3</span>\n        <span class=\"token keyword\">elif</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">and</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># case3-1</span>\n            <span class=\"token keyword\">if</span> value <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>change_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n                self<span class=\"token punctuation\">.</span>change_node_parent <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n                <span class=\"token keyword\">while</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>change_node_parent <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node\n                    self<span class=\"token punctuation\">.</span>change_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>left\n                <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>change_node_parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>right\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>change_node_parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n                self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node\n                self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n                self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>left\n            <span class=\"token comment\"># case 3-2</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>change_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n                self<span class=\"token punctuation\">.</span>change_node_parent <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n                <span class=\"token keyword\">while</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>change_node_parent <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node\n                    self<span class=\"token punctuation\">.</span>change_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>left\n                <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>change_node_parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>right\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>change_node_parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n                self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node\n                self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n                self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span></code></pre></div>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/2020/data-structrue/2020-09-22-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-Tree%EC%97%90-%EB%8C%80%ED%95%B4-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90---2-%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89%ED%8A%B8%EB%A6%AC-%EA%B5%AC%ED%98%84/#%EC%9D%B4%EC%A7%84-%ED%83%90%EC%83%89-%ED%8A%B8%EB%A6%AC-%EA%B5%AC%ED%98%84\">이진 탐색 트리 구현</a></p>\n<ul>\n<li><a href=\"/2020/data-structrue/2020-09-22-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-Tree%EC%97%90-%EB%8C%80%ED%95%B4-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90---2-%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89%ED%8A%B8%EB%A6%AC-%EA%B5%AC%ED%98%84/#1-%EB%85%B8%EB%93%9C-%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%A7%8C%EB%93%A4%EA%B8%B0\">1. 노드 클래스 만들기</a></li>\n<li><a href=\"/2020/data-structrue/2020-09-22-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-Tree%EC%97%90-%EB%8C%80%ED%95%B4-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90---2-%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89%ED%8A%B8%EB%A6%AC-%EA%B5%AC%ED%98%84/#2-%EC%9D%B4%EC%A7%84-%ED%83%90%EC%83%89-%ED%8A%B8%EB%A6%AC-%ED%81%B4%EB%9E%98%EC%8A%A4nodemgmt-%EA%B5%AC%ED%98%84\">2. 이진 탐색 트리 클래스(NodeMgmt) 구현</a></li>\n<li><a href=\"/2020/data-structrue/2020-09-22-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-Tree%EC%97%90-%EB%8C%80%ED%95%B4-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90---2-%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89%ED%8A%B8%EB%A6%AC-%EA%B5%AC%ED%98%84/#3-%EC%9D%B4%EC%A7%84-%ED%83%90%EC%83%89-%ED%8A%B8%EB%A6%AC-%EC%82%BD%EC%9E%85insert-%EA%B5%AC%ED%98%84\">3. 이진 탐색 트리 삽입(Insert) 구현</a></li>\n<li><a href=\"/2020/data-structrue/2020-09-22-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-Tree%EC%97%90-%EB%8C%80%ED%95%B4-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90---2-%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89%ED%8A%B8%EB%A6%AC-%EA%B5%AC%ED%98%84/#4-%EC%9D%B4%EC%A7%84-%ED%83%90%EC%83%89-%ED%8A%B8%EB%A6%AC-%ED%83%90%EC%83%89search-%EA%B5%AC%ED%98%84\">4. 이진 탐색 트리 탐색(Search) 구현</a></li>\n<li>\n<p><a href=\"/2020/data-structrue/2020-09-22-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-Tree%EC%97%90-%EB%8C%80%ED%95%B4-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90---2-%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89%ED%8A%B8%EB%A6%AC-%EA%B5%AC%ED%98%84/#5-%EC%9D%B4%EC%A7%84-%ED%83%90%EC%83%89-%ED%8A%B8%EB%A6%AC-%EC%82%AD%EC%A0%9Cdelete-%EA%B5%AC%ED%98%84-%EC%95%84%EC%9D%B4%EB%94%94%EC%96%B4\">5. 이진 탐색 트리 삭제(Delete) 구현 아이디어</a></p>\n<ul>\n<li><a href=\"/2020/data-structrue/2020-09-22-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-Tree%EC%97%90-%EB%8C%80%ED%95%B4-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90---2-%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89%ED%8A%B8%EB%A6%AC-%EA%B5%AC%ED%98%84/#1-leaf-node-%EC%82%AD%EC%A0%9C\">1. Leaf Node 삭제</a></li>\n<li><a href=\"/2020/data-structrue/2020-09-22-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-Tree%EC%97%90-%EB%8C%80%ED%95%B4-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90---2-%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89%ED%8A%B8%EB%A6%AC-%EA%B5%AC%ED%98%84/#2-child-node-%EA%B0%80-%ED%95%98%EB%82%98%EC%9D%B8-node-%EC%82%AD%EC%A0%9C\">2. Child Node 가 하나인 Node 삭제</a></li>\n<li>\n<p><a href=\"/2020/data-structrue/2020-09-22-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-Tree%EC%97%90-%EB%8C%80%ED%95%B4-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90---2-%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89%ED%8A%B8%EB%A6%AC-%EA%B5%AC%ED%98%84/#3-child-node-%EA%B0%80-%EB%91%90-%EA%B0%9C%EC%9D%B8-node-%EC%82%AD%EC%A0%9C\">3. Child Node 가 두 개인 Node 삭제</a></p>\n<ul>\n<li><a href=\"/2020/data-structrue/2020-09-22-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-Tree%EC%97%90-%EB%8C%80%ED%95%B4-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90---2-%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89%ED%8A%B8%EB%A6%AC-%EA%B5%AC%ED%98%84/#31-%EC%82%AD%EC%A0%9C%ED%95%A0-node%EC%9D%98-%EC%98%A4%EB%A5%B8%EC%AA%BD-%EC%9E%90%EC%8B%9D%EC%A4%91-%EA%B0%80%EC%9E%A5-%EC%9E%91%EC%9D%80-%EA%B0%92%EC%9D%84-%EC%82%AD%EC%A0%9C%ED%95%A0-node%EC%9D%98-parent-node%EA%B0%80-%EA%B0%80%EB%A6%AC%ED%82%A4%EA%B2%8C-%ED%95%A0-%EA%B2%BD%EC%9A%B0\">3.1. 삭제할 Node의 오른쪽 자식중, 가장 작은 값을 삭제할 Node의 Parent Node가 가리키게 할 경우</a></li>\n<li><a href=\"/2020/data-structrue/2020-09-22-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-Tree%EC%97%90-%EB%8C%80%ED%95%B4-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90---2-%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89%ED%8A%B8%EB%A6%AC-%EA%B5%AC%ED%98%84/#32-%EC%82%AD%EC%A0%9C%ED%95%A0-node%EC%9D%98-%EC%99%BC%EC%AA%BD-%EC%9E%90%EC%8B%9D%EC%A4%91-%EA%B0%80%EC%9E%A5-%ED%81%B0-%EA%B0%92%EC%9D%84-%EC%82%AD%EC%A0%9C%ED%95%A0-node%EC%9D%98-parent-node%EA%B0%80-%EA%B0%80%EB%A6%AC%ED%82%A4%EA%B2%8C-%ED%95%A0-%EA%B2%BD%EC%9A%B0\">3.2. 삭제할 Node의 왼쪽 자식중, 가장 큰 값을 삭제할 Node의 Parent Node가 가리키게 할 경우</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/2020/data-structrue/2020-09-22-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-Tree%EC%97%90-%EB%8C%80%ED%95%B4-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90---2-%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89%ED%8A%B8%EB%A6%AC-%EA%B5%AC%ED%98%84/#6-%EC%9D%B4%EC%A7%84-%ED%83%90%EC%83%89-%ED%8A%B8%EB%A6%AC-%EC%82%AD%EC%A0%9Cdelete-%EA%B5%AC%ED%98%84\">6. 이진 탐색 트리 삭제(Delete) 구현</a></p>\n<ul>\n<li><a href=\"/2020/data-structrue/2020-09-22-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-Tree%EC%97%90-%EB%8C%80%ED%95%B4-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90---2-%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89%ED%8A%B8%EB%A6%AC-%EA%B5%AC%ED%98%84/#1-%EC%82%AD%EC%A0%9C%ED%95%A0-node-%ED%83%90%EC%83%89\">1. 삭제할 Node 탐색</a></li>\n<li><a href=\"/2020/data-structrue/2020-09-22-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-Tree%EC%97%90-%EB%8C%80%ED%95%B4-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90---2-%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89%ED%8A%B8%EB%A6%AC-%EA%B5%AC%ED%98%84/#2-case1-%EC%82%AD%EC%A0%9C%ED%95%A0-node%EA%B0%80-leaf-node%EC%9D%B8-%EA%B2%BD%EC%9A%B0\">2. Case1: 삭제할 Node가 Leaf Node인 경우</a></li>\n<li><a href=\"/2020/data-structrue/2020-09-22-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-Tree%EC%97%90-%EB%8C%80%ED%95%B4-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90---2-%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89%ED%8A%B8%EB%A6%AC-%EA%B5%AC%ED%98%84/#3-case2-%EC%82%AD%EC%A0%9C%ED%95%A0-node%EA%B0%80-child-node%EB%A5%BC-%ED%95%9C-%EA%B0%9C-%EA%B0%80%EC%A7%80%EA%B3%A0-%EC%9E%88%EC%9D%84-%EA%B2%BD%EC%9A%B0\">3. Case2: 삭제할 Node가 Child Node를 한 개 가지고 있을 경우</a></li>\n<li><a href=\"/2020/data-structrue/2020-09-22-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-Tree%EC%97%90-%EB%8C%80%ED%95%B4-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90---2-%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89%ED%8A%B8%EB%A6%AC-%EA%B5%AC%ED%98%84/#4-case3-1-%EC%82%AD%EC%A0%9C%ED%95%A0-node%EA%B0%80-child-node%EB%A5%BC-%EB%91%90-%EA%B0%9C-%EA%B0%80%EC%A7%80%EA%B3%A0-%EC%9E%88%EC%9D%84-%EA%B2%BD%EC%9A%B0-%EC%82%AD%EC%A0%9C%ED%95%A0-node%EA%B0%80-parent-node-%EC%99%BC%EC%AA%BD%EC%97%90-%EC%9E%88%EC%9D%84-%EB%95%8C\">4. Case3-1: 삭제할 Node가 Child Node를 두 개 가지고 있을 경우 (삭제할 Node가 Parent Node 왼쪽에 있을 때)</a></li>\n<li><a href=\"/2020/data-structrue/2020-09-22-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-Tree%EC%97%90-%EB%8C%80%ED%95%B4-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90---2-%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89%ED%8A%B8%EB%A6%AC-%EA%B5%AC%ED%98%84/#5-case3-2-%EC%82%AD%EC%A0%9C%ED%95%A0-node%EA%B0%80-child-node%EB%A5%BC-%EB%91%90-%EA%B0%9C-%EA%B0%80%EC%A7%80%EA%B3%A0-%EC%9E%88%EC%9D%84-%EA%B2%BD%EC%9A%B0-%EC%82%AD%EC%A0%9C%ED%95%A0-node%EA%B0%80-parent-node-%EC%98%A4%EB%A5%B8%EC%AA%BD%EC%97%90-%EC%9E%88%EC%9D%84-%EB%95%8C\">5. Case3-2: 삭제할 Node가 Child Node를 두 개 가지고 있을 경우 (삭제할 Node가 Parent Node 오른쪽에 있을 때)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"/2020/data-structrue/2020-09-22-%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-Tree%EC%97%90-%EB%8C%80%ED%95%B4-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90---2-%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89%ED%8A%B8%EB%A6%AC-%EA%B5%AC%ED%98%84/#%EC%A0%84%EC%B2%B4-%EA%B5%AC%ED%98%84-%EC%86%8C%EC%8A%A4\">전체 구현 소스</a></li>\n</ul>","frontmatter":{"title":"자료구조 Tree에 대해 알아보자 - 2 이진 탐색 트리 구현","date":"September 22, 2020"}}},"pageContext":{"slug":"/2020/data-structrue/2020-09-22-자료구조-Tree에-대해-알아보자---2-이진탐색트리-구현/","previous":{"fields":{"slug":"/2020/data-structrue/2020-09-22-자료구조-Tree에-대해-알아보자---1-트리,이진탐색트리/"},"frontmatter":{"title":"자료구조 Tree에 대해 알아보자 - 1-트리,이진탐색트리","category":"algorithm","draft":false}},"next":{"fields":{"slug":"/2020/algorithm/2020-09-28_알고리즘_문제풀이_가이드/"},"frontmatter":{"title":"알고리즘 문제풀이 가이드!","category":"algorithm","draft":false}}}},"staticQueryHashes":["1402886152","145675779","3128451518"]}