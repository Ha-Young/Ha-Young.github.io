{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020/javascript/하옹의-자바스크립트-식사---Type/","result":{"data":{"site":{"siteMetadata":{"title":"HaYoung's Log","author":"@Ha-Young","siteUrl":"https://ha-young.github.io","comment":{"utterances":"Ha-Young/my-blog"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"7c2af11c-166c-5b3c-8706-fda27de877a2","excerpt":"* 이 글은 MDN, Vanilla Coding Prep 강의자료, PoiemaWeb등 공신력있는 곳들을 참조한 글입니다. 자료형 (Type)이란? 자료형은 위키 백과에서는 다음과 같이 표현하고 있다. 자료형(資料形) 또는 데이터 타입(data type…","html":"<p>* 이 글은 <a href=\"https://developer.mozilla.org/es/\">MDN</a>, <a href=\"https://www.vanillacoding.co/\">Vanilla Coding Prep 강의자료</a>, <a href=\"https://poiemaweb.com/\">PoiemaWeb</a>등 공신력있는 곳들을 참조한 글입니다.</p>\n<h2 id=\"자료형-type이란\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%A3%8C%ED%98%95-type%EC%9D%B4%EB%9E%80\" aria-label=\"자료형 type이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자료형 (Type)이란?</h2>\n<p>자료형은 위키 백과에서는 다음과 같이 표현하고 있다.</p>\n<blockquote>\n<p><strong>자료형</strong>(資料形) 또는 <strong>데이터 타입</strong>(data type)은 <a href=\"https://ko.wikipedia.org/wiki/%EC%BB%B4%ED%93%A8%ED%84%B0_%EA%B3%BC%ED%95%99\">컴퓨터 과학</a>과 <a href=\"https://ko.wikipedia.org/wiki/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D_%EC%96%B8%EC%96%B4\">프로그래밍 언어</a>에서 실수치, 정수, 불린 자료형 따위의 여러 종류의 데이터를 식별하는 분류로서, 더 나아가 해당 자료형에 대한 가능한 값, 해당 자료형에서 수행을 마칠 수 있는 명령들, 데이터의 의미, 해당 자료형의 값을 저장하는 방식을 결정한다.</p>\n</blockquote>\n<p>프로그래밍은 기본적으로 다양한 값들을 다뤄야 하는데, 프로그래밍을 하면 이 다양한 값들을 이용, 변형, 조합, 계산과 같은 다양한 행위를 통해 새로운 값을 구하거나 프로그램에 어떠한 행위를 하게 할 수 있다.</p>\n<p>자료형은 한마디로 우리가 프로그래밍 하는데 있어서 필요한 <strong>값들의 종류를 분류, 저장</strong>하는데 쓰이고 <strong>이를 활용할 수 있게끔 해주는 것</strong>.</p>\n<h2 id=\"자바스크립트-자료형-type의-종류는\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%9E%90%EB%A3%8C%ED%98%95-type%EC%9D%98-%EC%A2%85%EB%A5%98%EB%8A%94\" aria-label=\"자바스크립트 자료형 type의 종류는 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바스크립트 자료형 (Type)의 종류는?</h2>\n<p>자바스크립트의 자료형의 종류는 총 7가지가 있다.</p>\n<p>하지만 기본적으로, 자바스크립트의 모든 것들은 객체로 이루어져있고, 객체로 이루어지기 때문에 아래 타입들 또한 객체로 이루어진다.</p>\n<ul>\n<li>String Type</li>\n<li>Number Type</li>\n<li>Boolean</li>\n<li>Undefined</li>\n<li>Null</li>\n<li>Object</li>\n<li>Symbol</li>\n</ul>\n<h2 id=\"1-string-type\" style=\"position:relative;\"><a href=\"#1-string-type\" aria-label=\"1 string type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. String Type</h2>\n<p>String Type은 문자열로써 텍스트 데이터를 나타낸다.\n다른 언어와는 다르게 16bit의 <a href=\"https://ko.wikipedia.org/wiki/UTF-16\">유니코드 문자(UTF-16)</a>의 집합.</p>\n<blockquote>\n<p>유니코드 문자의 집합이기 때문에 한글, 영어, 한자 등의 다양한 언어 표기를 할 수 있다.</p>\n</blockquote>\n<h3 id=\"문자열-리터럴-string-literal\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%9E%90%EC%97%B4-%EB%A6%AC%ED%84%B0%EB%9F%B4-string-literal\" aria-label=\"문자열 리터럴 string literal permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문자열 리터럴 (String Literal)</h3>\n<p>string 문자의 생성은 작은따옴표 <code class=\"language-text\">&#39;</code> 혹은 쌍 따옴표 <code class=\"language-text\">&quot;</code> 안에 텍스트를 넣어 생성한다.</p>\n<blockquote>\n<p>다음은 string 자료형 생성을 문자열 리터럴로 생성하는 방법이다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> stringLiteral <span class=\"token operator\">=</span> <span class=\"token string\">'문자열'</span>\n<span class=\"token keyword\">var</span> stringLiteral <span class=\"token operator\">=</span> <span class=\"token string\">'String'</span>\n<span class=\"token keyword\">var</span> stringLiteral <span class=\"token operator\">=</span> <span class=\"token string\">'文字列'</span>\n<span class=\"token keyword\">var</span> stringLiteral <span class=\"token operator\">=</span> <span class=\"token string\">'もじれつ'</span></code></pre></div>\n<h3 id=\"템플릿-리터럴-template-literal\" style=\"position:relative;\"><a href=\"#%ED%85%9C%ED%94%8C%EB%A6%BF-%EB%A6%AC%ED%84%B0%EB%9F%B4-template-literal\" aria-label=\"템플릿 리터럴 template literal permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>템플릿 리터럴 (Template Literal)</h3>\n<p>ES2015 부터, Javascript에서는 Template 리터럴을 지원한다.\n문자열 템플릿은 벡틱 <code class=\"language-text\"></code> ` 안에 텍스트, 변수를 넣어서 텍스트를 생성한다.</p>\n<blockquote>\n<p>다음은 string 자료형 생성을 Template 리터럴로 생성하는 방법이다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> templateLiteral <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">文字列</span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token keyword\">var</span> templateLiteral <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">문자열을 한자로 하면 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>templateLiteral<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token comment\">// 문자열을 한자로 하면 文字列</span></code></pre></div>\n<p>위와 같이 변수를 표기할 때에는 <code class=\"language-text\">${변수명}</code> 과 같이 표기한다.</p>\n<h3 id=\"string-object-이용\" style=\"position:relative;\"><a href=\"#string-object-%EC%9D%B4%EC%9A%A9\" aria-label=\"string object 이용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>String Object 이용</h3>\n<p>String Object를 사용해서 문자열을 만드는 방법은 일반적인 방법은 아니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> stringObject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">'문자열'</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> stringObject<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"object\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> stringLiteral<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"string\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> templateLiteral<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"string\"</span></code></pre></div>\n<p>문자열 리터럴과 템플릿 리터럴의 <code class=\"language-text\">typeof</code> 결과는 <code class=\"language-text\">&quot;string&quot;</code>이 되나,\nString Object를 이용해서 만든 변수의 <code class=\"language-text\">typeof</code> 결과는 <code class=\"language-text\">&quot;object&quot;</code>이다.</p>\n<p>내부적으로는 위의 문자열 리터럴과 템플릿 리터럴의 작동이 String Object로 생성이 일어나지만,\n생성 결과는 이와같이 다르다는 차이점이 있다.</p>\n<h3 id=\"primitive-type\" style=\"position:relative;\"><a href=\"#primitive-type\" aria-label=\"primitive type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Primitive Type</h3>\n<p>문자열 타입은 Javascript 타입 종류중 하나인 <code class=\"language-text\">원시 타입 (Primitive Type)</code>이다.</p>\n<p>Primitive Type의 내용은 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures\">여기</a>를 참조하자.</p>\n<h3 id=\"stringprototype\" style=\"position:relative;\"><a href=\"#stringprototype\" aria-label=\"stringprototype permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>String.prototype</h3>\n<p>위 String Object로 만들어지기 때문에,</p>\n<p>모든 문자열들은 <code class=\"language-text\">String.prototype</code>을 상속받아서 <code class=\"language-text\">String.prototype</code>의 속성값과 메서드 들을 사용할 수 있다.</p>\n<p>속성은 대표적으로 <strong>length</strong>가 있으며,</p>\n<p>메서드는 거의 대다수가 중요하기 때문에, 디테일한 내용은 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/prototype\">공식문서</a>를 참조하자.</p>\n<h3 id=\"typeof\" style=\"position:relative;\"><a href=\"#typeof\" aria-label=\"typeof permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>typeof</h3>\n<p>string 타입의 값을 typeof 연산자를 하면 <code class=\"language-text\">&quot;string&quot;</code> 값이 나온다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> stringValue <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> stringValue<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"string\"</span></code></pre></div>\n<h2 id=\"2-number-type\" style=\"position:relative;\"><a href=\"#2-number-type\" aria-label=\"2 number type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Number Type</h2>\n<p>Number Type은 숫자를 나타낸다.</p>\n<p>Javascript의 숫자형은 int, double, short, float 등의 정수, 실수들의 다양한 숫자형이 있는 반면에,\nNumber Type 하나로만 나타낸다.</p>\n<p>이 Number Type은 64비트 부동소수점 형으로</p>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mo stretchy=\"false\">(</mo><msup><mn>2</mn><mn>53</mn></msup><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>∼</mo><msup><mn>2</mn><mn>53</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">-(2^{53} - 1) \\sim 2^{53} - 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1141079999999999em;vertical-align:-0.25em;\"></span><span class=\"mord\">−</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">5</span><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∼</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9474379999999999em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">5</span><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></span>\n<p>의 범위를 나타낼 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> number <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n<span class=\"token keyword\">var</span> number <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">10</span>\n<span class=\"token keyword\">var</span> number <span class=\"token operator\">=</span> <span class=\"token number\">10.101010101</span>\n<span class=\"token keyword\">var</span> hex <span class=\"token operator\">=</span> <span class=\"token number\">0x0a</span>\n<span class=\"token keyword\">var</span> oct <span class=\"token operator\">=</span> <span class=\"token number\">0o12</span>\n<span class=\"token keyword\">var</span> binary <span class=\"token operator\">=</span> <span class=\"token number\">0b1010</span></code></pre></div>\n<p>위와 같이 2진수<code class=\"language-text\">0b</code>, 8진수<code class=\"language-text\">0o</code>, 16진수<code class=\"language-text\">0x</code>로 숫자값을 저장할 수도 있다.</p>\n<p><strong>하지만</strong> 저장되어져 있는 결과는 10진수(Decimal)로 저장되어져 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>hex <span class=\"token operator\">===</span> oct<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> binary<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></code></pre></div>\n<h3 id=\"무한대-표시-infinity--infinity\" style=\"position:relative;\"><a href=\"#%EB%AC%B4%ED%95%9C%EB%8C%80-%ED%91%9C%EC%8B%9C-infinity--infinity\" aria-label=\"무한대 표시 infinity  infinity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>무한대 표시 (Infinity, -Infinity)</h3>\n<p>그 무엇보다 크고 작은 숫자인 무한대를 표기 할 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> infinityNum <span class=\"token operator\">=</span> <span class=\"token number\">Infinity</span> <span class=\"token comment\">// 양의 무한대</span>\n<span class=\"token keyword\">var</span> infinityNum <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">Infinity</span> <span class=\"token comment\">// 음의 무한대</span></code></pre></div>\n<p>Infinity는 자바스크립트가 나타낼 수 있는 어떠한 숫자 리터럴 보다 크고 -Infinity는 어떠한 숫자 리터럴 보다 작다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">Infinity</span> <span class=\"token operator\">></span> <span class=\"token number\">9007199254740992</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">Infinity</span> <span class=\"token operator\">&lt;</span> <span class=\"token operator\">-</span><span class=\"token number\">9007199254740992</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></code></pre></div>\n<h3 id=\"nan\" style=\"position:relative;\"><a href=\"#nan\" aria-label=\"nan permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NaN</h3>\n<p>숫자타입에는 Infinity 말고도 특별한 값이 있는데, 바로 NaN이다.</p>\n<p>NaN의 의미는 <strong>숫자가 아니다</strong>는 것. (Not a Number)</p>\n<p>NaN을 반환하는 연산은 다음과 같다.</p>\n<ul>\n<li>숫자로서 읽을 수 없음</li>\n<li>결과가 허수인 수학 계산식</li>\n<li>피연산자가 <code class=\"language-text\">NaN</code></li>\n<li>정의할 수 없는 계산식</li>\n<li>문자열을 포함하면서 덧셈이 아닌 계산식</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> number <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token operator\">/</span> <span class=\"token number\">0</span> <span class=\"token comment\">// 정의 할 수 없는 계산식</span>\n<span class=\"token keyword\">var</span> number <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'문자열123'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 숫자로 읽을 수 없음</span>\n<span class=\"token keyword\">var</span> number <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token operator\">*</span> <span class=\"token number\">NaN</span> <span class=\"token comment\">// 피 연산자가 NaN</span>\n<span class=\"token keyword\">var</span> number <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 값이 허수</span>\n<span class=\"token keyword\">var</span> number <span class=\"token operator\">=</span> <span class=\"token string\">'문자열'</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span> <span class=\"token comment\">// 문자열을 포함하면서 덧셈이 아닌 계산식</span></code></pre></div>\n<p>다음과 같이 숫자로 표현할 수 없는 값일 경우에는 NaN이 된다.</p>\n<h4 id=\"nan-판별\" style=\"position:relative;\"><a href=\"#nan-%ED%8C%90%EB%B3%84\" aria-label=\"nan 판별 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NaN 판별</h4>\n<p>NaN을 체크하는 방법은 전역객체에 존재하는 isNaN() 메서드를 이용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></code></pre></div>\n<h3 id=\"number-object\" style=\"position:relative;\"><a href=\"#number-object\" aria-label=\"number object permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Number Object</h3>\n<p>숫자 타입 또한 문자열 타입과 마찬가지로 리터럴 대신 Number Object를 통해 생성할 수 있으며,\n내부적으로 Object를 통해 만들어진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> number <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>number <span class=\"token operator\">===</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></code></pre></div>\n<h3 id=\"primitive-type-1\" style=\"position:relative;\"><a href=\"#primitive-type-1\" aria-label=\"primitive type 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Primitive Type</h3>\n<p>숫자 타입은 Javascript 타입 종류중 하나인 <code class=\"language-text\">원시 타입 (Primitive Type)</code>이다.</p>\n<p>Primitive Type의 내용은 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures\">여기</a>를 참조하자.</p>\n<h3 id=\"numberprototype\" style=\"position:relative;\"><a href=\"#numberprototype\" aria-label=\"numberprototype permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Number.prototype</h3>\n<p>모든 숫자 Type은 내부적으로 Number Object로 생성이되어 Number.prototype을 상속받는다.</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number\">Number.prototype 공식문서</a></p>\n<p>알아둘 것은,</p>\n<ul>\n<li>Number.MAX_VALUE</li>\n<li>Number.MIN_VALUE</li>\n<li>Number.isNaN()</li>\n<li>Number.parseInt()</li>\n</ul>\n<p>등이 있다.</p>\n<h4 id=\"numberisnan---isnan\" style=\"position:relative;\"><a href=\"#numberisnan---isnan\" aria-label=\"numberisnan   isnan permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Number.isNaN() &#x3C;-> isNaN()</h4>\n<p>Number.isNaN()과 global의 isNaN() 과의 비교를 알아 둘 필요는 있다.</p>\n<p>global의 isNaN()은 값이 NaN이거나 숫자로 변환했을 때 NaN이 되면 true를 반환하지만,</p>\n<p>Number.isNaN()은 값이 명확하게 NaN일 경우에만 true를 반환한다.</p>\n<p>요약하자면, <strong>global의 isNaN은 자동 형변환이 포함되어 있다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NaN'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">.</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NaN'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">.</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></code></pre></div>\n<h3 id=\"typeof-1\" style=\"position:relative;\"><a href=\"#typeof-1\" aria-label=\"typeof 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>typeof</h3>\n<p>number 타입의 값을 typeof 하면 <code class=\"language-text\">&quot;number&quot;</code> 값이 나온다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> numValue <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"number\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> numValue<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"number\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"number\"</span></code></pre></div>\n<h2 id=\"3-boolean-type\" style=\"position:relative;\"><a href=\"#3-boolean-type\" aria-label=\"3 boolean type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Boolean Type</h2>\n<p>불리언 타입은 참, 거짓을 나타내는 <code class=\"language-text\">true</code>, <code class=\"language-text\">false</code> 로 나타낼 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> isSomeTrue <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token keyword\">var</span> isSomeTrue <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></code></pre></div>\n<h3 id=\"truthy-vs-falsy\" style=\"position:relative;\"><a href=\"#truthy-vs-falsy\" aria-label=\"truthy vs falsy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Truthy VS Falsy</h3>\n<p>Javascript에서는 Boolean 타입에 더나아간 개념으로 <code class=\"language-text\">Truthy</code>와 <code class=\"language-text\">Falsy</code>라는 개념이 있다.</p>\n<p>이 개념은 변수의 타입이 Boolean 타입이 아니더라도, Boolean 형태의 값처럼 인식하여 if문과 같은 흐름제어에 <code class=\"language-text\">true</code> <code class=\"language-text\">false</code> 와 같이 쓰이게 된다.</p>\n<ul>\n<li>Truthy : true로 인식되는 값</li>\n<li>Falsy : false로 인식되는 값</li>\n</ul>\n<p><code class=\"language-text\">Falsy</code>에 속하는 값들만 알고있으면, 그 외의 나머지는 <code class=\"language-text\">Truthy</code>이다.</p>\n<h4 id=\"falsy-값\" style=\"position:relative;\"><a href=\"#falsy-%EA%B0%92\" aria-label=\"falsy 값 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Falsy 값</h4>\n<ul>\n<li>false</li>\n<li>undefined</li>\n<li>null</li>\n<li>0, -0</li>\n<li>NaN</li>\n<li>\"\" (빈 문자열)</li>\n</ul>\n<p>햇갈리기 쉬운 값으로는 <code class=\"language-text\">{}</code> <code class=\"language-text\">[]</code> 빈 객체, 배열이 있다. 이 값들은 Truthy.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> someValue <span class=\"token operator\">=</span> <span class=\"token string\">'하하하'</span>\n<span class=\"token keyword\">var</span> nothing <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>someValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>someValue<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 출력</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nothing<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'값 없음'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 출력 X</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"boolean-형변환--연산자\" style=\"position:relative;\"><a href=\"#boolean-%ED%98%95%EB%B3%80%ED%99%98--%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"boolean 형변환  연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Boolean 형변환 (!! 연산자)</h3>\n<p>Boolean은 앞서 봤던, <code class=\"language-text\">Truthy</code> <code class=\"language-text\">Falsy</code> 개념으로 형변환을 할 필요는 없지만,</p>\n<p>보다 명확하게 나타내기 위해 <code class=\"language-text\">!</code> 연산자를 두번 사용<code class=\"language-text\">!!</code>하기도 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> string <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n<span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span>string<span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span>num<span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\n\n<span class=\"token keyword\">var</span> string <span class=\"token operator\">=</span> <span class=\"token string\">'string'</span>\n<span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span>string<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span>num<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></code></pre></div>\n<h3 id=\"primitive-type-2\" style=\"position:relative;\"><a href=\"#primitive-type-2\" aria-label=\"primitive type 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Primitive Type</h3>\n<p>불린 타입은 Javascript 타입 종류중 하나인 <code class=\"language-text\">원시 타입 (Primitive Type)</code>이다.</p>\n<p>Primitive Type의 내용은 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures\">여기</a>를 참조하자.</p>\n<h3 id=\"typeof-2\" style=\"position:relative;\"><a href=\"#typeof-2\" aria-label=\"typeof 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>typeof</h3>\n<p>Boolean 타입의 값을 typeof 하면 “boolean” 값이 나온다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"boolean\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"boolean\"</span></code></pre></div>\n<h2 id=\"4-undefined-정의되지않음\" style=\"position:relative;\"><a href=\"#4-undefined-%EC%A0%95%EC%9D%98%EB%90%98%EC%A7%80%EC%95%8A%EC%9D%8C\" aria-label=\"4 undefined 정의되지않음 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Undefined (정의되지않음)</h2>\n<p><code class=\"language-text\">undefined</code> 값은 <strong>변수 선언시 자동으로 할당되는 값</strong>으로, Undefined 타입이다.\nUndefined 타입의 값은 <code class=\"language-text\">undefined</code> 하나밖에 존재하지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> undefinedVar <span class=\"token comment\">// undefined 자동할당</span>\n<span class=\"token keyword\">let</span> undefinedVar <span class=\"token comment\">// undefined 자동할당</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>undefinedVar<span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span></code></pre></div>\n<h3 id=\"undefined값은-어떻게\" style=\"position:relative;\"><a href=\"#undefined%EA%B0%92%EC%9D%80-%EC%96%B4%EB%96%BB%EA%B2%8C\" aria-label=\"undefined값은 어떻게 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Undefined값은 어떻게?</h3>\n<p><code class=\"language-text\">undefined</code>는 개발자가 스스로 변수에 할당하는 값이 아니고, 주로 <u>선언은 되었지만 값을 할당하지않은 변수</u>에 접근하거나 <u>객체에 존재하지않는 속성값을 가져오려고 할 때</u> <code class=\"language-text\">undefined</code>가 반환된다.</p>\n<ol>\n<li><strong>선언 되었으나 값이 할당되지 않은 변수</strong></li>\n<li><strong>존재하지않는 객체의 속성(Property)에 접근</strong></li>\n</ol>\n<p>개발자 스스로 값이 없음을 표시하고 싶을때 <code class=\"language-text\">undefined</code>를 할당하는것은 좋지못한 컨벤션. 일반적이지 않다.</p>\n<p>값이 없다는것을 표기하고 싶다면 null 타입을 이용하도록 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> emptyValue <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span> <span class=\"token comment\">// Bad</span>\n<span class=\"token keyword\">var</span> emptyValue <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span> <span class=\"token comment\">// Good</span></code></pre></div>\n<h3 id=\"undefined-확인-falsy\" style=\"position:relative;\"><a href=\"#undefined-%ED%99%95%EC%9D%B8-falsy\" aria-label=\"undefined 확인 falsy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>undefined 확인 (Falsy)</h3>\n<p><code class=\"language-text\">undefined</code> 값인 것을 확인하려면은 <code class=\"language-text\">undefined</code>값으로 명백하게 비교 할 수도 있지만, Falsy의 특성을 이용해도 좋다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> emptyValue\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>emptyValue <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ToDo</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Falsy</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>emptyValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ToDo</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>아래의 Falsy 특성을 이용해서 변수에 값이 할당되어있는지, 객체에 해당 속성이 있는지 체크하는데 주로 쓰인다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"hayoung\"</span><span class=\"token punctuation\">;</span>\n    age<span class=\"token operator\">:</span> <span class=\"token number\">29</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>person<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">의 나이는 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>person<span class=\"token punctuation\">.</span>age<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> 입니다.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>age <span class=\"token operator\">&amp;&amp;</span> person<span class=\"token punctuation\">.</span>age <span class=\"token operator\">></span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>person<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">은 아저씨입니다.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"호이스팅\" style=\"position:relative;\"><a href=\"#%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85\" aria-label=\"호이스팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>호이스팅</h3>\n<p>또한 undefined는 호이스팅과 연관이 있는데, 변수를 할당해도 호이스팅 된 변수가 값이 할당되기 전까지는 <code class=\"language-text\">undefined</code>값으로 초기화 되어 있다.</p>\n<p>하지만 let과 const로 선언하는 변수형은 자체적으로 <a href=\"\">TDZ</a>로 보호가 되기 때문에 <code class=\"language-text\">ReferenceError</code>가 발생한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>someValue<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 호이스팅으로 undefined 출력</span>\n\n  <span class=\"token keyword\">var</span> someValue <span class=\"token operator\">=</span> <span class=\"token string\">'Hello World'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>호이스팅에 대한 자세한 내용은 이후 포스팅 할 호이스팅 포스트에서 알아보자.</p>\n<h3 id=\"primitive-type-3\" style=\"position:relative;\"><a href=\"#primitive-type-3\" aria-label=\"primitive type 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Primitive Type</h3>\n<p>undefined 타입은 Javascript 타입 종류중 하나인 <code class=\"language-text\">원시 타입 (Primitive Type)</code>이다.</p>\n<p>Primitive Type의 내용은 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures\">여기</a>를 참조하자.</p>\n<h3 id=\"typeof-3\" style=\"position:relative;\"><a href=\"#typeof-3\" aria-label=\"typeof 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>typeof</h3>\n<p><code class=\"language-text\">undefined</code> 값을 typeof 하면 <code class=\"language-text\">&quot;undefined&quot;</code> 값이 나온다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> undefinedValue\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"undefined\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> undefinedValue<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"undefined\"</span></code></pre></div>\n<h2 id=\"5-null-값이-없음\" style=\"position:relative;\"><a href=\"#5-null-%EA%B0%92%EC%9D%B4-%EC%97%86%EC%9D%8C\" aria-label=\"5 null 값이 없음 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. null (값이 없음)</h2>\n<p>null 타입은 Undefined 타입과 유사하게 <code class=\"language-text\">null</code> 값 하나밖에 가지고 있지 않다.</p>\n<p><code class=\"language-text\">null</code>값은 일반적으로 <strong>개발자 스스로가 변수에 값이 없음을 명시할 때</strong> 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> someValue <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span> <span class=\"token comment\">// 나중에 처리하기 위해 선언만</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'hayoung'</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ToDo</span>\n\nsomeValue <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span> <span class=\"token comment\">// 객체 사용 후 더이상 하용하지 않아 null 처리</span></code></pre></div>\n<h3 id=\"가비지-콜렉션\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EB%B9%84%EC%A7%80-%EC%BD%9C%EB%A0%89%EC%85%98\" aria-label=\"가비지 콜렉션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가비지 콜렉션</h3>\n<p>Javascript에서는 객체에 자동으로 메모리가 할당되고, <a href=\"https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)\">가비지 컬렉션</a>을 이용해 <strong>자동으로 메모리 해제</strong>를 한다.</p>\n<p>가비지 컬렉션 중에서도 <a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Memory_Management#%ED%91%9C%EC%8B%9C%ED%95%98%EA%B3%A0-%EC%93%B8%EA%B8%B0mark-and-sweep_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\">Mark-and-sweep</a> 라는 방식을 사용하는데, 이는 일정 주기로 사용하지 않는 메모리들을 한꺼번에 해제하는 방식이다.</p>\n<p>문제는 우리가 사용하지 않는 객체를 수동으로 해제할 수 없다는 점과 사용하지 않는 메모리를 파악하는데 있다.</p>\n<p>이를 우리가 <strong>사용하지 않는 변수에 null값을 직접 할당</strong>해서 가비지 컬렉션이 되도록 유도하여 Javascript의 <strong>메모리 관리에 도움</strong>을 줄 수 있다.</p>\n<p>참조값을 가지고 있는 변수에 null값을 직접 할당함으로써 해당 메모리를 가리키는 참조 정보를 제거하여 누구도 참조하지 않는 메모리 영역으로 만드는 것.</p>\n<h3 id=\"null값-확인-falsy\" style=\"position:relative;\"><a href=\"#null%EA%B0%92-%ED%99%95%EC%9D%B8-falsy\" aria-label=\"null값 확인 falsy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>null값 확인 (Falsy)</h3>\n<p><code class=\"language-text\">null</code> 값 또한 <code class=\"language-text\">undefined</code>와 마찬가지로 Falsy값에 속하기 때문에 <code class=\"language-text\">undefined</code> 와 같이 Falsy 값으로 사용 할 수 있지만, 객체 참조값 변수로의 null을 명확하게 비교하려면 아래와 같이 해도 상관없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> someObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  author<span class=\"token operator\">:</span> <span class=\"token string\">'hayoung'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\nsomeObj <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>someObj <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ToDo</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"primitive-type-4\" style=\"position:relative;\"><a href=\"#primitive-type-4\" aria-label=\"primitive type 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Primitive Type</h3>\n<p>null 타입은 Javascript 타입 종류중 하나인 <code class=\"language-text\">원시 타입 (Primitive Type)</code>이다.</p>\n<p>Primitive Type의 내용은 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures\">여기</a>를 참조하자.</p>\n<h3 id=\"undefined-vs-null\" style=\"position:relative;\"><a href=\"#undefined-vs-null\" aria-label=\"undefined vs null permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>undefined VS null</h3>\n<p>앞서 설명했듯이, undefined는 일부러 할당하지 않았는데 정의되지 않은 값을 나타내는 것이고,</p>\n<p>null 값은 프로그래밍 중에 의도적으로 빈 값을 나타내기 위한 값이다.</p>\n<h4 id=\"-연산자-주의\" style=\"position:relative;\"><a href=\"#-%EC%97%B0%EC%82%B0%EC%9E%90-%EC%A3%BC%EC%9D%98\" aria-label=\" 연산자 주의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>== 연산자 [주의!]</h4>\n<p>undefined와 null에 대해 <a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Comparison_Operators\">== 연산자</a>의 사용에 주의를 가져야 한다.</p>\n<p><code class=\"language-text\">==</code> 연산자는 <code class=\"language-text\">===</code>연산자와 다르게 형변환이 적용된다는 특성이 있다.</p>\n<p>따라서 <code class=\"language-text\">null</code>과 <code class=\"language-text\">undefined</code>의 값을 비교할 때 형변환이 일어나서 둘 다 Falsy값이기 때문에 참이된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></code></pre></div>\n<h4 id=\"typeof-4\" style=\"position:relative;\"><a href=\"#typeof-4\" aria-label=\"typeof 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>typeof</h4>\n<p>undefined 타입인 <code class=\"language-text\">undefined</code>를 typeof 하면 undefined 타입으로 나온다.</p>\n<p>하지만, null 타입인 <code class=\"language-text\">null</code>을 typeof 하면 <strong>null로 나오지 않고 <code class=\"language-text\">object</code>로 나온다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"undefined\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"object\"</span></code></pre></div>\n<p>이는 자바스크립트 초기 설계상의 오류라고 볼 수 있다.</p>\n<h4 id=\"숫자값-덧셈\" style=\"position:relative;\"><a href=\"#%EC%88%AB%EC%9E%90%EA%B0%92-%EB%8D%A7%EC%85%88\" aria-label=\"숫자값 덧셈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>숫자값 덧셈</h4>\n<p><code class=\"language-text\">null</code>에 숫자값을 더하면 그 숫자 그대로의 값이 되지만,</p>\n<p><code class=\"language-text\">undefined</code>에 숫자값이 더해지면 NaN이 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// NaN</span></code></pre></div>\n<h3 id=\"typeof-연산자\" style=\"position:relative;\"><a href=\"#typeof-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"typeof 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>typeof 연산자</h3>\n<p><code class=\"language-text\">null</code> 값을 typeof 하면 <strong><code class=\"language-text\">&quot;object&quot;</code> 값이 나온다.</strong></p>\n<p><code class=\"language-text\">&quot;null&quot;</code> 값이 나오는 것이 아닌 <code class=\"language-text\">&quot;object&quot;</code> 임을 유의!</p>\n<p><code class=\"language-text\">&quot;object&quot;</code> 값인 이유는 자바스크립트 설계상의 오류라고 한다.</p>\n<h2 id=\"6-symbol\" style=\"position:relative;\"><a href=\"#6-symbol\" aria-label=\"6 symbol permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. Symbol</h2>\n<p>ES2015를 통해 새롭게 추가된 타입.</p>\n<p><strong>충돌 위험이 없는 객체의 키 값을 만들기위해</strong> 도입되었으며</p>\n<p>Symbol 타입을 생성하면 변경 불가능하고 고유한 Primitive한 값이 생성된다.</p>\n<p>식별자로의 충돌이 없는 유일하고 고유한 객체의 키값을 생성할 때 사용한다.</p>\n<h3 id=\"symbol의-생성\" style=\"position:relative;\"><a href=\"#symbol%EC%9D%98-%EC%83%9D%EC%84%B1\" aria-label=\"symbol의 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Symbol의 생성</h3>\n<p>Symbol타입의 값 생성은 <code class=\"language-text\">Symbol()</code> 함수를 통해서 생성한다.</p>\n<p>다른 Primitive Type의 값들과 다르게 <code class=\"language-text\">new (String, Number, Boolean)</code>과 같이 객체 생성이 불가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> symbolValue <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsymbolValue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// TypeError: Symbol is not a constructor</span></code></pre></div>\n<p><code class=\"language-text\">Symbol()</code> 함수의 인자로 문자열 값을 전달할 수 있는데, 이는 Symbol에 대한 Description으로 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> symbolValue <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'testIdentifier'</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>symbolValue<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Symbol(testIdentifier);</span></code></pre></div>\n<p><code class=\"language-text\">Symbol()</code> 함수의 문자열 인자를 통해 생성 후 똑같은 문자열 인자로 Symbol 생성을 해도 똑같지 않다.</p>\n<p><code class=\"language-text\">Symbol()</code> 함수는 무조건 새로운 Symbol 값을 반환하기 때문.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> symbolValue <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'testIdentifier'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> symbolValue2 <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'testIdentifier'</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>symbolValue <span class=\"token operator\">===</span> symbolValue2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>symbolValue <span class=\"token operator\">===</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'testIdentifier'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// flase</span></code></pre></div>\n<h3 id=\"symbol의-사용\" style=\"position:relative;\"><a href=\"#symbol%EC%9D%98-%EC%82%AC%EC%9A%A9\" aria-label=\"symbol의 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Symbol의 사용</h3>\n<p>Symbol값은 객체의 프로퍼티로 사용한다.</p>\n<p>이 Symbol 값의 프로퍼티는 어떠한 프로퍼티와도 충돌되지 않고 오직 해당 Symbol 값으로만 접근가능하다.</p>\n<p>주로 [] 연산자를 통해 객체 프로퍼티로 등록 및 가져온다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> authorSymbol <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'author'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\nobj<span class=\"token punctuation\">[</span>authorSymbol<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'hayoung'</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>authorSymbol<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// hayoung</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> authorSymbol <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'author'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\nobj<span class=\"token punctuation\">[</span>authorSymbol<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'hayoung'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>authorSymbol<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// hayoung</span>\n\nauthorSymbol <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'author'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>authorSymbol<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span></code></pre></div>\n<h3 id=\"symbolfor\" style=\"position:relative;\"><a href=\"#symbolfor\" aria-label=\"symbolfor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Symbol.for</h3>\n<p>전역 Symbol 레지스트리에 공유 Symbol 값으로 생성하고 가져올 수 있다.</p>\n<p>우리가 <code class=\"language-text\">Symbol.for(KEY)</code> 와 같이 <code class=\"language-text\">Symbol.for()</code> 메서드와 문자열 인자값으로 새로운 Symbol 값을 생성하면 전역 Symbol 레지스트리에 해당 문자열의 키로 Symbol 값이 등록이 됨과 동시에 Symbol 값을 반환한다.</p>\n<p>추후 <strong>다시 Symbol.for메서드에 해당 문자열 키로 해당 Symbol값을 찾을 수 있다.</strong></p>\n<p>해당 문자열키에 해당하는 Symbol값이 없다면 해당 문자열 키로 하는 Symbol값을 새로 전역 Symbol 레지스트리에 등록하고 Symbol값을 반환한다.</p>\n<p><strong>Module A</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> authorSymbol <span class=\"token operator\">=</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'author'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Symbol 값 새로 생성</span>\n\n<span class=\"token keyword\">const</span> ModuleA <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\nModuleA<span class=\"token punctuation\">[</span>authorSymbol<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'hayoung'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> ModuleA</code></pre></div>\n<p><strong>Module B</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> ModuleA <span class=\"token keyword\">from</span> <span class=\"token string\">'./ModuleA'</span>\n\n<span class=\"token keyword\">const</span> anotherAuthorSymbol <span class=\"token operator\">=</span> Symbol<span class=\"token punctuation\">.</span><span class=\"token function\">for</span><span class=\"token punctuation\">(</span><span class=\"token string\">'author'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 이전에 전역 Symbol 레지스트리에 저장되어있던 Symbol값 반환.</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ModuleA<span class=\"token punctuation\">.</span>anotherAuthorSymbol<span class=\"token punctuation\">)</span> <span class=\"token comment\">// hayoung</span></code></pre></div>\n<h3 id=\"symbol-for--in\" style=\"position:relative;\"><a href=\"#symbol-for--in\" aria-label=\"symbol for  in permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Symbol for .. in</h3>\n<p>Symbol 키 값은 for…in 반복문으로 가져올 수 없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\nobj<span class=\"token punctuation\">[</span><span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'one'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\nobj<span class=\"token punctuation\">[</span><span class=\"token string\">'two'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\nobj<span class=\"token punctuation\">[</span><span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'three'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\nobj<span class=\"token punctuation\">.</span>four <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"two\" / \"four\" 출력</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>만약 객체에서 Symbol값을 가져오려면 <code class=\"language-text\">Object.getOwnPropertySymbols()</code>를 통해 가져올 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> symbols <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertySymbols</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>symbols<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [Symbol(one), Symbol(three)]</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> symbols<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>symbs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Symbol(one) / Symbol(three)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"typeof-5\" style=\"position:relative;\"><a href=\"#typeof-5\" aria-label=\"typeof 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>typeof</h3>\n<p>Symbol 값을 typeof 하면 <code class=\"language-text\">&quot;symbol&quot;</code> 값으로 나온다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"symbol\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'author'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"symbol\"</span></code></pre></div>\n<h2 id=\"7-object\" style=\"position:relative;\"><a href=\"#7-object\" aria-label=\"7 object permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. Object</h2>\n<h3 id=\"참조값reference\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0%EA%B0%92reference\" aria-label=\"참조값reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조값(Reference)</h3>\n<p>프로그래밍에서는 <strong>참조</strong>라는 개념이 빠지지않고 나온다.</p>\n<p>참조라는 개념은 실제 값이 아닌, 그 값이 저장되어있는 주소값(참조값)을 식별자(변수)에 할당하는 것.\n이 식별자(변수)는 실제 값이 아닌 해당 값이 저장되어있는 주소값(참조값)을 가지고있다.</p>\n<p>이 참조라는 개념에 빠질수 없는 단어가\npassed(call)-by-value / passed(call)-by-reference 와 같은 단어들인데,</p>\n<h4 id=\"passed-by-value-vs-passed-by-reference\" style=\"position:relative;\"><a href=\"#passed-by-value-vs-passed-by-reference\" aria-label=\"passed by value vs passed by reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>passed-by-value VS passed-by-reference</h4>\n<p><strong>값에 의한 전달(passed-by-value)</strong>은 변수(식별자)에 할당될 때, 값 그 자체로의 복사가 일어나서 할당이되는것이고,</p>\n<p><strong>참조에 의한 전달(passed-by-reference)</strong>은 메모리상에 값이 저장되어있는 <strong>주소</strong> 즉 <strong>참조 값</strong>이 변수(식별자)에 복사, 할당이 되는것이다. 이 때 같은 참조값을 가진 변수들중에서 하나의 변수만 값을 변경할 경우에는 레퍼런스를 통해서 메모리상의 실제 값을 수정하기 때문에 같은 메모리 주소의 참조값을 가진 변수들에 모두 적용이 된다.</p>\n<p>자바스크립트도 이런 <strong>참조</strong>라는 개념이 당연히 있고, 지금 설명하는 <code class=\"language-text\">Object</code> 타입의 값들이 모두 <strong>참조</strong>값이다.</p>\n<p>자바스크립트의 <code class=\"language-text\">Object</code> 타입의 값들은 참조의 특성에 의거해 아래와 같은 특성을 지닌다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  prop1<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  prop2<span class=\"token operator\">:</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> obj2 <span class=\"token operator\">=</span> obj1 <span class=\"token comment\">// 같은 값을 가지는 것이 아닌, 같은 참조값을 가진다.</span>\n\nobj2<span class=\"token punctuation\">.</span>prop2 <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span> <span class=\"token comment\">// {prop1: 1, prop2: 3}</span>\n<span class=\"token comment\">// obj2를 수정했지만 obj1에도 수정내용이 적용</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">var</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr1 <span class=\"token operator\">===</span> arr2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\n<span class=\"token comment\">// 값은 같지만 참조값이 같이 않음</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">changeObj</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  prop1<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  prop2<span class=\"token operator\">:</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">changeObj</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">,</span> <span class=\"token string\">'prop1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span> <span class=\"token comment\">// {prop1: \"1\", prop2: \"2\"}</span>\n<span class=\"token comment\">// 스코프가 다르고 리턴을 하지않더라도 참조 특성으로 Primitive 값과 달리 값이 바뀐다.</span></code></pre></div>\n<h3 id=\"객체-생성-방법\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4-%EC%83%9D%EC%84%B1-%EB%B0%A9%EB%B2%95\" aria-label=\"객체 생성 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체 생성 방법</h3>\n<p>객체를 생성하는 방법은 다양한 방법이 있지만, 크게 3가지로 나뉜다.</p>\n<ol>\n<li>객체 리터럴 이용</li>\n<li>생성자 함수</li>\n<li>new Object();</li>\n</ol>\n<h4 id=\"1-객체-리터럴-이용\" style=\"position:relative;\"><a href=\"#1-%EA%B0%9D%EC%B2%B4-%EB%A6%AC%ED%84%B0%EB%9F%B4-%EC%9D%B4%EC%9A%A9\" aria-label=\"1 객체 리터럴 이용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 객체 리터럴 이용</h4>\n<p>리터럴(Literal)은 코드상에서 값을 그대로 표기해서 값을 생성하는 방법이다.</p>\n<p>객체를 객체 리터럴로 생성하는 방법이 가장 일반적으로 객체를 생성하는 방법이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> hayoung <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'hayoung'</span><span class=\"token punctuation\">,</span>\n  gender<span class=\"token operator\">:</span> <span class=\"token string\">'male'</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token operator\">:</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span>\n  job<span class=\"token operator\">:</span> <span class=\"token string\">'developer'</span><span class=\"token punctuation\">,</span>\n  isMarriage<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> emptyObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 <code class=\"language-text\">{}</code> 중괄호를 이용하면 객체를 쉽게 생성할 수 있고 이처럼 값을 코드상에서 바로 만드는 방법을 <code class=\"language-text\">리터럴</code>이라고 한다.</p>\n<p>내부적으로는, 3번방법인 <code class=\"language-text\">new Object()</code>가 작동한다.</p>\n<h4 id=\"2-생성자-함수\" style=\"position:relative;\"><a href=\"#2-%EC%83%9D%EC%84%B1%EC%9E%90-%ED%95%A8%EC%88%98\" aria-label=\"2 생성자 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 생성자 함수</h4>\n<p>추후 살펴볼 내용이지만, 자바스크립트의 함수는 생성자 함수로도 정의할 수 있다. 생성자 함수라는 것은 일정의 형식이 정해진 것이 아니라, 정의한 함수에 new 키워드를 붙여 호출하면 생성자 함수로 사용할 수 있다.</p>\n<p>이러한 생성자 함수를 이용하면 생성자 함수에서 설정해놓은대로 객체가 생성이 되는데,\n이는 동일한 형태의 객체를 쉽고 빠르게 재생산 할 수 있다는 장점이 있다.</p>\n<blockquote>\n<p>this와 Prototype 개념을 익히면 더 디테일하게 알 수 있다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Human</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gender <span class=\"token operator\">=</span> gender\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> hayoung <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Human</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hayoung'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'male'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> faker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Human</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sanghyuk'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'male'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위와 같이 생성자 함수와 new, this 키워드를 이용해서 새로운 객체를 생성할 수 있다.</p>\n<blockquote>\n<p>생성자 함수는 new 키워드를 만나 빈 객체(인스턴스)를 생성하고 이를 생성자 함수 내부에서 this를 통해 생성된 인스턴스에 property, method 할당 등의 작업을 할 수 있다.</p>\n<p>그리고 특별한 return문(객체 return)이 없다면, 이 인스턴스(this)를 자동으로 반환한다.</p>\n</blockquote>\n<h4 id=\"3-new-object\" style=\"position:relative;\"><a href=\"#3-new-object\" aria-label=\"3 new object permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. new Object()</h4>\n<p>이 방법은 거의 쓸 일이 없지만, 생성자 함수를 통해 생성되는 방법을 제외하고는 거의 모든 방법이 내부적으로\n<code class=\"language-text\">new Object()</code>와 동일하게 동작한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> emptyObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 객체 리터럴 {}로 생성하는것과 똑같다. (표현의 방식만 다름)</span>\nemptyObj<span class=\"token punctuation\">.</span>prop1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\nemptyObj<span class=\"token punctuation\">.</span>prop2 <span class=\"token operator\">=</span> <span class=\"token string\">'2'</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>emptyObj<span class=\"token punctuation\">)</span> <span class=\"token comment\">// {prop1: 1, prop2: \"2\"}</span>\n\n<span class=\"token keyword\">var</span> numberObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token number\">13</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// primitive 값을 new Object로 생성하면 Object 타입으로 생성된다.</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>numberObj<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Number {13}</span></code></pre></div>\n<h3 id=\"property-method-할당-하기\" style=\"position:relative;\"><a href=\"#property-method-%ED%95%A0%EB%8B%B9-%ED%95%98%EA%B8%B0\" aria-label=\"property method 할당 하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Property, Method 할당 하기</h3>\n<p>객체는 일반적으로 <code class=\"language-text\">속성(property)</code>와 <code class=\"language-text\">메소드(method)</code> 값을 가질 수 있고, 이 속성값을 통해서 다양한 작업을 할 수 있다.</p>\n<blockquote>\n<p><code class=\"language-text\">메소드(method)</code>는 객체의 <code class=\"language-text\">property</code>로 등록된 함수.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nobj<span class=\"token punctuation\">.</span>property1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\nobj<span class=\"token punctuation\">[</span><span class=\"token string\">'property2'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">method1</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello, this is method'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token comment\">// {property1: 1, property2: \"hello\", method1: ƒ}</span></code></pre></div>\n<h4 id=\"점-표기법dot-notation\" style=\"position:relative;\"><a href=\"#%EC%A0%90-%ED%91%9C%EA%B8%B0%EB%B2%95dot-notation\" aria-label=\"점 표기법dot notation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>점 표기법(Dot Notation)</h4>\n<p>Dot Notation은 객체 식별자에 <code class=\"language-text\">.</code>을 찍어서 <code class=\"language-text\">property</code>, <code class=\"language-text\">method</code> 에 접근 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nobj<span class=\"token punctuation\">.</span>property1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">method1</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello, this is method'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>property1<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">method1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"hello, this is method\"</span></code></pre></div>\n<h4 id=\"대괄호-표기법bracket-notation\" style=\"position:relative;\"><a href=\"#%EB%8C%80%EA%B4%84%ED%98%B8-%ED%91%9C%EA%B8%B0%EB%B2%95bracket-notation\" aria-label=\"대괄호 표기법bracket notation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>대괄호 표기법(Bracket notation)</h4>\n<p>Bracket Notation은 <code class=\"language-text\">[]</code> 로 <code class=\"language-text\">property</code>와 <code class=\"language-text\">method</code> Key값을 감싸서 접근 할 수 있다.</p>\n<p>Dot Notation과의 차이점은 Dot Notation과 다르게 Key값을 <code class=\"language-text\">string</code> 값으로 표기해야하고,\n다른 변수(식별자)를 key값으로 이용하거나 다른 type의 값을 key값으로 이용할 수 있다.</p>\n<blockquote>\n<p>다른 type의 값을 key값으로 이용한다면, string 타입으로 형변환이 일어난다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> propKey <span class=\"token operator\">=</span> <span class=\"token string\">'propKey'</span>\n\nobj<span class=\"token punctuation\">[</span><span class=\"token string\">'property1'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\nobj<span class=\"token punctuation\">[</span><span class=\"token string\">'method1'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello, this is method'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\nobj<span class=\"token punctuation\">[</span>propKey<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> propKey\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span><span class=\"token string\">'property1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\nobj<span class=\"token punctuation\">[</span><span class=\"token string\">'method1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"hello, this is method\"</span>\n\nobj<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'number type key'</span>\nobj<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'array(object type) key'</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token comment\">// {10: \"number type key\", property1: 1, propKey: \"propKey\", 1,2: \"array(object type) key\", method1: ƒ}</span></code></pre></div>\n<h3 id=\"array-function\" style=\"position:relative;\"><a href=\"#array-function\" aria-label=\"array function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Array, Function</h3>\n<p>우리가 javascript에서 사용하는 배열 <code class=\"language-text\">Array</code>와 함수 <code class=\"language-text\">Function</code> 는 사실 <code class=\"language-text\">Object</code> 타입이다.\n둘 다 식별자(변수)에 참조값이 할당, 복사되고 앞에서 봤던 참조 특성이 그대로 적용되고 일반 객체와 동일한 성질을 갖고있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// literal(객체리터럴)로 생성 후 할당</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 4</span>\n\narr<span class=\"token punctuation\">.</span>prop1 <span class=\"token operator\">=</span> <span class=\"token string\">'property assignment'</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">method1</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'array is object'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>prop1<span class=\"token punctuation\">)</span> <span class=\"token comment\">// property assignment</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">method1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// array is object</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">,</span> arg3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>arg1 <span class=\"token operator\">+</span> arg2<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> arg3\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3</span>\n\nfunc<span class=\"token punctuation\">.</span>desc <span class=\"token operator\">=</span> <span class=\"token string\">'plus arg1, arg2 and multiply arg3'</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">.</span>desc<span class=\"token punctuation\">)</span> <span class=\"token comment\">// plus arg1, arg2 and multiply arg3</span></code></pre></div>","tableOfContents":"<ul>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#%EC%9E%90%EB%A3%8C%ED%98%95-type%EC%9D%B4%EB%9E%80\">자료형 (Type)이란?</a></li>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%9E%90%EB%A3%8C%ED%98%95-type%EC%9D%98-%EC%A2%85%EB%A5%98%EB%8A%94\">자바스크립트 자료형 (Type)의 종류는?</a></li>\n<li>\n<p><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#1-string-type\">1. String Type</a></p>\n<ul>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#%EB%AC%B8%EC%9E%90%EC%97%B4-%EB%A6%AC%ED%84%B0%EB%9F%B4-string-literal\">문자열 리터럴 (String Literal)</a></li>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#%ED%85%9C%ED%94%8C%EB%A6%BF-%EB%A6%AC%ED%84%B0%EB%9F%B4-template-literal\">템플릿 리터럴 (Template Literal)</a></li>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#string-object-%EC%9D%B4%EC%9A%A9\">String Object 이용</a></li>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#primitive-type\">Primitive Type</a></li>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#stringprototype\">String.prototype</a></li>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#typeof\">typeof</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#2-number-type\">2. Number Type</a></p>\n<ul>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#%EB%AC%B4%ED%95%9C%EB%8C%80-%ED%91%9C%EC%8B%9C-infinity--infinity\">무한대 표시 (Infinity, -Infinity)</a></li>\n<li>\n<p><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#nan\">NaN</a></p>\n<ul>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#nan-%ED%8C%90%EB%B3%84\">NaN 판별</a></li>\n</ul>\n</li>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#number-object\">Number Object</a></li>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#primitive-type-1\">Primitive Type</a></li>\n<li>\n<p><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#numberprototype\">Number.prototype</a></p>\n<ul>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#numberisnan---isnan\">Number.isNaN() &#x3C;-> isNaN()</a></li>\n</ul>\n</li>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#typeof-1\">typeof</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#3-boolean-type\">3. Boolean Type</a></p>\n<ul>\n<li>\n<p><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#truthy-vs-falsy\">Truthy VS Falsy</a></p>\n<ul>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#falsy-%EA%B0%92\">Falsy 값</a></li>\n</ul>\n</li>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#boolean-%ED%98%95%EB%B3%80%ED%99%98--%EC%97%B0%EC%82%B0%EC%9E%90\">Boolean 형변환 (!! 연산자)</a></li>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#primitive-type-2\">Primitive Type</a></li>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#typeof-2\">typeof</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#4-undefined-%EC%A0%95%EC%9D%98%EB%90%98%EC%A7%80%EC%95%8A%EC%9D%8C\">4. Undefined (정의되지않음)</a></p>\n<ul>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#undefined%EA%B0%92%EC%9D%80-%EC%96%B4%EB%96%BB%EA%B2%8C\">Undefined값은 어떻게?</a></li>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#undefined-%ED%99%95%EC%9D%B8-falsy\">undefined 확인 (Falsy)</a></li>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85\">호이스팅</a></li>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#primitive-type-3\">Primitive Type</a></li>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#typeof-3\">typeof</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#5-null-%EA%B0%92%EC%9D%B4-%EC%97%86%EC%9D%8C\">5. null (값이 없음)</a></p>\n<ul>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#%EA%B0%80%EB%B9%84%EC%A7%80-%EC%BD%9C%EB%A0%89%EC%85%98\">가비지 콜렉션</a></li>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#null%EA%B0%92-%ED%99%95%EC%9D%B8-falsy\">null값 확인 (Falsy)</a></li>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#primitive-type-4\">Primitive Type</a></li>\n<li>\n<p><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#undefined-vs-null\">undefined VS null</a></p>\n<ul>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#-%EC%97%B0%EC%82%B0%EC%9E%90-%EC%A3%BC%EC%9D%98\">== 연산자 주의!</a></li>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#typeof-4\">typeof</a></li>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#%EC%88%AB%EC%9E%90%EA%B0%92-%EB%8D%A7%EC%85%88\">숫자값 덧셈</a></li>\n</ul>\n</li>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#typeof-%EC%97%B0%EC%82%B0%EC%9E%90\">typeof 연산자</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#6-symbol\">6. Symbol</a></p>\n<ul>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#symbol%EC%9D%98-%EC%83%9D%EC%84%B1\">Symbol의 생성</a></li>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#symbol%EC%9D%98-%EC%82%AC%EC%9A%A9\">Symbol의 사용</a></li>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#symbolfor\">Symbol.for</a></li>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#symbol-for--in\">Symbol for .. in</a></li>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#typeof-5\">typeof</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#7-object\">7. Object</a></p>\n<ul>\n<li>\n<p><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#%EC%B0%B8%EC%A1%B0%EA%B0%92reference\">참조값(Reference)</a></p>\n<ul>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#passed-by-value-vs-passed-by-reference\">passed-by-value VS passed-by-reference</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#%EA%B0%9D%EC%B2%B4-%EC%83%9D%EC%84%B1-%EB%B0%A9%EB%B2%95\">객체 생성 방법</a></p>\n<ul>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#1-%EA%B0%9D%EC%B2%B4-%EB%A6%AC%ED%84%B0%EB%9F%B4-%EC%9D%B4%EC%9A%A9\">1. 객체 리터럴 이용</a></li>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#2-%EC%83%9D%EC%84%B1%EC%9E%90-%ED%95%A8%EC%88%98\">2. 생성자 함수</a></li>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#3-new-object\">3. new Object()</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#property-method-%ED%95%A0%EB%8B%B9-%ED%95%98%EA%B8%B0\">Property, Method 할당 하기</a></p>\n<ul>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#%EC%A0%90-%ED%91%9C%EA%B8%B0%EB%B2%95dot-notation\">점 표기법(Dot Notation)</a></li>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#%EB%8C%80%EA%B4%84%ED%98%B8-%ED%91%9C%EA%B8%B0%EB%B2%95bracket-notation\">대괄호 표기법(Bracket notation)</a></li>\n</ul>\n</li>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Type/#array-function\">Array, Function</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"하옹의 자바스크립트 식사 - Type","date":"November 02, 2020"}}},"pageContext":{"slug":"/2020/javascript/하옹의-자바스크립트-식사---Type/","previous":{"fields":{"slug":"/2020/vanillacoding_prep/Prep 4주차 금요일 오피스아워 정리/"},"frontmatter":{"title":"바닐라코딩 Prep 4주차 금요일 오피스아워 정리","category":"vanilla coding","draft":false}},"next":{"fields":{"slug":"/2020/algorithm_javascript/2020-11-08-[JS]-프로그래머스---K-번째-수-Lv1/"},"frontmatter":{"title":"[JS] 프로그래머스 - K 번째 수 Lv1","category":"algorithm","draft":false}}}}}