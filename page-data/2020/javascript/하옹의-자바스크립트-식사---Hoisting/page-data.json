{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020/javascript/하옹의-자바스크립트-식사---Hoisting/","result":{"data":{"site":{"siteMetadata":{"title":"HaYoung's Log","author":"@Ha-Young","siteUrl":"https://ha-young.github.io","comment":{"utterances":"Ha-Young/my-blog"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"8cb1f29e-3ec6-5fd9-b65c-a100725c95e3","excerpt":"* 이 글은 MDN, Vanilla Coding Prep 강의자료, PoiemaWeb등 공신력있는 곳들을 참조한 글입니다. Hoisting? 우선, 영단어 의 원형인 라는 단어의 뜻부터 알아보자. 감아 올리기, (밧줄이나 장비를 이용하여) 들어끌어올리다 (화물장애인을 들어올리기 위한)승강 장치 이 처럼 Hoisting이라는 의미는 위로 끌어올리다 라는 뜻을 내포하고 있다. Javascript…","html":"<p>* 이 글은 <a href=\"https://developer.mozilla.org/es/\">MDN</a>, <a href=\"https://www.vanillacoding.co/\">Vanilla Coding Prep 강의자료</a>, <a href=\"https://poiemaweb.com/\">PoiemaWeb</a>등 공신력있는 곳들을 참조한 글입니다.</p>\n<h2 id=\"hoisting\" style=\"position:relative;\"><a href=\"#hoisting\" aria-label=\"hoisting permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hoisting?</h2>\n<p>우선, 영단어 <code class=\"language-text\">Hoisting</code>의 원형인 <code class=\"language-text\">Hoist</code>라는 단어의 뜻부터 알아보자.</p>\n<ul>\n<li>감아 올리기, (밧줄이나 장비를 이용하여) 들어[끌어]올리다</li>\n<li>(화물장애인을 들어올리기 위한)승강 장치</li>\n</ul>\n<p>이 처럼 Hoisting이라는 의미는 위로 끌어올리다 라는 뜻을 내포하고 있다.</p>\n<p>Javascript에서 이런 끌어올리다 라는 개념이 어디에 적용될 수 있을까?</p>\n<p>답은 바로 변수와 함수에 있다.</p>\n<p><code class=\"language-text\">Hoisting</code>은 Javascript 실행 컨텍스트(Execution Context)의 특성으로 변수와 함수가 선언 및 할당이 되어진 구문에서 <strong>자동적으로 선언부분만 분리되어 유효 스코프 내에서 최상단으로 끌어올려 이루어지는 작업</strong>을 말한다.</p>\n<p>예를 한번 들어보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>hoist<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">var</span> hoist <span class=\"token operator\">=</span> <span class=\"token string\">'Is true?'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위의 결과는 어떻게 될까?</p>\n<p>생각하기로는 당연히 애러가 나와야 정상이지만 Javascript의 실행 컨텍스트(Execution Context)의 특성으로 <code class=\"language-text\">func</code>함수의 <strong>스코프 최상단에서 모든 변수와 함수의 선언</strong>이 이루어진다.</p>\n<p>따라서 내부적으로 아래와 같이 동작하게 된다고 보면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> hoist\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>hoist<span class=\"token punctuation\">)</span>\n  hoist <span class=\"token operator\">=</span> <span class=\"token string\">'Is true?'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이 처럼 <strong>변수의 선언문만 분리되어서 스코프내 최상단으로 올라가는 현상</strong>을 <code class=\"language-text\">Hoisting</code>이라고 한다.</p>\n<blockquote>\n<p>사실, 실제로 이러한 식별자(변수, 함수)들이 끌어올려지는건 아니지만 편의상 이와같이 해석해도 무리는 없다.</p>\n<p>호이스팅을 제대로 이해하려면 실행컨텍스트, 자바스크립트 엔진, 컴파일 과정, 스코프, 자바스크립트의 메모리 관리 등을 모두 이해해야 한다고 한다.</p>\n</blockquote>\n<h2 id=\"함수선언식-함수표현식에서의-호이스팅\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%EC%84%A0%EC%96%B8%EC%8B%9D-%ED%95%A8%EC%88%98%ED%91%9C%ED%98%84%EC%8B%9D%EC%97%90%EC%84%9C%EC%9D%98-%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85\" aria-label=\"함수선언식 함수표현식에서의 호이스팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수선언식, 함수표현식에서의 호이스팅</h2>\n<p>이 호이스팅은 함수선언식과 함수표현식에 대해 동작이 다르게 작동한다.</p>\n<p>아래에서 어떻게 작동하는지 살펴보자.</p>\n<h3 id=\"함수표현식-function-expression\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%ED%91%9C%ED%98%84%EC%8B%9D-function-expression\" aria-label=\"함수표현식 function expression permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수표현식 (Function Expression)</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">sayHi</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>우선 이 결과는 error가 나오게 되는데, 그 이유는 sayHi가 <code class=\"language-text\">undefined</code>이기 때문.</p>\n<p>함수표현식은 변수가 선언되고 함수가 이 변수에 할당된다고 보면 된다.</p>\n<ol>\n<li><code class=\"language-text\">sayHi</code>변수 선언 후</li>\n<li><code class=\"language-text\">function () { }</code>의 익명함수를 할당</li>\n</ol>\n<p>그래서 호이스팅으로 선언문과 할당문이 분리가 되고, 선언문이 유효 스코프내 최상단으로 끌어올려지게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> sayHi\n\n<span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function-variable function\">sayHi</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이런식으로 내부적으로 작동되기 때문에 sayHi를 호출한 시점에서는 변수 할당이 되어있지 않으므로 <code class=\"language-text\">undefined</code>로 초기화 되어있는 상태. 그리고 <code class=\"language-text\">undefined</code>를 함수처럼 사용하면 <code class=\"language-text\">Uncaught TypeError: undefined is not a function</code> 애러가 발생한다.</p>\n<h3 id=\"함수선언식-function\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%EC%84%A0%EC%96%B8%EC%8B%9D-function\" aria-label=\"함수선언식 function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수선언식 (Function)</h3>\n<p>함수 선언식은 선언문과 할당문이 있는게 아닌, 그 자체로 선언문이기 때문에 호이스팅이 일어나도 선언문 그 자체로 끌어올려지기 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>함수표현식과 다르게 <code class=\"language-text\">sayHi()</code> 함수가 정상 작동하게되고, 이는 <code class=\"language-text\">sayHi()</code> 함수가 호이스팅 되었다는걸 의미한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>와 같다.</p>\n<h3 id=\"var-vs-함수선언식-vs-함수표현식\" style=\"position:relative;\"><a href=\"#var-vs-%ED%95%A8%EC%88%98%EC%84%A0%EC%96%B8%EC%8B%9D-vs-%ED%95%A8%EC%88%98%ED%91%9C%ED%98%84%EC%8B%9D\" aria-label=\"var vs 함수선언식 vs 함수표현식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>var VS 함수선언식 VS 함수표현식</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'hello'</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>hoist<span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> hi<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'undefined'</span>\n\n  <span class=\"token comment\">// hois 변수</span>\n  hoist <span class=\"token operator\">=</span> <span class=\"token string\">'Is true?'</span>\n\n  <span class=\"token comment\">// hi 함수표현식</span>\n  <span class=\"token function-variable function\">hi</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">hi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// hello 함수선언식</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'hello'</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>hoist<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'Is true?'</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> hi<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'function'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"let-const의-등장\" style=\"position:relative;\"><a href=\"#let-const%EC%9D%98-%EB%93%B1%EC%9E%A5\" aria-label=\"let const의 등장 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>let, const의 등장</h2>\n<p>위와같이 var 키워드로 변수 선언시 Hoisting 때문에 코드 흐름제어가 힘들어지기 시작했는데,</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// var count; 로 호이스팅되어 undefined로 초기화된 상태</span>\n<span class=\"token comment\">// ...</span>\ncount <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token comment\">// count에 10할당</span>\n\n<span class=\"token comment\">//...</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span></code></pre></div>\n<p>이와 같이 <u>순서가 꼬였을 경우나 중복된 이름의 변수명을 사용할 때</u>에 호이스팅으로 변수 선언문이 자동적으로 올라가게되어 <u>원래 의도했던 동작대로 작동이 안되거나 애러가 날 상황인데 그대로 진행되는 현상</u>이 발생한다.</p>\n<p>그렇기 때문에 개발자들이 코딩을 하면서 호이스팅 여부를 계속해서 판단해야되는 번거로움이 생겼고,</p>\n<p>이를 <strong>해결하기위해서 나타난게 let과 const 키워드</strong>이다.</p>\n<blockquote>\n<p>let과 const는 호이스팅뿐만 아니라 중복선언을 해결하고 블록스코프를 적용시키기위해 도입되었다.</p>\n</blockquote>\n<p>위의 코드를 let으로 선언하게될경우 어떻게 되는지 확인해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">count <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token comment\">// Error</span>\n\n<span class=\"token comment\">//...</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span></code></pre></div>\n<p>이처럼 let 키워드는 호이스팅되지 않기 때문에 개발자들이 호이스팅에 신경을 끄고 온전히 코드 흐름에 집중할 수 있게 되었다.</p>\n<h2 id=\"tdz-temporal-dead-zone\" style=\"position:relative;\"><a href=\"#tdz-temporal-dead-zone\" aria-label=\"tdz temporal dead zone permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TDZ (Temporal Dead Zone)</h2>\n<p>let키워드와 const키워드는 어떻게 호이스팅을 방지한 것일까?</p>\n<p>그 방법은 <strong><code class=\"language-text\">let</code>과 <code class=\"language-text\">const</code>로 선언된 변수는 TDZ가 적용된다는 것이다.</strong></p>\n<p>TDZ란 Temporal Dead Zone으로 직역하면 ‘임시적으로 죽어있는 공간’ 인데, 이는 <strong>변수를 사용할 수 없는, 변수를 사용하는 것을 비허용하는 개념상의 공간</strong>이다.</p>\n<p>이 TDZ영역은 <code class=\"language-text\">let</code>과 <code class=\"language-text\">const</code>로 선언된 변수에게만 생기고 변수가 할당(초기화)되기 전까지는 모두 TDZ로 정해진다.</p>\n<p>즉, <strong><code class=\"language-text\">let</code>과 <code class=\"language-text\">const</code>로 선언된 변수는 <u>호이스팅이 일어나지만</u> 할당(초기화)되기 전까지는 TDZ라는 영역으로 정해지기 때문에 선언과 참조가 불가능</strong>하게 된다.</p>\n<p>이것이 마치 호이스팅이 일어나지않은 것 처럼 보이게되는 것이다.</p>\n<p>우리는 선언된 변수가 호이스팅이 일어났지만 TDZ로 사용할 수 없다는 걸 <code class=\"language-text\">typeof</code> 연산자를 통해 확인해볼 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">typeof</span> notDefined <span class=\"token comment\">// 'undefined'</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">typeof</span> varKeyword <span class=\"token comment\">// 'undefined'</span>\n<span class=\"token keyword\">var</span> varKeyword</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">typeof</span> letKeyword <span class=\"token comment\">// ReferenceError : Cannot access 'letKeyword' before initialization</span>\n  <span class=\"token keyword\">let</span> letKeyword\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>아래 {}는 let키워드의 블록스코프를 지정해주기위해 사용했다.</p>\n</blockquote>\n<p>다음과 같이 선언되지 않거나 <code class=\"language-text\">var</code>로 선언한 변수는 <code class=\"language-text\">&#39;undefined&#39;</code> type이지만,\n<code class=\"language-text\">let</code>으로 선언한 TDZ가 생성되어 TDZ영역안에 있는 변수는 <code class=\"language-text\">ReferenceError</code>가 발생하고 있다.</p>\n<h2 id=\"호이스팅을-피하기-위한-방법\" style=\"position:relative;\"><a href=\"#%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85%EC%9D%84-%ED%94%BC%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%9C-%EB%B0%A9%EB%B2%95\" aria-label=\"호이스팅을 피하기 위한 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>호이스팅을 피하기 위한 방법</h2>\n<h3 id=\"변수--var-키워드-지양\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EC%88%98--var-%ED%82%A4%EC%9B%8C%EB%93%9C-%EC%A7%80%EC%96%91\" aria-label=\"변수  var 키워드 지양 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변수 : var 키워드 지양</h3>\n<p>호이스팅을 피하기위해 변수는 var키워드를 사용하지 말아야 한다.</p>\n<p><code class=\"language-text\">var</code>키워드는 함수스코프적용과 호이스팅이 발생한다는 문제점이 있으므로 사용하지 말고,\n<code class=\"language-text\">let</code>과 <code class=\"language-text\">const</code> 키워드를 사용해야 한다.</p>\n<h4 id=\"변수-선언-tip\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8-tip\" aria-label=\"변수 선언 tip permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변수 선언 Tip</h4>\n<p>변수를 선언할 때 우선 <code class=\"language-text\">const</code>로 선언을 하고 재할당이 된다면 <code class=\"language-text\">let</code>으로 변경하도록 하자.</p>\n<p>그 외 <code class=\"language-text\">var</code>키워드는 사용하지 않는다.</p>\n<h3 id=\"함수--함수표현식보다는-함수선언식\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98--%ED%95%A8%EC%88%98%ED%91%9C%ED%98%84%EC%8B%9D%EB%B3%B4%EB%8B%A4%EB%8A%94-%ED%95%A8%EC%88%98%EC%84%A0%EC%96%B8%EC%8B%9D\" aria-label=\"함수  함수표현식보다는 함수선언식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수 : 함수표현식보다는 함수선언식</h3>\n<p>함수는 변수와 다르게 함수 구문 전부가 호이스팅되는 것이 편리하다.</p>\n<p>이유는 함수를 사용함에 있어서 먼저 선언이 되고 함수가 호출, 사용하도록 하게 코딩을 한다는 것이 코드 가독성을 해칠수도 있고, 매우 번거로울 수 있다.</p>\n<p>그래서 함수 선언식을 통해 자연스럽게 코드에 집중 할 수 있도록 하는 편이 바람직하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"hoisting의-숨겨진-사실\" style=\"position:relative;\"><a href=\"#hoisting%EC%9D%98-%EC%88%A8%EA%B2%A8%EC%A7%84-%EC%82%AC%EC%8B%A4\" aria-label=\"hoisting의 숨겨진 사실 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hoisting의 숨겨진 사실</h2>\n<p>사실 호이스팅은 ES2015이전에 표준 명세에서 사용된 적이 없는 용어이다.</p>\n<p>하지만, 위와같은 Javascript 동작에 대해 쉽게 이해하기 위해 만들어진 개념으로,\n사실은 물리적으로 작성한 코드의 상단으로 옮겨지는 것이 아니라 위 처럼 변수, 함수 선언이 유효스코프 최상단으로 끌어올려진 후에 사용되는 것 처럼 보이지만 실제 매모리 상에서는 코드에서 입력한 위치 순서대로 들어가게 된다고 한다.</p>\n<p>컴파일 단계에서 메모리의 저장된 변수들을 보면, 코드에서 입력한 위치와 정확히 일치한 곳에 있다고 한다.</p>\n<p>호이스팅이란 단어는 <strong>Javascript 엔진 동작을 쉽게 이해하기위한 개념으로 알아두자.</strong></p>","tableOfContents":"<ul>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Hoisting/#hoisting\">Hoisting?</a></li>\n<li>\n<p><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Hoisting/#%ED%95%A8%EC%88%98%EC%84%A0%EC%96%B8%EC%8B%9D-%ED%95%A8%EC%88%98%ED%91%9C%ED%98%84%EC%8B%9D%EC%97%90%EC%84%9C%EC%9D%98-%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85\">함수선언식, 함수표현식에서의 호이스팅</a></p>\n<ul>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Hoisting/#%ED%95%A8%EC%88%98%ED%91%9C%ED%98%84%EC%8B%9D-function-expression\">함수표현식 (Function Expression)</a></li>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Hoisting/#%ED%95%A8%EC%88%98%EC%84%A0%EC%96%B8%EC%8B%9D-function\">함수선언식 (Function)</a></li>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Hoisting/#var-vs-%ED%95%A8%EC%88%98%EC%84%A0%EC%96%B8%EC%8B%9D-vs-%ED%95%A8%EC%88%98%ED%91%9C%ED%98%84%EC%8B%9D\">var VS 함수선언식 VS 함수표현식</a></li>\n</ul>\n</li>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Hoisting/#let-const%EC%9D%98-%EB%93%B1%EC%9E%A5\">let, const의 등장</a></li>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Hoisting/#tdz-temporal-dead-zone\">TDZ (Temporal Dead Zone)</a></li>\n<li>\n<p><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Hoisting/#%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85%EC%9D%84-%ED%94%BC%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%9C-%EB%B0%A9%EB%B2%95\">호이스팅을 피하기 위한 방법</a></p>\n<ul>\n<li>\n<p><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Hoisting/#%EB%B3%80%EC%88%98--var-%ED%82%A4%EC%9B%8C%EB%93%9C-%EC%A7%80%EC%96%91\">변수 : var 키워드 지양</a></p>\n<ul>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Hoisting/#%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8-tip\">변수 선언 Tip</a></li>\n</ul>\n</li>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Hoisting/#%ED%95%A8%EC%88%98--%ED%95%A8%EC%88%98%ED%91%9C%ED%98%84%EC%8B%9D%EB%B3%B4%EB%8B%A4%EB%8A%94-%ED%95%A8%EC%88%98%EC%84%A0%EC%96%B8%EC%8B%9D\">함수 : 함수표현식보다는 함수선언식</a></li>\n</ul>\n</li>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Hoisting/#hoisting%EC%9D%98-%EC%88%A8%EA%B2%A8%EC%A7%84-%EC%82%AC%EC%8B%A4\">Hoisting의 숨겨진 사실</a></li>\n</ul>","frontmatter":{"title":"하옹의 자바스크립트 식사 - Hoisting","date":"December 15, 2020"}}},"pageContext":{"slug":"/2020/javascript/하옹의-자바스크립트-식사---Hoisting/","previous":{"fields":{"slug":"/2020/vanillacoding_prep/vanillacoding-Prep-후기/"},"frontmatter":{"title":"전공자의 바닐라코딩 Prep 후기 - 바닐라코딩 Prep 9기","category":"vanilla coding","draft":false}},"next":{"fields":{"slug":"/2020/javascript/하옹의-자바스크립트-식사---Closure/하옹의-자바스크립트-식사---Closure/"},"frontmatter":{"title":"하옹의 자바스크립트 식사 - Closure","category":"javascript","draft":false}}}}}