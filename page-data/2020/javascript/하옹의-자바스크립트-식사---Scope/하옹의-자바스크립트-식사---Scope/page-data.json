{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020/javascript/하옹의-자바스크립트-식사---Scope/하옹의-자바스크립트-식사---Scope/","result":{"data":{"site":{"siteMetadata":{"title":"HaYoung's Log","author":"@Ha-Young","siteUrl":"https://ha-young.github.io","comment":{"utterances":"Ha-Young/my-blog"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"b0903824-bdd8-5b81-90ff-7df1a938f874","excerpt":"* 이 글은 MDN, Vanilla Coding Prep 강의자료, PoiemaWeb등 공신력있는 곳들을 참조한 글입니다. Scope? 위키백과에 따르면 프로그래밍에 있어서 Scope…","html":"<p>* 이 글은 <a href=\"https://developer.mozilla.org/es/\">MDN</a>, <a href=\"https://www.vanillacoding.co/\">Vanilla Coding Prep 강의자료</a>, <a href=\"https://poiemaweb.com/\">PoiemaWeb</a>등 공신력있는 곳들을 참조한 글입니다.</p>\n<h2 id=\"scope\" style=\"position:relative;\"><a href=\"#scope\" aria-label=\"scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope?</h2>\n<p><a href=\"https://ko.wikipedia.org/wiki/%EB%B3%80%EC%88%98_%EC%98%81%EC%97%AD\">위키백과</a>에 따르면 프로그래밍에 있어서 Scope는 변수가 유효성을 갖는 영역을 가리킨다고 한다.</p>\n<p>이 말인 즉슨, 각 식별자 즉, 변수는 선언시 사용할 수 있는 영역이 생기게 되는데, 이 영역에서만 변수를 사용할 수 있고 영역 밖이면 사용할 수 없다는 말이다.</p>\n<p>흔히 우리가 프로그래밍을 하면서 전역변수, 지역변수와 같은 말을 자주 듣게되는데, 전역 혹은 지역과 같은 말이 스코프에 해당되는 내용이라고 볼 수 있다.</p>\n<p>아래 상황을 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> identifier <span class=\"token operator\">=</span> <span class=\"token string\">'global'</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">scopeTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> identifier <span class=\"token operator\">=</span> <span class=\"token string\">'function'</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>identifier<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">scopeTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>identifier<span class=\"token punctuation\">)</span></code></pre></div>\n<p>다음과 같은 상황에서 <code class=\"language-text\">console.log(identifier)</code> identifier 변수의 값은 각각 어떻게 나올까? 그리고 Javascript에서는 어떻게 변수가 식별되는 것일까?</p>\n<p>이 답은 Scope에 있다.</p>\n<p>Scope를 알면 코드내에서 어떤 변수가 어떻게 적용되고 사용되는지 알 수 있는 대상 식별자를 찾아내는 규칙을 알 수 있게 된다.</p>\n<p>즉, <strong>Scope는 변수가 유효성을 갖는 영역이기도 하지만, 참조 대상 식별자를 찾아가는 규칙이라고도 할 수 있다.</strong></p>\n<blockquote>\n<p>참조 대상 식별자 : 대상을 식별할 수 있는 유일한 이름. 대표적으로 변수, 함수명 등이 있다.</p>\n</blockquote>\n<p>모든 Scope는 <strong>기본적으로 상위 Scope로 연결되어있다면 식별자 접근이 가능</strong>하나,\n연결되어있지않은 상위 스코프나 (chaining 되어있지 않다면) 하위스코프에는 접근할 수 없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> global <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> localFunc1 <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> localFunc2 <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>global<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 상위 스코프 접근</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>localFunc1<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 상위 스코프 접근</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>localFunc2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 동일 스코프 접근</span>\n  <span class=\"token punctuation\">}</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>global<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 상위 스코프 접근</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>localFunc1<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 동일 스코프 접근</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>localFunc2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Error. 하위 스코프 접근 불가</span>\n\n  <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>만약 이와같은 Scope가 없다면 대상을 식별할 수 있는 유일한 이름인 식별자가 중복으로 충돌을 일으켜 전체 코드 내에서 식별자를 하나밖에 쓸 수 없는 상황이 오게 될 것이다. 그럼 이전의 식별자가 없어지고 새로운 식별자로 덮어지는 등 코드 내부적으로 불편성과 심각한 오류를 야기할 수 있다.</p>\n<h2 id=\"javascript-scope\" style=\"position:relative;\"><a href=\"#javascript-scope\" aria-label=\"javascript scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Javascript Scope?</h2>\n<h3 id=\"스코프-단위--함수-스코프\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EC%BD%94%ED%94%84-%EB%8B%A8%EC%9C%84--%ED%95%A8%EC%88%98-%EC%8A%A4%EC%BD%94%ED%94%84\" aria-label=\"스코프 단위  함수 스코프 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스코프 단위 : 함수 스코프</h3>\n<p>Javascript Scope에 대해서 알고가려면 이 함수 스코프를 빼놓을 수 없다.</p>\n<p>일반적으로 프로그래밍에서는 블럭단위로 스코프가 결정되어 지지만,\nJavascript에서는 기본적으로 변수 선언방식 <code class=\"language-text\">var</code>키워드로 선언된 변수들은 모두 함수스코프가 적용된다.</p>\n<h4 id=\"함수-스코프-vs-블록-스코프\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98-%EC%8A%A4%EC%BD%94%ED%94%84-vs-%EB%B8%94%EB%A1%9D-%EC%8A%A4%EC%BD%94%ED%94%84\" aria-label=\"함수 스코프 vs 블록 스코프 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수 스코프 VS 블록 스코프</h4>\n<p>함수 스코프란 함수레벨로 변수가 선언되는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> global <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> localFuncional <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    localFuncional <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n    <span class=\"token keyword\">var</span> localBlocked <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n  <span class=\"token punctuation\">}</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>localFuncional<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 함수스코프 : 3 &lt;-> 블록스코프 : 2</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>localBlocked<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 함수스코프 : 4 &lt;-> 블록스코프 : Error</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드를 보면 함수스코프와 블록스코프를 적용시키는 차이점을 알 수 있다.</p>\n<p>함수 스코프는 함수 내부적으로 스코프가 적용되기 때문에 <code class=\"language-text\">if</code>문 내부에서도 블록의 영향을 받지않고 <code class=\"language-text\">localFunctional</code> 변수에 접근 가능하다. 또 변수가 블록 내부에 선언되어있더라도 같은 함수 내부이기 때문에 블록이 끝나도 그 변수는 계속 유지되어 사용 할 수 있다.</p>\n<h3 id=\"스코프-결정-방식--lexical-scope-렉시컬-스코프\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EC%BD%94%ED%94%84-%EA%B2%B0%EC%A0%95-%EB%B0%A9%EC%8B%9D--lexical-scope-%EB%A0%89%EC%8B%9C%EC%BB%AC-%EC%8A%A4%EC%BD%94%ED%94%84\" aria-label=\"스코프 결정 방식  lexical scope 렉시컬 스코프 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스코프 결정 방식 : Lexical Scope (렉시컬 스코프)</h3>\n<p>프로그래밍 언어는 스코프를 결정짓는 방식이 2가지 존재하는데, 렉시컬 스코프와 동적 스코프 이 두가지가 있다.\n자바스크립트는 렉시컬 스코프방식으로 스코프가 결정된다.</p>\n<p>렉시컬 스코프는 <strong>함수가 선언된 곳으로부터 변수 스코프영역(상위 스코프)가 결정되는 것이다.</strong></p>\n<p>함수를 생성, 선언한 곳으로부터 스코프가 결정되기 때문에 클로저와도 관련이 깊다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> variable <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> variable <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n  <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>variable<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\n<span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span></code></pre></div>\n<p><code class=\"language-text\">func1()</code> 함수가 실행되었을때 내부의 <code class=\"language-text\">func2()</code>함수는 선언된 곳이 <code class=\"language-text\">func1()</code> 내부가 아니기 때문에 <code class=\"language-text\">func1()</code>함수의 내부의 <code class=\"language-text\">variable</code>변수에 접근하지 않는다. <code class=\"language-text\">func2()</code>함수가 선언된 곳에서 그 상위 스코프인 전역의 <code class=\"language-text\">variable</code>을 참조하게된다.</p>\n<p>이것이 바로 Lexical scope 방식이다.</p>\n<h3 id=\"스코프-영역-구분\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EC%BD%94%ED%94%84-%EC%98%81%EC%97%AD-%EA%B5%AC%EB%B6%84\" aria-label=\"스코프 영역 구분 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스코프 영역 구분</h3>\n<p>Javascript에서는 스코프로 결정지어지는 영역이 크게 2가지로 나눌 수 있다.</p>\n<p>모두 어디에서 선언되었느냐가 기준이고, 선언된 영역에 따라 전역변수, 지역변수로 나눌 수 있다.</p>\n<p>지역스코프, 변수는 함수스코프 단위로 생성되었을때를 기준으로 한다.</p>\n<ul>\n<li>\n<p><strong>전역 스코프</strong> : 코드 <u>어느 지점에서나 접근가능</u></p>\n<ul>\n<li><strong>전역 변수</strong> : 전역 스코프에 선언된 변수이며 <u>어디에서나 접근 가능</u></li>\n</ul>\n</li>\n<li>\n<p><strong>지역 스코프</strong> : 함수를 통해 생성된 스코프. <u>해당함수 자신 또는 하위함수에서만 접근 가능</u></p>\n<ul>\n<li><strong>지역 변수</strong> : 함수 내에서 선언된 변수이며 <u>해당 함수 내부(동일 스코프)와 하위 스코프에서만 접근</u>할 수 있다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"var-vs-let-const\" style=\"position:relative;\"><a href=\"#var-vs-let-const\" aria-label=\"var vs let const permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>var vs let, const</h3>\n<p>Javascript의 변수선언방식의 근본인 var 키워드 이후에\nES2015에서 도임된 <strong>let, const를 사용하면 기존의 함수스코프 방식에서 블록스코프 방식으로</strong> 바꿀 수 있다.</p>\n<p>이외에 let, const는 호이스팅의 문제와 재선언의 문제도 해결되었다.</p>\n<h2 id=\"전역-스코프-global-scope\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%97%AD-%EC%8A%A4%EC%BD%94%ED%94%84-global-scope\" aria-label=\"전역 스코프 global scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전역 스코프 (Global Scope)</h2>\n<h3 id=\"전역객체-global-object\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EC%97%AD%EA%B0%9D%EC%B2%B4-global-object\" aria-label=\"전역객체 global object permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전역객체 (Global Object)</h3>\n<p>전역스코프에 대해서는 추가적으로 얘기를 더 해야되는데,\n그 이유는 바로 <code class=\"language-text\">전역객체(Global Object)</code> 와 관계가 있기 때문이다.</p>\n<blockquote>\n<p>Node.js 상에서는 Global Object이지만, Web에서는 Window 객체이다.</p>\n</blockquote>\n<p>어떤 관계가 있냐면, 전역스코프로 선언되는 변수들은 모두 전역객체의 <code class=\"language-text\">Property</code>로, 함수들은 <code class=\"language-text\">Method</code>로 들어가게 된다. (<code class=\"language-text\">var</code> 키워드 기준)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> global <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> local <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this is func, local value : '</span><span class=\"token punctuation\">,</span> local<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>global <span class=\"token operator\">===</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\nwindow<span class=\"token punctuation\">.</span>func <span class=\"token operator\">&amp;&amp;</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'this is func, local value : 1'</span></code></pre></div>\n<p>이를 통해 <code class=\"language-text\">전역 변수</code>와 <code class=\"language-text\">전역 함수</code>는 모두 <code class=\"language-text\">전역객체</code>의 속성이 된다는 것을 알 수 있다.</p>\n<blockquote>\n<p>let, const로 선언하면 전역객체에 속하지 않는다.</p>\n</blockquote>\n<p>하지만 전역 변수와 전역 함수는 전역객체의 속성이지만 <code class=\"language-text\">delete</code> 연산자로 삭제할 수 없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> global <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">hi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">delete</span> window<span class=\"token punctuation\">.</span>global <span class=\"token comment\">// false</span>\n<span class=\"token keyword\">delete</span> window<span class=\"token punctuation\">.</span>hi <span class=\"token comment\">// false</span></code></pre></div>\n<h3 id=\"암묵적-전역-implicit-global\" style=\"position:relative;\"><a href=\"#%EC%95%94%EB%AC%B5%EC%A0%81-%EC%A0%84%EC%97%AD-implicit-global\" aria-label=\"암묵적 전역 implicit global permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>암묵적 전역 (Implicit global)</h3>\n<p>만약 변수 선언 키워드를 붙이지않고 선언되지않은 식별자에 값을 할당한다면 어떻게 될까?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">global <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n<span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  local <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n  <span class=\"token function-variable function\">innerFunc</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'innerFunc'</span><span class=\"token punctuation\">,</span> global<span class=\"token punctuation\">,</span> local<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 즉시실행함수(IIFE) 로 실행</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>global <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>local <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\nwindow<span class=\"token punctuation\">.</span>innerFunc <span class=\"token operator\">&amp;&amp;</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">innerFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'innerFunc 0 1'</span></code></pre></div>\n<p>이렇게 변수 선언 키워드 없이 선언된 변수들을 <strong><code class=\"language-text\">암묵적 전역 변수</code></strong>라고 한다.</p>\n<p>어디에서 선언되었든 모두 <code class=\"language-text\">전역객체</code>의 <code class=\"language-text\">Property</code>로 들어가게 된다.</p>\n<p>하지만 <code class=\"language-text\">var</code> 키워드로 선언된 <code class=\"language-text\">전역변수</code>와 <code class=\"language-text\">전역함수</code>의 경우 <code class=\"language-text\">delete</code>로 제거할 수 없었지만\n이 <code class=\"language-text\">암묵적 전역변수</code>는 <code class=\"language-text\">delete</code> 연산자로 제거가 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">global <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n<span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  local <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n  <span class=\"token function-variable function\">innerFunc</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'innerFunc'</span><span class=\"token punctuation\">,</span> global<span class=\"token punctuation\">,</span> local<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 즉시실행함수(IIFE) 로 실행</span>\n\n<span class=\"token keyword\">delete</span> window<span class=\"token punctuation\">.</span>global <span class=\"token comment\">// true</span>\n<span class=\"token keyword\">delete</span> window<span class=\"token punctuation\">.</span>local <span class=\"token comment\">// true</span>\n<span class=\"token keyword\">delete</span> window<span class=\"token punctuation\">.</span>innerFunc <span class=\"token comment\">// true</span></code></pre></div>\n<h3 id=\"사용을-자제-권장되는-방식\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9%EC%9D%84-%EC%9E%90%EC%A0%9C-%EA%B6%8C%EC%9E%A5%EB%90%98%EB%8A%94-%EB%B0%A9%EC%8B%9D\" aria-label=\"사용을 자제 권장되는 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사용을 자제, 권장되는 방식</h3>\n<p>전역변수를 과도하게 생성할 경우, 변수 이름이 중복될 수 있고, 의도치 않게 재할당되어서 예측할 수 없는 오류를 야기시킬 수 있다.</p>\n<p>때문에 전역변수를 선언하는건 지양해야 한다.</p>\n<p>그래도 어쩔 수 없이 전역변수를 선언해야 되는 경우가 있는데,\n아래와 같은 방법으로 전역변수 객체를 선언하는방법이 있다.\n(네이밍은 자유)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> <span class=\"token constant\">GLOBAL</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token constant\">GLOBAL</span><span class=\"token punctuation\">.</span>hello <span class=\"token operator\">=</span> <span class=\"token string\">'hello, world'</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">GLOBAL</span><span class=\"token punctuation\">.</span>hello<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// hello, world</span></code></pre></div>\n<h2 id=\"scope-chain\" style=\"position:relative;\"><a href=\"#scope-chain\" aria-label=\"scope chain permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope Chain</h2>\n<p><img src=\".%5C%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Scope_ScopeChain.png\" alt=\"javascript _Scope\"></p>\n<p>위 사진을 보면, Scope가 어떻게 형성되는지 알 수 있다. 결과는 <code class=\"language-text\">&#39;Hello!Hi!Hey!&#39;</code></p>\n<p>앞서 말해왔던 상위, 하위 스코프라는 계념은 위 처럼 계층적으로 작동되는 것이라고 생각하면 되는데,\n가장 최상위에 <code class=\"language-text\">Global Scope</code>가 존재하고, 그 <code class=\"language-text\">Local Scope</code>인 <code class=\"language-text\">first() 함수 Scope</code>가, 또 그 아래 <code class=\"language-text\">second() 함수 Scope</code>가 존재하게 된다.</p>\n<p><strong>[상위]</strong> <code class=\"language-text\">Global scope</code> - <code class=\"language-text\">first() scope</code> - <code class=\"language-text\">second() scope</code> <strong>[하위]</strong></p>\n<p>당연히 <code class=\"language-text\">second()</code> 함수 내부에서는 상위 스코프들의 모든 변수들에 접근이 가능하고,\n<code class=\"language-text\">first()</code>함수에서는 상위인 <code class=\"language-text\">Global scope</code>에만 접근, 하위인 <code class=\"language-text\">second() scope</code>에는 접근 불가능하다.</p>\n<p><strong>오직 하위에서 상위의 스코프에 접근이 가능하고 상위에서 하위스코프에 접근은 불가능하다</strong></p>\n<p>그리고 이 <code class=\"language-text\">Scope Chain</code>은 변수를 찾을 때 상위 스코프로 순차적으로 탐색을 진행하게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'Hello!'</span>\n<span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'Bye!'</span>\n  <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token string\">'Hi!'</span>\n\n  <span class=\"token function\">second</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">second</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token string\">'Hey!'</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b <span class=\"token operator\">+</span> c<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 이미지와 다르게 <code class=\"language-text\">first()</code> 함수에 <code class=\"language-text\">var a</code>을 선언 하였다. 이럴경우에는 <code class=\"language-text\">second()</code> 함수가 실행되고 <code class=\"language-text\">a</code> 식별자를 찾을 때 상위스코프로 순차적으로 접근하므로 그 다음 상위스코프인 first()에 a 식별자를 출력하게 된다.</p>\n<p><strong>현재 스코프에 해당되는 식별자가 없을경우, 상위 스코프로 탐색을 시작하고 순차적으로 탐색을 진행, 발견하면 탐색을 멈춘다.</strong></p>","tableOfContents":"<ul>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Scope/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Scope/#scope\">Scope?</a></li>\n<li>\n<p><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Scope/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Scope/#javascript-scope\">Javascript Scope?</a></p>\n<ul>\n<li>\n<p><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Scope/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Scope/#%EC%8A%A4%EC%BD%94%ED%94%84-%EB%8B%A8%EC%9C%84--%ED%95%A8%EC%88%98-%EC%8A%A4%EC%BD%94%ED%94%84\">스코프 단위 : 함수 스코프</a></p>\n<ul>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Scope/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Scope/#%ED%95%A8%EC%88%98-%EC%8A%A4%EC%BD%94%ED%94%84-vs-%EB%B8%94%EB%A1%9D-%EC%8A%A4%EC%BD%94%ED%94%84\">함수 스코프 VS 블록 스코프</a></li>\n</ul>\n</li>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Scope/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Scope/#%EC%8A%A4%EC%BD%94%ED%94%84-%EA%B2%B0%EC%A0%95-%EB%B0%A9%EC%8B%9D--lexical-scope-%EB%A0%89%EC%8B%9C%EC%BB%AC-%EC%8A%A4%EC%BD%94%ED%94%84\">스코프 결정 방식 : Lexical Scope (렉시컬 스코프)</a></li>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Scope/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Scope/#%EC%8A%A4%EC%BD%94%ED%94%84-%EC%98%81%EC%97%AD-%EA%B5%AC%EB%B6%84\">스코프 영역 구분</a></li>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Scope/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Scope/#var-vs-let-const\">var vs let, const</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Scope/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Scope/#%EC%A0%84%EC%97%AD-%EC%8A%A4%EC%BD%94%ED%94%84-global-scope\">전역 스코프 (Global Scope)</a></p>\n<ul>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Scope/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Scope/#%EC%A0%84%EC%97%AD%EA%B0%9D%EC%B2%B4-global-object\">전역객체 (Global Object)</a></li>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Scope/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Scope/#%EC%95%94%EB%AC%B5%EC%A0%81-%EC%A0%84%EC%97%AD-implicit-global\">암묵적 전역 (Implicit global)</a></li>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Scope/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Scope/#%EC%82%AC%EC%9A%A9%EC%9D%84-%EC%9E%90%EC%A0%9C-%EA%B6%8C%EC%9E%A5%EB%90%98%EB%8A%94-%EB%B0%A9%EC%8B%9D\">사용을 자제, 권장되는 방식</a></li>\n</ul>\n</li>\n<li><a href=\"/2020/javascript/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Scope/%ED%95%98%EC%98%B9%EC%9D%98-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%9D%EC%82%AC---Scope/#scope-chain\">Scope Chain</a></li>\n</ul>","frontmatter":{"title":"하옹의 자바스크립트 식사 - Scope","date":"December 03, 2020"}}},"pageContext":{"slug":"/2020/javascript/하옹의-자바스크립트-식사---Scope/하옹의-자바스크립트-식사---Scope/","previous":{"fields":{"slug":"/2020/vanillacoding_prep/Prep 9주차 수요일 오피스아워 정리/"},"frontmatter":{"title":"바닐라코딩 Prep 9주차 수요일 오피스아워 정리","category":"vanilla coding","draft":false}},"next":{"fields":{"slug":"/2020/vanillacoding_prep/바닐라코딩 Prep 과제 코드리뷰 모음/"},"frontmatter":{"title":"바닐라코딩 Prep 과제 코드리뷰 모음","category":"vanilla coding","draft":false}}}}}