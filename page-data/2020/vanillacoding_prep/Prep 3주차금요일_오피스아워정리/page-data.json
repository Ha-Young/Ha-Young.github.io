{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020/vanillacoding_prep/Prep 3주차금요일_오피스아워정리/","result":{"data":{"site":{"siteMetadata":{"title":"HaYoung's Log","author":"@Ha-Young","siteUrl":"https://ha-young.github.io","comment":{"utterances":"Ha-Young/my-blog"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"d42c1f0a-462d-5300-bd99-999deb78883a","excerpt":"Q. 이번과제 수정사항 생기면 계속 재 풀이하는데? 이럴때는 개발을 위해서 네비게이터를 따로 만들어 둔다던지 등의 조작을 한다. 어떠한 기능이나 프로세스를 개발 하고자 할 때 개발자 자체적으로 테스트를 진행 한다면(단위 테스트) 개발, 테스트를 위해서 해당 기능이나 프로세스에 포함되지는 않더라도 개발, 테스트만을 위한 함수라던지 프로세스를 만들어서 기능 확인, 테스트를 한다. 변수 네이밍에 Array 단어? 보통 변수 네이밍에 Array…","html":"<h2 id=\"q-이번과제-수정사항-생기면-계속-재-풀이하는데\" style=\"position:relative;\"><a href=\"#q-%EC%9D%B4%EB%B2%88%EA%B3%BC%EC%A0%9C-%EC%88%98%EC%A0%95%EC%82%AC%ED%95%AD-%EC%83%9D%EA%B8%B0%EB%A9%B4-%EA%B3%84%EC%86%8D-%EC%9E%AC-%ED%92%80%EC%9D%B4%ED%95%98%EB%8A%94%EB%8D%B0\" aria-label=\"q 이번과제 수정사항 생기면 계속 재 풀이하는데 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q. 이번과제 수정사항 생기면 계속 재 풀이하는데?</h2>\n<p>이럴때는 개발을 위해서 네비게이터를 따로 만들어 둔다던지 등의 조작을 한다.</p>\n<p>어떠한 기능이나 프로세스를 개발 하고자 할 때 개발자 자체적으로 테스트를 진행 한다면(단위 테스트) 개발, 테스트를 위해서 <strong>해당 기능이나 프로세스에 포함되지는 않더라도 개발, 테스트만을 위한 함수라던지 프로세스를 만들어서 기능 확인, 테스트를 한다.</strong></p>\n<h2 id=\"변수-네이밍에-array-단어\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EC%88%98-%EB%84%A4%EC%9D%B4%EB%B0%8D%EC%97%90-array-%EB%8B%A8%EC%96%B4\" aria-label=\"변수 네이밍에 array 단어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변수 네이밍에 Array 단어?</h2>\n<p>보통 변수 네이밍에 Array 단어는 잘 넣지 않는다.</p>\n<p><code class=\"language-text\">someArray</code> 라고 하기 보다는 <code class=\"language-text\">someElements</code> <code class=\"language-text\">someList</code> 와 같이 복수표현이나 List로 나타내는 것이 좋다.</p>\n<h2 id=\"변수-네이밍-너무-디테일\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EC%88%98-%EB%84%A4%EC%9D%B4%EB%B0%8D-%EB%84%88%EB%AC%B4-%EB%94%94%ED%85%8C%EC%9D%BC\" aria-label=\"변수 네이밍 너무 디테일 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변수 네이밍 너무 디테일?</h2>\n<p>네이밍에 구현방식이나 너무 디테일하게 들어가도 좋지 않다.</p>\n<p>어떠한 기능을 하는지만 알 수 있도록 네이밍을 하고 너무 디테일하게 들어가면 수정사항이 발생했을 때 기능은 같더라도 내부 구현방식이 달라질 수 있기 때문.</p>\n<h2 id=\"q-elementappendchild-vs-elementinnerhtml\" style=\"position:relative;\"><a href=\"#q-elementappendchild-vs-elementinnerhtml\" aria-label=\"q elementappendchild vs elementinnerhtml permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q. element.appendChild VS element.innerHTML</h2>\n<blockquote>\n<p>둘 중에 어떠한 방식으로 하는게 더 나을까?</p>\n</blockquote>\n<p>정답은 없다.</p>\n<p>상황, 문맥에 따라서 결정을 하면 된다.</p>\n<p>그렇기 때문에 두 방법이 어떻게 다른지, 어떠한 방식으로 작동되는지를 알고 있어야 된다.</p>\n<h4 id=\"다른-예시로-stringprototypesubstr-vs-stringprototypesubstring\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%EB%A5%B8-%EC%98%88%EC%8B%9C%EB%A1%9C-stringprototypesubstr-vs-stringprototypesubstring\" aria-label=\"다른 예시로 stringprototypesubstr vs stringprototypesubstring permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다른 예시로 string.prototype.substr() VS string.prototype.substring()</h4>\n<p>이런 비교는 무조건 substring()인데, 이유는 substr()은 곧 없어질 (더이상 지원이 없는) 함수이기 때문.</p>\n<p><strong>두 함수나 기능을 비교할 때 장단점이 각각 있는거라면, 장단점에 맞춰서 상황에 맞게 쓰면 된다.</strong></p>\n<h2 id=\"css-작성시-flex-grid-지원\" style=\"position:relative;\"><a href=\"#css-%EC%9E%91%EC%84%B1%EC%8B%9C-flex-grid-%EC%A7%80%EC%9B%90\" aria-label=\"css 작성시 flex grid 지원 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>css 작성시 flex, grid 지원?</h2>\n<p>css 작성할 때 flex, grid와 같은 최신 css를 지원하지 않는 브라우저가 있다.</p>\n<p>하지만, 우리가 쓸 브라우저는 최신 브라우저들일 것이기 때문에 걱정안해도 된다.</p>\n<h2 id=\"q-css-중복되는-요소\" style=\"position:relative;\"><a href=\"#q-css-%EC%A4%91%EB%B3%B5%EB%90%98%EB%8A%94-%EC%9A%94%EC%86%8C\" aria-label=\"q css 중복되는 요소 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q. css 중복되는 요소?</h2>\n<p>css에 중복되는 요소가 있는데 </p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.className</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>와 같이 중복되는 요소는 공통적인 클래스로 빼내서 사용해도 된다. (좋은 방법!)</p>\n<p>나중에는 css module등의 방법들이 있다.</p>\n<h2 id=\"q-css작성시-bem-방식\" style=\"position:relative;\"><a href=\"#q-css%EC%9E%91%EC%84%B1%EC%8B%9C-bem-%EB%B0%A9%EC%8B%9D\" aria-label=\"q css작성시 bem 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q. css작성시 BEM 방식?</h2>\n<p>BEM 쓰는 회사는 잘 없다. (최근에는 없다고 봐도 무방)</p>\n<p>옛날에 hot 할 때가 있었는데 지금은 굳이 안봐도 될듯.</p>\n<p>요즘에는 css를 js에서 쓸 수도 있고 ( <code class=\"language-text\">css in js</code> ), <code class=\"language-text\">css module</code> 등 다양한 방식이 있다.</p>\n<p>이것도 각각의 장단점이 있기 때문에 어떠한 방식이 제일 좋다 라고 할 수는 없고 본인이 편한 것, 회사에 맞게 사용하면 된다.</p>\n<h2 id=\"etc\" style=\"position:relative;\"><a href=\"#etc\" aria-label=\"etc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ETC</h2>\n<ul>\n<li>\n<p>개선사항할만한 사항이 있다면 기억해두자! 마지막 설문조사에 쓰자.</p>\n<ul>\n<li>없다면 개선할만한게 뭐가있을까 생각해보는것도…</li>\n</ul>\n</li>\n<li>매 기수 바뀌는 진행방식. 다음엔 어떻게 바뀔까?</li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"/2020/vanillacoding_prep/Prep%203%EC%A3%BC%EC%B0%A8%EA%B8%88%EC%9A%94%EC%9D%BC_%EC%98%A4%ED%94%BC%EC%8A%A4%EC%95%84%EC%9B%8C%EC%A0%95%EB%A6%AC/#q-%EC%9D%B4%EB%B2%88%EA%B3%BC%EC%A0%9C-%EC%88%98%EC%A0%95%EC%82%AC%ED%95%AD-%EC%83%9D%EA%B8%B0%EB%A9%B4-%EA%B3%84%EC%86%8D-%EC%9E%AC-%ED%92%80%EC%9D%B4%ED%95%98%EB%8A%94%EB%8D%B0\">Q. 이번과제 수정사항 생기면 계속 재 풀이하는데?</a></li>\n<li><a href=\"/2020/vanillacoding_prep/Prep%203%EC%A3%BC%EC%B0%A8%EA%B8%88%EC%9A%94%EC%9D%BC_%EC%98%A4%ED%94%BC%EC%8A%A4%EC%95%84%EC%9B%8C%EC%A0%95%EB%A6%AC/#%EB%B3%80%EC%88%98-%EB%84%A4%EC%9D%B4%EB%B0%8D%EC%97%90-array-%EB%8B%A8%EC%96%B4\">변수 네이밍에 Array 단어?</a></li>\n<li><a href=\"/2020/vanillacoding_prep/Prep%203%EC%A3%BC%EC%B0%A8%EA%B8%88%EC%9A%94%EC%9D%BC_%EC%98%A4%ED%94%BC%EC%8A%A4%EC%95%84%EC%9B%8C%EC%A0%95%EB%A6%AC/#%EB%B3%80%EC%88%98-%EB%84%A4%EC%9D%B4%EB%B0%8D-%EB%84%88%EB%AC%B4-%EB%94%94%ED%85%8C%EC%9D%BC\">변수 네이밍 너무 디테일?</a></li>\n<li>\n<p><a href=\"/2020/vanillacoding_prep/Prep%203%EC%A3%BC%EC%B0%A8%EA%B8%88%EC%9A%94%EC%9D%BC_%EC%98%A4%ED%94%BC%EC%8A%A4%EC%95%84%EC%9B%8C%EC%A0%95%EB%A6%AC/#q-elementappendchild-vs-elementinnerhtml\">Q. element.appendChild VS element.innerHTML</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/2020/vanillacoding_prep/Prep%203%EC%A3%BC%EC%B0%A8%EA%B8%88%EC%9A%94%EC%9D%BC_%EC%98%A4%ED%94%BC%EC%8A%A4%EC%95%84%EC%9B%8C%EC%A0%95%EB%A6%AC/#%EB%8B%A4%EB%A5%B8-%EC%98%88%EC%8B%9C%EB%A1%9C-stringprototypesubstr-vs-stringprototypesubstring\">다른 예시로 string.prototype.substr() VS string.prototype.substring()</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"/2020/vanillacoding_prep/Prep%203%EC%A3%BC%EC%B0%A8%EA%B8%88%EC%9A%94%EC%9D%BC_%EC%98%A4%ED%94%BC%EC%8A%A4%EC%95%84%EC%9B%8C%EC%A0%95%EB%A6%AC/#css-%EC%9E%91%EC%84%B1%EC%8B%9C-flex-grid-%EC%A7%80%EC%9B%90\">css 작성시 flex, grid 지원?</a></li>\n<li><a href=\"/2020/vanillacoding_prep/Prep%203%EC%A3%BC%EC%B0%A8%EA%B8%88%EC%9A%94%EC%9D%BC_%EC%98%A4%ED%94%BC%EC%8A%A4%EC%95%84%EC%9B%8C%EC%A0%95%EB%A6%AC/#q-css-%EC%A4%91%EB%B3%B5%EB%90%98%EB%8A%94-%EC%9A%94%EC%86%8C\">Q. css 중복되는 요소?</a></li>\n<li><a href=\"/2020/vanillacoding_prep/Prep%203%EC%A3%BC%EC%B0%A8%EA%B8%88%EC%9A%94%EC%9D%BC_%EC%98%A4%ED%94%BC%EC%8A%A4%EC%95%84%EC%9B%8C%EC%A0%95%EB%A6%AC/#q-css%EC%9E%91%EC%84%B1%EC%8B%9C-bem-%EB%B0%A9%EC%8B%9D\">Q. css작성시 BEM 방식?</a></li>\n<li><a href=\"/2020/vanillacoding_prep/Prep%203%EC%A3%BC%EC%B0%A8%EA%B8%88%EC%9A%94%EC%9D%BC_%EC%98%A4%ED%94%BC%EC%8A%A4%EC%95%84%EC%9B%8C%EC%A0%95%EB%A6%AC/#etc\">ETC</a></li>\n</ul>","frontmatter":{"title":"바닐라코딩 Prep 3주차 금요일 오피스아워 정리","date":"October 21, 2020"}}},"pageContext":{"slug":"/2020/vanillacoding_prep/Prep 3주차금요일_오피스아워정리/","previous":{"fields":{"slug":"/2020/vanillacoding_prep/Prep 3주차월요일_오피스아워정리/"},"frontmatter":{"title":"바닐라코딩 Prep 3주차 월요일 오피스아워 정리","category":"vanilla coding","draft":false}},"next":{"fields":{"slug":"/2020/vanillacoding_prep/Prep 3주차수요일_오피스아워정리/"},"frontmatter":{"title":"바닐라코딩 Prep 3주차 수요일 오피스아워 정리","category":"vanilla coding","draft":false}}}}}