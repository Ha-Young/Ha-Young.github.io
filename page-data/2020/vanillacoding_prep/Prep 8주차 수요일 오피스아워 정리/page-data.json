{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020/vanillacoding_prep/Prep 8주차 수요일 오피스아워 정리/","result":{"data":{"site":{"siteMetadata":{"title":"HaYoung's Log","author":"@Ha-Young","siteUrl":"https://ha-young.github.io","comment":{"utterances":"Ha-Young/my-blog"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"601eb36e-900e-5aa7-aa98-66d12376fffa","excerpt":"비동기 어렵다. 반복적으로 비동기를 다루면서 적응하면 된다! Javascript를 쓰면 비동기에 대해 자주 접하게 될것이다. Javascript를 쓰려면 비동기에 대한 이해는 필수! 동기 Synchronous. 비동기가 아닌 것. 작업을 순서대로 실시 (완료하면 다음 작업) 이때까지 우리가 봐온 것들의 대부분의 코드가 동기적으로 작동하는 코드 비동기 Asynchronous…","html":"<h2 id=\"비동기\" style=\"position:relative;\"><a href=\"#%EB%B9%84%EB%8F%99%EA%B8%B0\" aria-label=\"비동기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비동기</h2>\n<p>어렵다.</p>\n<p>반복적으로 비동기를 다루면서 적응하면 된다!</p>\n<p>Javascript를 쓰면 비동기에 대해 자주 접하게 될것이다.</p>\n<p><strong>Javascript를 쓰려면 비동기에 대한 이해는 필수!</strong></p>\n<h3 id=\"동기\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EA%B8%B0\" aria-label=\"동기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동기</h3>\n<p>Synchronous. 비동기가 아닌 것.</p>\n<p>작업을 순서대로 실시 (완료하면 다음 작업)</p>\n<p>이때까지 우리가 봐온 것들의 대부분의 코드가 동기적으로 작동하는 코드</p>\n<h3 id=\"비동기-1\" style=\"position:relative;\"><a href=\"#%EB%B9%84%EB%8F%99%EA%B8%B0-1\" aria-label=\"비동기 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비동기</h3>\n<p>Asynchronous. 동기가 아닌 것.</p>\n<p>작업을 동시에 실시 (다음작업이 들어오면 함께 실시)</p>\n<p>비동기 구현을 하려면 비동기적으로 작동하는 함수를 사용하면 된다.</p>\n<p>setTimeout이 대표적.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'start'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'async'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>비동기적으로 작동하는 함수들</p>\n<ul>\n<li>setTimeout</li>\n<li>setInterval</li>\n<li>fetch</li>\n<li>XMLHttpRequest</li>\n<li>…</li>\n</ul>\n<p>fetch와 같은 다른 곳에 값을 받아오는 비동기 작업은 완료가 언제 될지 모른다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'start'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> id <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> id <span class=\"token operator\">&lt;=</span> <span class=\"token number\">120</span><span class=\"token punctuation\">;</span> id<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://vanillacoding.surge.sh/quiz/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.json</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> 완료!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위 코드를 보면 우리가 fetch 요청을 보낸 것은 id 100에서 120까지 순서대로 요청을 하였지만, 작업완료시에 동작 <code class=\"language-text\">then</code>은 어떤 id의 순서로 작동될지는 모른다.</p>\n<h2 id=\"event-loop\" style=\"position:relative;\"><a href=\"#event-loop\" aria-label=\"event loop permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Event Loop</h2>\n<p>강의자료의 <code class=\"language-text\">Event Loop</code>은 간략하게만 나와있다. 궁금하면 더 찾아보자. 양이 방대할 것.</p>\n<p>지금 자세히 알 필요는 없고 나중에 비동기 작업을 계속 하다보면 <code class=\"language-text\">Event Loop</code>에 대해 조사해야될 때가 있다. 그 때 봐도 괜찮다.</p>\n<p>하지만, 지금 <code class=\"language-text\">Event Loop</code>은 아래 코드가 어떻게 작동하는지 정도는 알아야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'start'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'after 0 sec'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//start</span>\n<span class=\"token comment\">//end</span>\n<span class=\"token comment\">//after 0 sec</span></code></pre></div>\n<p><code class=\"language-text\">foo</code> 함수가 0초뒤에 실행되서</p>\n<p>start\nafter 0 sec\nend</p>\n<p>의 순서로 출력된다고 많이 생각하지만 아님.</p>\n<p>start\nend\nafter 0 sec</p>\n<p>의 순서로 실행된다.</p>\n<h4 id=\"왜\" style=\"position:relative;\"><a href=\"#%EC%99%9C\" aria-label=\"왜 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>왜?</h4>\n<p><code class=\"language-text\">Event Loop</code> 때문.</p>\n<p><code class=\"language-text\">setTimeout</code>의 작업은 <code class=\"language-text\">callback queue</code>에 들어가고,</p>\n<p>이 <code class=\"language-text\">callback queue</code>에 들어간 작업은 <code class=\"language-text\">call stack</code>이 비워져야만 <code class=\"language-text\">callback queue</code>에서 꺼내져 사용되기 때문.</p>\n<p><code class=\"language-text\">Event Loop</code>의 시각자료는 <strong>바닐라코딩 강의자료에 있는 <a href=\"http://latentflip.com/loupe/\">Event Loop Visualizer</a> 에서 꼭 확인해보자. (강추)</strong></p>\n<p>영상도 꼭 보자.</p>\n<h2 id=\"q-싱글스레드-자바스크립트-비동기-가능-이유\" style=\"position:relative;\"><a href=\"#q-%EC%8B%B1%EA%B8%80%EC%8A%A4%EB%A0%88%EB%93%9C-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%B9%84%EB%8F%99%EA%B8%B0-%EA%B0%80%EB%8A%A5-%EC%9D%B4%EC%9C%A0\" aria-label=\"q 싱글스레드 자바스크립트 비동기 가능 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q. 싱글스레드 자바스크립트 비동기 가능 이유?</h2>\n<p><strong>싱글스레드 언어인 자바스크립트에서 비동기 구현이 가능한 이유</strong>는 비동기 함수가 자바스크립트가 아니기 때문?</p>\n<p>-> 맞다. 비동기 함수는 자바스크립트가 아니라, <strong>WEB API</strong>\n또, callback queue 등의 존재들(<code class=\"language-text\">Event Loop 형성</code>) 때문에 비동기 구현이 가능한 것.</p>\n<h2 id=\"etc\" style=\"position:relative;\"><a href=\"#etc\" aria-label=\"etc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ETC</h2>\n<ul>\n<li>\n<p>마지막 주 강의 영상 올라왔습니다.</p>\n<ul>\n<li>마지막 주 강의 영상은 숨돌리는? 영상</li>\n<li>Promise는 비동기에 대한 이해를 전제로 하는거라 당장 이해 못해도 상관없다. <strong>하지만 매우중요!</strong></li>\n</ul>\n</li>\n<li>금요일에 이번주 과제 Parallel함수 설명 예정</li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/2020/vanillacoding_prep/Prep%208%EC%A3%BC%EC%B0%A8%20%EC%88%98%EC%9A%94%EC%9D%BC%20%EC%98%A4%ED%94%BC%EC%8A%A4%EC%95%84%EC%9B%8C%20%EC%A0%95%EB%A6%AC/#%EB%B9%84%EB%8F%99%EA%B8%B0\">비동기</a></p>\n<ul>\n<li><a href=\"/2020/vanillacoding_prep/Prep%208%EC%A3%BC%EC%B0%A8%20%EC%88%98%EC%9A%94%EC%9D%BC%20%EC%98%A4%ED%94%BC%EC%8A%A4%EC%95%84%EC%9B%8C%20%EC%A0%95%EB%A6%AC/#%EB%8F%99%EA%B8%B0\">동기</a></li>\n<li><a href=\"/2020/vanillacoding_prep/Prep%208%EC%A3%BC%EC%B0%A8%20%EC%88%98%EC%9A%94%EC%9D%BC%20%EC%98%A4%ED%94%BC%EC%8A%A4%EC%95%84%EC%9B%8C%20%EC%A0%95%EB%A6%AC/#%EB%B9%84%EB%8F%99%EA%B8%B0-1\">비동기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/2020/vanillacoding_prep/Prep%208%EC%A3%BC%EC%B0%A8%20%EC%88%98%EC%9A%94%EC%9D%BC%20%EC%98%A4%ED%94%BC%EC%8A%A4%EC%95%84%EC%9B%8C%20%EC%A0%95%EB%A6%AC/#event-loop\">Event Loop</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/2020/vanillacoding_prep/Prep%208%EC%A3%BC%EC%B0%A8%20%EC%88%98%EC%9A%94%EC%9D%BC%20%EC%98%A4%ED%94%BC%EC%8A%A4%EC%95%84%EC%9B%8C%20%EC%A0%95%EB%A6%AC/#%EC%99%9C\">왜?</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"/2020/vanillacoding_prep/Prep%208%EC%A3%BC%EC%B0%A8%20%EC%88%98%EC%9A%94%EC%9D%BC%20%EC%98%A4%ED%94%BC%EC%8A%A4%EC%95%84%EC%9B%8C%20%EC%A0%95%EB%A6%AC/#q-%EC%8B%B1%EA%B8%80%EC%8A%A4%EB%A0%88%EB%93%9C-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%B9%84%EB%8F%99%EA%B8%B0-%EA%B0%80%EB%8A%A5-%EC%9D%B4%EC%9C%A0\">Q. 싱글스레드 자바스크립트 비동기 가능 이유?</a></li>\n<li><a href=\"/2020/vanillacoding_prep/Prep%208%EC%A3%BC%EC%B0%A8%20%EC%88%98%EC%9A%94%EC%9D%BC%20%EC%98%A4%ED%94%BC%EC%8A%A4%EC%95%84%EC%9B%8C%20%EC%A0%95%EB%A6%AC/#etc\">ETC</a></li>\n</ul>","frontmatter":{"title":"바닐라코딩 Prep 8주차 수요일 오피스아워 정리","date":"November 25, 2020"}}},"pageContext":{"slug":"/2020/vanillacoding_prep/Prep 8주차 수요일 오피스아워 정리/","previous":{"fields":{"slug":"/2020/vanillacoding_prep/Prep 8주차 월요일 오피스아워 정리/"},"frontmatter":{"title":"바닐라코딩 Prep 8주차 월요일 오피스아워 정리","category":"vanilla coding","draft":false}},"next":{"fields":{"slug":"/2020/vanillacoding_prep/Prep 8주차 금요일 오피스아워 정리/"},"frontmatter":{"title":"바닐라코딩 Prep 8주차 금요일 오피스아워 정리","category":"vanilla coding","draft":false}}}}}