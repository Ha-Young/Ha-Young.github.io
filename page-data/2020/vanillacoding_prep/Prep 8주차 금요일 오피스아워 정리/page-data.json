{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020/vanillacoding_prep/Prep 8주차 금요일 오피스아워 정리/","result":{"data":{"site":{"siteMetadata":{"title":"HaYoung's Log","author":"@Ha-Young","siteUrl":"https://ha-young.github.io","comment":{"utterances":"Ha-Young/my-blog"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"9da7129e-3735-57dd-bceb-6e2071b6b78b","excerpt":"이번주 과제 리뷰 어떤게 어려웠나요? 첫 시작 뭘 어떻게 해야되는거지? 디버거 잘 안됨 작업 완료순서랑 다르게 tasks 순서대로 results에 저장 tasks가 뭔지 몰라서 여러파일 왔다갔다하는 것 finallCallback 호출하는 시점 parallel 설명 (가장 간단하게 구현할 수 있는 방법) 병렬적인 비동기처리를 도와주는 Util함수 10초 걸리는 일을 10번해야된다고 하면 직렬처리를 하면 10 * 10으로 100초를 소비하는 반면, 병렬로 처리하면 1…","html":"<h2 id=\"이번주-과제-리뷰\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EB%B2%88%EC%A3%BC-%EA%B3%BC%EC%A0%9C-%EB%A6%AC%EB%B7%B0\" aria-label=\"이번주 과제 리뷰 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이번주 과제 리뷰</h2>\n<h3 id=\"어떤게-어려웠나요\" style=\"position:relative;\"><a href=\"#%EC%96%B4%EB%96%A4%EA%B2%8C-%EC%96%B4%EB%A0%A4%EC%9B%A0%EB%82%98%EC%9A%94\" aria-label=\"어떤게 어려웠나요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>어떤게 어려웠나요?</h3>\n<ul>\n<li>\n<p>첫 시작</p>\n<ul>\n<li>뭘 어떻게 해야되는거지?</li>\n</ul>\n</li>\n<li>디버거 잘 안됨</li>\n<li>작업 완료순서랑 다르게 tasks 순서대로 results에 저장</li>\n<li>tasks가 뭔지 몰라서 여러파일 왔다갔다하는 것</li>\n<li>finallCallback 호출하는 시점</li>\n</ul>\n<h3 id=\"parallel-설명-가장-간단하게-구현할-수-있는-방법\" style=\"position:relative;\"><a href=\"#parallel-%EC%84%A4%EB%AA%85-%EA%B0%80%EC%9E%A5-%EA%B0%84%EB%8B%A8%ED%95%98%EA%B2%8C-%EA%B5%AC%ED%98%84%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"parallel 설명 가장 간단하게 구현할 수 있는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>parallel 설명 (가장 간단하게 구현할 수 있는 방법)</h3>\n<p><strong>병렬적인</strong> 비동기처리를 도와주는 Util함수</p>\n<p>10초 걸리는 일을 10번해야된다고 하면 직렬처리를 하면 10 * 10으로 100초를 소비하는 반면,</p>\n<p>병렬로 처리하면 10번의 작업을 동시에 처리를 해서 10초만에 처리 할 수 있다.</p>\n<ul>\n<li>첫번째 인자 : <code class=\"language-text\">tasks</code> 배열 (함수들이 담긴)</li>\n<li>두번째 인자 : <code class=\"language-text\">finalCallback</code> 함수</li>\n</ul>\n<p><code class=\"language-text\">tasks</code> 배열에 담긴 함수들이 병렬적으로 실행되도록 해주고 마지막으로 <code class=\"language-text\">finalCallback</code> 함수를 실행하도록 해줘야 한다.</p>\n<ol>\n<li><code class=\"language-text\">tasks</code> 배열로 들어온 함수들을 병렬적으로 실행되도록 해줘야 한다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">parallel</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tasks<span class=\"token punctuation\">,</span> finalCallback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  tasks<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  tasks<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  tasks<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  tasks<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>와 같이 나열해보면 아래와 같이 표현할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">parallel</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tasks<span class=\"token punctuation\">,</span> finalCallback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> tasks<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> task <span class=\"token operator\">=</span> tasks<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token function\">task</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"2\">\n<li>\n<p>각 실행시킨 함수의 결과들을 배열에 각 순서대로 넣어줘야 한다.</p>\n<p>​ -> 각 함수에 매개변수로 받는 <code class=\"language-text\">callback</code>함수 : tasks에 담겨있는 비동기 작업을 하는 함수들의 인자값으로 주어지는데, 이는 비동기 작업을 하는 함수가 인자로 받아서 작업을 완료했을 때 호출하여 작업이 끝났다는 것을 알려주는 함수.</p>\n<p>즉, 이 <code class=\"language-text\">callback</code> 인자를 이용해야 한다.</p>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">parallel</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tasks<span class=\"token punctuation\">,</span> finalCallback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> tasks<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> task <span class=\"token operator\">=</span> tasks<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token function\">task</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">taskDone</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">taskResult</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> taskResult\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다음과 같은 함수를 통해 각 함수들이 끝나는 순서대로 <code class=\"language-text\">taskDone</code>이라는 함수가 실행된다. (이 <code class=\"language-text\">taskDone</code> 함수는 반복문이 돌 때마다 새로 생성되는 것 유의!)</p>\n<ol start=\"3\">\n<li>\n<p><code class=\"language-text\">finalCallback</code>함수 사용은 끝나는 시점을 체크해서 사용.</p>\n<p>-> counting</p>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">parallel</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tasks<span class=\"token punctuation\">,</span> finalCallback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> tasks<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> task <span class=\"token operator\">=</span> tasks<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token function\">task</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">taskDone</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">taskResult</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      count<span class=\"token operator\">++</span>\n\n      result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> taskResult\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">===</span> tasks<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">finalCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"4\">\n<li><strong>var</strong> 로 변수 바꾸기</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">parallel</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tasks<span class=\"token punctuation\">,</span> finalCallback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> tasks<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> task <span class=\"token operator\">=</span> tasks<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token function\">task</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">taskDone</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">taskResult</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      count<span class=\"token operator\">++</span>\n\n      result<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> taskResult\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">===</span> tasks<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">finalCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">taskDone</code>이 실행되는 시점이 비동기적으로 실행되므로, 끝났을 때 <code class=\"language-text\">var i</code> 로 선언된 i는 모든 <code class=\"language-text\">taskDone</code> 함수가 똑같은 i를 바라보게 되는 것.</p>\n<p>그래서 <code class=\"language-text\">taskDone</code>함수들의 i값이 for문이 끝났을때인, <code class=\"language-text\">tasks.length - 1</code>로 다 나오는 것.</p>\n<p>따라서, <code class=\"language-text\">taskDone</code> 함수가 실행되는 시점이 아닌 선언되는 시점에서의 i값을 보관해야 된다. 이럴 때 사용할 수 있는 것이 클로저 개념.</p>\n<p>-> 따로 함수를 만들면 된다. (스코프와 클로저를 새롭게 구성)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">parallel</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tasks<span class=\"token punctuation\">,</span> finalCallback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 다음과 같이 따로 함수를 만들어서 해결.</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">j</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">task</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">taskDone</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">taskResult</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n      result<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> taskResult<span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">===</span> tasks<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">finalCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> tasks<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> task <span class=\"token operator\">=</span> tasks<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>함수를 만들면 함수 내에서 함수 스코프가 따로 생기고, 이것들이 클로저로 유지되기 때문에 해결되는 것!</p>\n<blockquote>\n<p>옛날에 let이 없을 때에는 이처럼 해결하거나, 즉시실행함수와 같은 방법으로 해결을 했다</p>\n</blockquote>\n<h2 id=\"만약-코드보는게-힘들다면\" style=\"position:relative;\"><a href=\"#%EB%A7%8C%EC%95%BD-%EC%BD%94%EB%93%9C%EB%B3%B4%EB%8A%94%EA%B2%8C-%ED%9E%98%EB%93%A4%EB%8B%A4%EB%A9%B4\" aria-label=\"만약 코드보는게 힘들다면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>만약 코드보는게 힘들다면?</h2>\n<p>보기좋게 바꾸는 방법도 한 방법.</p>\n<p>리터럴로 선언되어 인자값으로 넘겨지는 것들을 변수로 따로 선언하거나 함수 선언문으로 선언된 걸 따로 두는등의 방법.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">parallel</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">[</span>\n    <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// A</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// B</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// C</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// finalCallback</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>위 와 같이 실행되는 함수를 아래와 같이.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">funcA</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// A</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">funcB</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// B</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">funcC</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// C</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>funcA<span class=\"token punctuation\">,</span> funcB<span class=\"token punctuation\">,</span> funcC<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">finalFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ToDo</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">parallel</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> finalFunc<span class=\"token punctuation\">)</span></code></pre></div>\n<p>물론, 이와 같이 풀어쓰고 <strong>이해를 했다면 다시 원복</strong>해야 한다.</p>\n<h2 id=\"q-parallel의-작업-순서대로-결과가-나와야-되는-경우가-어떤게-있나요-parallel을-응용할-수-있는-것\" style=\"position:relative;\"><a href=\"#q-parallel%EC%9D%98-%EC%9E%91%EC%97%85-%EC%88%9C%EC%84%9C%EB%8C%80%EB%A1%9C-%EA%B2%B0%EA%B3%BC%EA%B0%80-%EB%82%98%EC%99%80%EC%95%BC-%EB%90%98%EB%8A%94-%EA%B2%BD%EC%9A%B0%EA%B0%80-%EC%96%B4%EB%96%A4%EA%B2%8C-%EC%9E%88%EB%82%98%EC%9A%94-parallel%EC%9D%84-%EC%9D%91%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%EA%B2%83\" aria-label=\"q parallel의 작업 순서대로 결과가 나와야 되는 경우가 어떤게 있나요 parallel을 응용할 수 있는 것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q. parallel의 작업 순서대로 결과가 나와야 되는 경우가 어떤게 있나요? (parallel을 응용할 수 있는 것?)</h2>\n<ul>\n<li>이번 과제처럼 퀴즈 데이터를 받아오는 경우</li>\n<li>쇼핑몰 데이터(도서)를 받아오는 경우</li>\n<li>등등… 아주 많다.</li>\n</ul>\n<h2 id=\"etc\" style=\"position:relative;\"><a href=\"#etc\" aria-label=\"etc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ETC</h2>\n<ul>\n<li>\n<p>강의자료와 오피스아워, 깃랩 저장소 등이 만료기간이 있다.</p>\n<ul>\n<li>미리미리 정리하고 백업해두자.</li>\n<li>자세한 기간은 다음에 알려준다고 하심.</li>\n</ul>\n</li>\n<li>과제는 이제 끝!</li>\n<li>\n<p>다음주 Promise는 지금 당장 중요하다라는건 아니지만, Javascript 개발에 있어서 Promise는 필수불가결하므로 미리 봐두고 익혀나가자!</p>\n<ul>\n<li>부트캠프 참가자들은 더 잘 이해해야한다!</li>\n</ul>\n</li>\n<li>Prep에서 좋은점, 개선해야될 점 생각해보자.</li>\n</ul>","frontmatter":{"title":"Prep 8주차 금요일 오피스아워 정리","date":"November 29, 2020"}}},"pageContext":{"slug":"/2020/vanillacoding_prep/Prep 8주차 금요일 오피스아워 정리/","previous":{"fields":{"slug":"/2020/vanillacoding_prep/Prep 8주차 수요일 오피스아워 정리/"},"frontmatter":{"title":"Prep 8주차 수요일 오피스아워 정리","category":"vanilla coding","draft":false}},"next":{"fields":{"slug":"/2020/vanillacoding_prep/Prep 9주차 월요일 오피스아워 정리/"},"frontmatter":{"title":"Prep 9주차 월요일 오피스아워 정리","category":"vanilla coding","draft":false}}}}}