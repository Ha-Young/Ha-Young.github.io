{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020/vanillacoding_prep/Prep 4주차 수요일 오피스아워 정리/","result":{"data":{"site":{"siteMetadata":{"title":"HaYoung's Log","author":"@Ha-Young","siteUrl":"https://ha-young.github.io","comment":{"utterances":"Ha-Young/my-blog"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"e7de4561-686c-5ccf-8baf-d25e425cb4aa","excerpt":"strict mode? 함수가 regular function call로 실행되었을 때 글로벌객체로 잡히는 this를 undefined로 처리. this사용 함수가 실행되었을 때 결정이 된다. 어떻게 실행되었느냐 regular function call 내부에서 this가 전역객체로 작용 strict mode 적용시 undefined! dot notation 호출 한 객체 (.func() 에서의  과 같은)로 적용 call, apply, bind 이 함수들의 인자로 받아 explicit binding…","html":"<h2 id=\"strict-mode\" style=\"position:relative;\"><a href=\"#strict-mode\" aria-label=\"strict mode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>strict mode?</h2>\n<p>함수가 regular function call로 실행되었을 때 글로벌객체로 잡히는 this를 undefined로 처리.</p>\n<h2 id=\"this사용\" style=\"position:relative;\"><a href=\"#this%EC%82%AC%EC%9A%A9\" aria-label=\"this사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>this사용</h2>\n<ul>\n<li>함수가 실행되었을 때 결정이 된다.</li>\n<li><strong>어떻게 실행되었느냐</strong></li>\n<li>\n<p>regular function call</p>\n<ul>\n<li>내부에서 this가 전역객체로 작용</li>\n<li>strict mode 적용시 undefined!</li>\n</ul>\n</li>\n<li>\n<p>dot notation</p>\n<ul>\n<li>호출 한 객체 (<code class=\"language-text\">some</code>.func() 에서의 <code class=\"language-text\">some</code> 과 같은)로 적용</li>\n</ul>\n</li>\n<li>\n<p>call, apply, bind</p>\n<ul>\n<li>이 함수들의 인자로 받아 explicit binding된 객체</li>\n<li>primitive value면 객체로 변환된다.</li>\n</ul>\n</li>\n<li>\n<p>new keyword</p>\n<ul>\n<li>new keyword로 실행된 함수는 생성자 함수이고, 이 함수 내부에서의 this는 빈 객체 <code class=\"language-text\">{}</code>로 작용!</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"strict-mode-쓰는-이유\" style=\"position:relative;\"><a href=\"#strict-mode-%EC%93%B0%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-label=\"strict mode 쓰는 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>strict mode 쓰는 이유?</h2>\n<ul>\n<li>오류 방지</li>\n<li>오류 미리 발견</li>\n<li>실수 방지</li>\n<li>전역객체 접근 방지</li>\n<li>오류 위치 파악</li>\n<li>등등…</li>\n</ul>\n<h2 id=\"애러오류를-두려워-하지-말자\" style=\"position:relative;\"><a href=\"#%EC%95%A0%EB%9F%AC%EC%98%A4%EB%A5%98%EB%A5%BC-%EB%91%90%EB%A0%A4%EC%9B%8C-%ED%95%98%EC%A7%80-%EB%A7%90%EC%9E%90\" aria-label=\"애러오류를 두려워 하지 말자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>애러(오류)를 두려워 하지 말자</h2>\n<p>애러, 오류, 버그를 두려워 하지 말자.</p>\n<p>사실 이들은 우리 코드의 잘못된 부분을 빨리 알려준다고 보면 된다.</p>\n<p>오류의 정확한 위치를 빨리 파악을 하면 올바르고 빠르게 디버깅을 해서 오류를 해결 할 수 있다.</p>\n<h2 id=\"문제-풀어봅시당\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%92%80%EC%96%B4%EB%B4%85%EC%8B%9C%EB%8B%B9\" aria-label=\"문제 풀어봅시당 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 풀어봅시당</h2>\n<p><strong>1</strong>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> ken <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    title<span class=\"token operator\">:</span> <span class=\"token string\">'ken'</span><span class=\"token punctuation\">,</span>\n    getName<span class=\"token operator\">:</span> getName\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> wan <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    title<span class=\"token operator\">:</span> <span class=\"token string\">'wan'</span><span class=\"token punctuation\">,</span>\n    getName<span class=\"token operator\">:</span> getName\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> title <span class=\"token operator\">=</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>2.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> ken <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    title<span class=\"token operator\">:</span> <span class=\"token string\">'ken'</span><span class=\"token punctuation\">,</span>\n    getName<span class=\"token operator\">:</span> getName\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> wan <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    title<span class=\"token operator\">:</span> <span class=\"token string\">'wan'</span><span class=\"token punctuation\">,</span>\n    getName<span class=\"token operator\">:</span> getName\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> func <span class=\"token operator\">=</span> wan<span class=\"token punctuation\">.</span>getName<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> title <span class=\"token operator\">=</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>3.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> ken <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    title<span class=\"token operator\">:</span> <span class=\"token string\">'ken'</span><span class=\"token punctuation\">,</span>\n    getName<span class=\"token operator\">:</span> getName\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> wan <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    title<span class=\"token operator\">:</span> <span class=\"token string\">'wan'</span><span class=\"token punctuation\">,</span>\n    getName<span class=\"token operator\">:</span> getName\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> title <span class=\"token operator\">=</span> wan<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>4.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> ken <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    title<span class=\"token operator\">:</span> <span class=\"token string\">'ken'</span><span class=\"token punctuation\">,</span>\n    getName<span class=\"token operator\">:</span> getName\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> wan <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    title<span class=\"token operator\">:</span> <span class=\"token string\">'wan'</span><span class=\"token punctuation\">,</span>\n    getName<span class=\"token operator\">:</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>ken<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> func <span class=\"token operator\">=</span> wan<span class=\"token punctuation\">.</span>getName<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> title <span class=\"token operator\">=</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>아래 사이트 문제도 풀어보자.</p>\n<p><a href=\"https://dev.to/liaowow/take-this-quiz-understand-how-this-works-in-javascript-44dj\">take this quiz</a></p>\n<h2 id=\"qarrow-function-lexical-this\" style=\"position:relative;\"><a href=\"#qarrow-function-lexical-this\" aria-label=\"qarrow function lexical this permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q.arrow function? lexical this?</h2>\n<p>arrow function은 기본적으로 일반적인 함수 선언, 표현문과 다르게 this가 없다.</p>\n<p>그래서 laxical this(스코프내에 존재하는 this) 가 적용되는 것.</p>\n<p>현재 함수 스코프내에 this가 없다면 상위 스코프로 탐색해간다.</p>\n<h2 id=\"qnew\" style=\"position:relative;\"><a href=\"#qnew\" aria-label=\"qnew permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q.new?</h2>\n<p>new keyword로 실행된 함수는 생성자 함수이고, 이 함수 내부에서의 this는 빈 객체 <code class=\"language-text\">{}</code>로 작용!</p>\n<h2 id=\"call-apply-bind\" style=\"position:relative;\"><a href=\"#call-apply-bind\" aria-label=\"call apply bind permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>call apply bind</h2>\n<p>모두 다 <strong>explicit binding</strong> 함수.</p>\n<p>this를 명백하게 지정해서 함수에 연결시킨다.</p>\n<h4 id=\"call-apply\" style=\"position:relative;\"><a href=\"#call-apply\" aria-label=\"call apply permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>call(), apply()</h4>\n<p>인자로 넣은 this를 바인딩시켜 함수를 실행한다.</p>\n<p>call과 apply차이는 인자 수의 차이.</p>\n<ul>\n<li>\n<p>call (thisArgs, arg1, arg2, arg3…)</p>\n<ul>\n<li>원본함수의 인자들을 call의 this인자 다음 각각의 인자값으로</li>\n</ul>\n</li>\n<li>\n<p>apply (thisArgs, [ arg1, arg2, arg3 ])</p>\n<ul>\n<li>원본함수의 인자들을 apply this인자 다음의 배열안에 담아서… </li>\n</ul>\n</li>\n</ul>\n<p>상황에 따라 사용하면 되었지만,  es6에서 spread 연산자가 도입되면서 사용에 크게 차이가 없어졌다.</p>\n<h4 id=\"bind\" style=\"position:relative;\"><a href=\"#bind\" aria-label=\"bind permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>bind()</h4>\n<p>위 call, apply와 다르게 <strong>함수 실행 X</strong>\n<strong>인자로 넣은 객체가 this로 바인딩 된 새로운 함수를 리턴한다.</strong></p>\n<h2 id=\"q깜장썬글레스-문제\" style=\"position:relative;\"><a href=\"#q%EA%B9%9C%EC%9E%A5%EC%8D%AC%EA%B8%80%EB%A0%88%EC%8A%A4-%EB%AC%B8%EC%A0%9C\" aria-label=\"q깜장썬글레스 문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q.깜장썬글레스 문제</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> status <span class=\"token operator\">=</span> <span class=\"token string\">\"❤\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> status <span class=\"token operator\">=</span> <span class=\"token string\">\"🙌\"</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        status<span class=\"token operator\">:</span> <span class=\"token string\">\"🎁\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function-variable function\">getStatus</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    \n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">getStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ???</span>\n    <span class=\"token keyword\">var</span> message <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">getStatus</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ???</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>풀어보자.</p>\n<h4 id=\"getstatus가-화살표-함수가-아니라-getstatus-function--라면\" style=\"position:relative;\"><a href=\"#getstatus%EA%B0%80-%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98%EA%B0%80-%EC%95%84%EB%8B%88%EB%9D%BC-getstatus-function--%EB%9D%BC%EB%A9%B4\" aria-label=\"getstatus가 화살표 함수가 아니라 getstatus function  라면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>getStatus가 화살표 함수가 아니라 getStatus: function() {} 라면?</h4>\n<p>결과는 위와 똑같다.</p>\n<p>하지만 자세한 설명은 Closer와 관계가 있어서 나중에 배우니 지금은 Pass!</p>\n<h2 id=\"call에-thisargs로-primitive-value\" style=\"position:relative;\"><a href=\"#call%EC%97%90-thisargs%EB%A1%9C-primitive-value\" aria-label=\"call에 thisargs로 primitive value permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>call()에 thisArgs로 Primitive value?</h2>\n<p>thisArgs가 Obj로 변환된다.</p>\n<p>자세한 내용은 공식문서 참조.</p>\n<h2 id=\"this-강의-quiz-해설\" style=\"position:relative;\"><a href=\"#this-%EA%B0%95%EC%9D%98-quiz-%ED%95%B4%EC%84%A4\" aria-label=\"this 강의 quiz 해설 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>this 강의 Quiz 해설</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> something <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    age<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">speak</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> butler <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    age<span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">serve</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">cb</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nbutler<span class=\"token punctuation\">.</span><span class=\"token function\">serve</span><span class=\"token punctuation\">(</span>something<span class=\"token punctuation\">.</span>speak<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>맨 마지막 <code class=\"language-text\">butler.serve(something.speak)</code>에서 <code class=\"language-text\">something.speak</code>를 인자로 넘기는 것이 포인트이다.</p>\n<p>인자로 넘긴다고 바로 실행되는것이 아니라,\nbutler의 serve함수에서 인자로 받고 실행시키는 구문은 11라인에서 하기 때문에 이 위치에서의 사용이 speak함수 내부의 this를 결정시킨다. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Programmer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isSmart <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">upgrade</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">version</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isSmart <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>version<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isSmart<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        window<span class=\"token punctuation\">.</span><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I can do ...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> programmer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Programmer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nprogrammer<span class=\"token punctuation\">.</span><span class=\"token function\">upgrade</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 14줄의 alert가 실행?</span></code></pre></div>\n<p>이 문제는 간단한데,</p>\n<p>work() 함수가 regular function call이 적용되어서 this가 전역객체이고, isSmart 속성이 없기때문에 실행되지 않는다.</p>\n<h4 id=\"실행순서\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%ED%96%89%EC%88%9C%EC%84%9C\" aria-label=\"실행순서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실행순서</h4>\n<ol>\n<li><code class=\"language-text\">const programmer = new Programmer()</code> 로 new keyword (생성자함수)로 실행이 된다.</li>\n<li><code class=\"language-text\">Programmer()</code> 함수가 생성자 함수로 실행이 되면서, 내부의 this는 빈 객체로 작용.</li>\n<li>\n<p>빈 객체 <code class=\"language-text\">{}</code>에 <code class=\"language-text\">isSmart</code> 속성값, <code class=\"language-text\">upgrade()</code> 메서드 생성 후 객체 리턴 </p>\n<ul>\n<li>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n isSmart<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n <span class=\"token function-variable function\">upgrade</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">version</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isSmart <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>version<span class=\"token punctuation\">;</span>\n     <span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<p> 로  반환되었다.</p>\n</li>\n<li><code class=\"language-text\">const programmer</code> 변수로 생성자로 생성된 객체 받음.</li>\n<li>\n<p><code class=\"language-text\">programmer.upgrade(1)</code> 로 <code class=\"language-text\">upgrade()</code> 함수 실행 </p>\n<ul>\n<li>Programmer 생성자 함수로 생성된 객체의 <code class=\"language-text\">upgrade()</code> 메소드이다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">upgrade</code> 메소드 실행시 내부의 <strong>this는 programmer 객체</strong> 즉, 위 Person 생성자 함수로 만들었던 객체.</li>\n<li>\n<p>따라서 <code class=\"language-text\">this.isSmart = !!version</code> 값은 <code class=\"language-text\">this.isSmart = !!1</code></p>\n<ul>\n<li>!!로 !연산자를 두번 하면 Boolean 형으로 변환시키는 것. 그래서 1은 Truthy이므로 true가 된다.</li>\n</ul>\n</li>\n<li><strong>this 가 programmer 객체</strong>이므로 false로 설정되어있던 programmer객체의 <strong>isSmart 값이 true로 바뀐다</strong>.</li>\n<li>그리고 <code class=\"language-text\">work()</code> 함수 실행.</li>\n<li>work 함수가 실행될 때에는 general function call 이므로 내부의 this는 전역객체.</li>\n<li>전역객체에 isSmart라는 속성은 없으므로 alert는 실행되지 않는다.</li>\n</ol>\n<p><strong>work.call(this) 라고 했다면,  alert 실행.</strong></p>\n<p>이 당시의 call의 argumet로 넘기는 this는 programmer객체 자신이므로.</p>\n<h2 id=\"q-일반함수-선언시-전역객체의-method이므로-실은-window메서드-가-되어서-내부적으로는-dot-notation이-적용되는-것이-아닌가\" style=\"position:relative;\"><a href=\"#q-%EC%9D%BC%EB%B0%98%ED%95%A8%EC%88%98-%EC%84%A0%EC%96%B8%EC%8B%9C-%EC%A0%84%EC%97%AD%EA%B0%9D%EC%B2%B4%EC%9D%98-method%EC%9D%B4%EB%AF%80%EB%A1%9C-%EC%8B%A4%EC%9D%80-window%EB%A9%94%EC%84%9C%EB%93%9C-%EA%B0%80-%EB%90%98%EC%96%B4%EC%84%9C-%EB%82%B4%EB%B6%80%EC%A0%81%EC%9C%BC%EB%A1%9C%EB%8A%94-dot-notation%EC%9D%B4-%EC%A0%81%EC%9A%A9%EB%90%98%EB%8A%94-%EA%B2%83%EC%9D%B4-%EC%95%84%EB%8B%8C%EA%B0%80\" aria-label=\"q 일반함수 선언시 전역객체의 method이므로 실은 window메서드 가 되어서 내부적으로는 dot notation이 적용되는 것이 아닌가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q. 일반함수 선언시 전역객체의 method이므로, 실은 window.메서드() 가 되어서 내부적으로는 dot notation이 적용되는 것이 아닌가?</h2>\n<p><strong>일단 this값은 함수 선언시에 결정 되지 않는다!!</strong></p>\n<p>또한, <strong>일반함수 선언시에 무조건 전역객체의 메서드가 되지도 않는다.</strong></p>\n<p>아래 예제에서 bar는 전역객체의 메서드가 아니다!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">vanilla</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">coding</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token function\">coding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> ken <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    title<span class=\"token operator\">:</span> <span class=\"token string\">'ken'</span><span class=\"token punctuation\">,</span>\n    work<span class=\"token operator\">:</span> vanilla\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nken<span class=\"token punctuation\">.</span><span class=\"token function\">work</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"q-strict-mode로-전역객체-참조가능\" style=\"position:relative;\"><a href=\"#q-strict-mode%EB%A1%9C-%EC%A0%84%EC%97%AD%EA%B0%9D%EC%B2%B4-%EC%B0%B8%EC%A1%B0%EA%B0%80%EB%8A%A5\" aria-label=\"q strict mode로 전역객체 참조가능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q. strict mode로 전역객체 참조가능?</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">someFunc</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">// ToDo   </span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>함수 선언시에 전역객체의 메서드로 들어가지는데,</p>\n<p>strict mode로 선언했을 때\n<code class=\"language-text\">window.someFunc()</code> 로 사용가능?</p>\n<p>된다. 자세한 사항은 공식문서에서 찾아보자.</p>\n<h2 id=\"q-strict-mode-상태로-웹이나-앱-서비스-괜찮은가\" style=\"position:relative;\"><a href=\"#q-strict-mode-%EC%83%81%ED%83%9C%EB%A1%9C-%EC%9B%B9%EC%9D%B4%EB%82%98-%EC%95%B1-%EC%84%9C%EB%B9%84%EC%8A%A4-%EA%B4%9C%EC%B0%AE%EC%9D%80%EA%B0%80\" aria-label=\"q strict mode 상태로 웹이나 앱 서비스 괜찮은가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q. strict mode 상태로 웹이나 앱 서비스 괜찮은가?</h2>\n<p>괜찮다. </p>\n<p>요즘에는 <strong>다 strict mode가 기본</strong>.</p>\n<h2 id=\"etc\" style=\"position:relative;\"><a href=\"#etc\" aria-label=\"etc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ETC</h2>\n<ul>\n<li>\n<p>강하게 키우시는 켄님</p>\n<ul>\n<li>절벽에서 밀어서…</li>\n</ul>\n</li>\n<li>앞으로 일 하려면 멘탈이 굉장히 중요하다.</li>\n<li>\n<p>부트캠프 코딩테스트는 한시간에 두문제!</p>\n<ul>\n<li>문제당 20분, 40분씩</li>\n<li>난이도는 마지막 과제와 수준이 비슷하다.</li>\n<li>요구사항에 맞는 함수를 구현하는 형식. (쉽지는 않을거다)</li>\n<li>prep 미수강자는 3문제! 1시간 30분!</li>\n<li>16명 인원 제한 하지만 추가로 받을 수 있다. ( 노력하며 가능성이 있으신 분들 )</li>\n</ul>\n</li>\n<li><strong>금요일까지 말 끝에 ㅇ을 받침으로 해야합니당</strong></li>\n<li>켄님 녹화시에 화면 크게 해주셔야됩니당</li>\n</ul>","frontmatter":{"title":"Prep 4주차 수요일 오피스아워 정리","date":"October 28, 2020"}}},"pageContext":{"slug":"/2020/vanillacoding_prep/Prep 4주차 수요일 오피스아워 정리/","previous":{"fields":{"slug":"/2020/programmers_algorithm_python/2020-10-27-프로그래머스_완주하지-못한-선수---Lv1/"},"frontmatter":{"title":"프로그래머스 - 완주하지 못한 선수 - Lv1","category":"algorithm","draft":false}},"next":{"fields":{"slug":"/2020/programmers_algorithm_python/2020-10-29-패스트캠퍼스-알고리즘-완주반-2차평가/"},"frontmatter":{"title":"패스트캠퍼스 알고리즘 완주반 2차평가","category":"algorithm","draft":false}}}}}