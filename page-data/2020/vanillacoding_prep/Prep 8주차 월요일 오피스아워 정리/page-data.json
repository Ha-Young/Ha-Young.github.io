{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020/vanillacoding_prep/Prep 8주차 월요일 오피스아워 정리/","result":{"data":{"site":{"siteMetadata":{"title":"HaYoung's Log","author":"@Ha-Young","siteUrl":"https://ha-young.github.io","comment":{"utterances":"Ha-Young/my-blog"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"7f6d7813-3d63-5ac2-988f-0eb13ec3e02a","excerpt":"지난주 과제(Underdash) 코드리뷰 정리 hasOwnProperty() 설명은 지난시간에 했음. 3항 연산자 중첩 3항 연산자 중첩은 어디까지 허용? -> 주관적이다. 그래도 일반적으로 특별한 일이 아닌 이상은 중첩하지 않는다. 코드 리뷰 받은 코드에서는 3항 연산자에서 할당문이 들어가서 가독성을 헤침. 켄님의 의견 : 3항연산자를 특별한 일이 있지 않으면 쓰지 않음. 간략하게 딱! 표현이 되면…","html":"<h2 id=\"지난주-과제underdash-코드리뷰-정리\" style=\"position:relative;\"><a href=\"#%EC%A7%80%EB%82%9C%EC%A3%BC-%EA%B3%BC%EC%A0%9Cunderdash-%EC%BD%94%EB%93%9C%EB%A6%AC%EB%B7%B0-%EC%A0%95%EB%A6%AC\" aria-label=\"지난주 과제underdash 코드리뷰 정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>지난주 과제(Underdash) 코드리뷰 정리</h2>\n<h3 id=\"hasownproperty\" style=\"position:relative;\"><a href=\"#hasownproperty\" aria-label=\"hasownproperty permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>hasOwnProperty()</h3>\n<p>설명은 지난시간에 했음.</p>\n<h3 id=\"3항-연산자-중첩\" style=\"position:relative;\"><a href=\"#3%ED%95%AD-%EC%97%B0%EC%82%B0%EC%9E%90-%EC%A4%91%EC%B2%A9\" aria-label=\"3항 연산자 중첩 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3항 연산자 중첩</h3>\n<p>3항 연산자 중첩은 어디까지 허용?</p>\n<p>-> <strong>주관적이다.</strong> 그래도 일반적으로 특별한 일이 아닌 이상은 중첩하지 않는다.</p>\n<p>코드 리뷰 받은 코드에서는 3항 연산자에서 할당문이 들어가서 가독성을 헤침.</p>\n<p>켄님의 의견 : 3항연산자를 특별한 일이 있지 않으면 쓰지 않음. 간략하게 딱! 표현이 되면 3항연산자 쓴다.</p>\n<p>정답은 없으므로 <strong>본인이 봤을 때 가독성이 괜찮은지 떨어지는지 판단할 것</strong></p>\n<h3 id=\"const로-객체-배열-선언\" style=\"position:relative;\"><a href=\"#const%EB%A1%9C-%EA%B0%9D%EC%B2%B4-%EB%B0%B0%EC%97%B4-%EC%84%A0%EC%96%B8\" aria-label=\"const로 객체 배열 선언 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>const로 객체, 배열 선언</h3>\n<p><code class=\"language-text\">const</code>와 <code class=\"language-text\">let</code>의 차이는 재할당 가능여부.</p>\n<p>객체와 배열도 재할당을 하지 않으면 <strong><code class=\"language-text\">const</code>로 변수선언을 해야된다.</strong></p>\n<p>객체와 배열은 해당 변수에 재선언을 하지 않고내부 Property추가 삭제와 Propery값을 변경하는 등의 작업을 할경우에는 변수에 대한 재선언이 아니므로 <code class=\"language-text\">let</code>으로 선언하면 안된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 가능</span>\n\narr <span class=\"token operator\">=</span> <span class=\"token string\">'something'</span> <span class=\"token comment\">// 다음과 같이 재선언을 할경우가 있다면 let으로 선언</span></code></pre></div>\n<h3 id=\"변수명에-obj-arr-suffix\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EC%88%98%EB%AA%85%EC%97%90-obj-arr-suffix\" aria-label=\"변수명에 obj arr suffix permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변수명에 Obj, Arr suffix</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> memoObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> memoInstance <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> bookArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>다음과 같은 네이밍은 <strong>지양</strong>해야 한다. (사용하지 말라는건 아님.)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> memo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> animals <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> bookList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> books <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>일반적으로 다음과 같이 배열은 복수형(s) 혹은 뒤에 List를 붙이고, 객체는 Obj와 같은 suffix 없이 그냥 쓰는편 (복수형도 가능)</p>\n<p>알고리즘 문제 같은걸 풀 때 Arr이나 Obj를 붙이기도 하는데, 이 처럼 특별한 경우가 아니면 잘 쓰이지 않음.</p>\n<h3 id=\"memoizefunc\" style=\"position:relative;\"><a href=\"#memoizefunc\" aria-label=\"memoizefunc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>memoize(func)</h3>\n<ul>\n<li>연산 결과를 기억하고 있는 함수.</li>\n<li>다음과 같은 상황에서 매개변수로 함수를 받는경우에 어떠한 함수가 들어올지 모르기 때문에 func라고 쓸 수 있다.\n하지만, 함수 선언문으로써 func는 적절하지 않음.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">memoize</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">func</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> memo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    args<span class=\"token operator\">:</span> result<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다음과 같이 이미 구한 연산값을 저장하는데에는 객체를 쓰는 것이 좋을 것 같다.</p>\n<ul>\n<li>func의 인자값을 key로</li>\n<li>구한 연산값을 value로</li>\n</ul>\n<p>하지만, 값을 저장하는 객체에 대한 키값을 정하기가 쉽지않다.</p>\n<p>가장 간단한 방법이 <code class=\"language-text\">JSON.stringify(value)</code></p>\n<p>이 외에도 key값을 구분할 수 있다면 OK.</p>\n<p>그리고, memoize는 새로운 함수를 리턴한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">memoize</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">func</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> memo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 새로운 함수를 리턴하는 함수들을 <strong>고차함수</strong>라고 한다. (HOF : Higher Order Function)</p>\n<p>이렇게 함수에서 함수를 리턴하는 패턴은 흔하지는 않다. 하지만, Javascript가 가지고있는 유연한 특징중에 하나라서 자주 보기도 하고 자주 쓰기도 해야하니 잘 알아둬야 한다.</p>\n<p>memoize가 return하는 함수에 대한 로직은 다음과 같아야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">memoize</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">func</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> memo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 이미 구한 값(memo객체에 존재)이면 위 memo객체에 들어있는 값 반환</span>\n    <span class=\"token comment\">// 구했던 값이 아니면 func를 실행해서 값을 구하고 memo객체에 저장한 뒤 반환.</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"q-저차함수도-있나요\" style=\"position:relative;\"><a href=\"#q-%EC%A0%80%EC%B0%A8%ED%95%A8%EC%88%98%EB%8F%84-%EC%9E%88%EB%82%98%EC%9A%94\" aria-label=\"q 저차함수도 있나요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q. 저차함수도 있나요?</h4>\n<p>고차함수가 아닌것이 다 저차함수이다.</p>\n<p>고차함수에 대한 정의는 딱 명확하게 있는데, 나중에 찾아보도록하자.</p>\n<h4 id=\"q-once-메소드와-차이점\" style=\"position:relative;\"><a href=\"#q-once-%EB%A9%94%EC%86%8C%EB%93%9C%EC%99%80-%EC%B0%A8%EC%9D%B4%EC%A0%90\" aria-label=\"q once 메소드와 차이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q. once 메소드와 차이점?</h4>\n<p>once 함수는 memoize와 비슷한 고차함수이지만, 인자값에 상관없이 무조건 딱 한번만 실행되도록 하는 함수를 반환하는 것.</p>\n<p>memoize는 어떤 인자값으로 한번 연산했을 때 구한 값을 저장해서 똑같은 인자값을 받았을 때 다시 연산하지 않고 저장된 값을 리턴시켜주는 목적이고,</p>\n<p>once는 어떤 함수가 딱 한번만 쓰일 수 있게 하려고 하는 목적.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">once</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">func</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// func가 딱 한번만 실행되도록하는 함수 리턴.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> fn1 <span class=\"token operator\">=</span> <span class=\"token function\">once</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> fn2 <span class=\"token operator\">=</span> <span class=\"token function\">memoize</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">fn1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3</span>\n<span class=\"token function\">fn1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3 이미 한번 사용했기 때문에 함수 실행이 안됨.</span>\n<span class=\"token function\">fn1</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3</span>\n<span class=\"token function\">fn1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3 결과는 맞지만 내부적으로 함수 실행되지 않았음.</span>\n\n<span class=\"token function\">fn2</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3 (1,2)에 대한 인자값일 때 3이라는 결과 저장하고 반환</span>\n<span class=\"token function\">fn2</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 5 (2,3)에 대한 인자값일 때 5라는 결과 저장하고 반환</span>\n<span class=\"token function\">fn2</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3 (1,2)에 대한 인자값에 대해 저장된 값 3 반환. 내부적으로 함수 실행되지 않음.</span></code></pre></div>\n<h4 id=\"q-현업이나-프로젝트에서-클로저-이와같이-응용되나요\" style=\"position:relative;\"><a href=\"#q-%ED%98%84%EC%97%85%EC%9D%B4%EB%82%98-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90%EC%84%9C-%ED%81%B4%EB%A1%9C%EC%A0%80-%EC%9D%B4%EC%99%80%EA%B0%99%EC%9D%B4-%EC%9D%91%EC%9A%A9%EB%90%98%EB%82%98%EC%9A%94\" aria-label=\"q 현업이나 프로젝트에서 클로저 이와같이 응용되나요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q. 현업이나 프로젝트에서 클로저 이와같이 응용되나요?</h4>\n<p>이와같이 의도적으로 이용하는 경우가 있지만,\n의도하지 않더라도 사용되어진다.</p>\n<h2 id=\"이번주-주제\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EB%B2%88%EC%A3%BC-%EC%A3%BC%EC%A0%9C\" aria-label=\"이번주 주제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이번주 주제</h2>\n<ul>\n<li>Web에 대한 내용</li>\n<li>Asynchronous Javascript</li>\n</ul>\n<p>Web에 대한 내용은 주요하게 보지않아도 되지만, Asynchronous(비동기)에 대한 내용은 주요하게 봐야 한다.</p>\n<h3 id=\"이번주-과제\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EB%B2%88%EC%A3%BC-%EA%B3%BC%EC%A0%9C\" aria-label=\"이번주 과제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이번주 과제</h3>\n<p><strong>Async JavaScript Card Quiz</strong></p>\n<p>2주차 처럼 문제 푸는 것 까지 구현은 아니고, 문제 리스트가 화면에만 뜨면 된다.</p>\n<p>ReadMe의 TODO를 꼭 읽어보자.</p>\n<p>이번 과제도 오래걸린다.</p>\n<p>어떻게 해야되는지에 대한 고민이 오래걸릴 것.</p>\n<h2 id=\"q-현업에서-재귀함수-직접-구현해서-쓰나요\" style=\"position:relative;\"><a href=\"#q-%ED%98%84%EC%97%85%EC%97%90%EC%84%9C-%EC%9E%AC%EA%B7%80%ED%95%A8%EC%88%98-%EC%A7%81%EC%A0%91-%EA%B5%AC%ED%98%84%ED%95%B4%EC%84%9C-%EC%93%B0%EB%82%98%EC%9A%94\" aria-label=\"q 현업에서 재귀함수 직접 구현해서 쓰나요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q. 현업에서 재귀함수 직접 구현해서 쓰나요?</h2>\n<p>자주 쓴다. 기능에 재귀함수로 구현해야될 것 같으면 재귀함수로 구현한다.</p>\n<h2 id=\"q-함수-선언문에서-함수는-var-let-const-매개변수는\" style=\"position:relative;\"><a href=\"#q-%ED%95%A8%EC%88%98-%EC%84%A0%EC%96%B8%EB%AC%B8%EC%97%90%EC%84%9C-%ED%95%A8%EC%88%98%EB%8A%94-var-let-const-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EB%8A%94\" aria-label=\"q 함수 선언문에서 함수는 var let const 매개변수는 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q. 함수 선언문에서 함수는 var? let? const? 매개변수는?</h2>\n<p>함수는 var로 선언된다고 보는게 맞다.</p>\n<p>매개변수는 var, let 과 같은 것으로 정의하려고 하지말고 그냥 매개변수 자체로 받아들이자.\n(사용은 var, let과 같다)</p>\n<p>그리고 매개변수는 함수가 실행되었을 때 함수 스코프로 선언된다.</p>\n<p>var와 같은 함수 스코프라서 재할당은 되지만, <strong>매개변수에 대해 재할당 하는것은 지양해야 한다.</strong></p>\n<h2 id=\"etc\" style=\"position:relative;\"><a href=\"#etc\" aria-label=\"etc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ETC</h2>\n<ul>\n<li>\n<p>현재 이사하려는 곳은 무산되었습니다…</p>\n<ul>\n<li>새 소식은 기다려봐요</li>\n</ul>\n</li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/2020/vanillacoding_prep/Prep%208%EC%A3%BC%EC%B0%A8%20%EC%9B%94%EC%9A%94%EC%9D%BC%20%EC%98%A4%ED%94%BC%EC%8A%A4%EC%95%84%EC%9B%8C%20%EC%A0%95%EB%A6%AC/#%EC%A7%80%EB%82%9C%EC%A3%BC-%EA%B3%BC%EC%A0%9Cunderdash-%EC%BD%94%EB%93%9C%EB%A6%AC%EB%B7%B0-%EC%A0%95%EB%A6%AC\">지난주 과제(Underdash) 코드리뷰 정리</a></p>\n<ul>\n<li><a href=\"/2020/vanillacoding_prep/Prep%208%EC%A3%BC%EC%B0%A8%20%EC%9B%94%EC%9A%94%EC%9D%BC%20%EC%98%A4%ED%94%BC%EC%8A%A4%EC%95%84%EC%9B%8C%20%EC%A0%95%EB%A6%AC/#hasownproperty\">hasOwnProperty()</a></li>\n<li><a href=\"/2020/vanillacoding_prep/Prep%208%EC%A3%BC%EC%B0%A8%20%EC%9B%94%EC%9A%94%EC%9D%BC%20%EC%98%A4%ED%94%BC%EC%8A%A4%EC%95%84%EC%9B%8C%20%EC%A0%95%EB%A6%AC/#3%ED%95%AD-%EC%97%B0%EC%82%B0%EC%9E%90-%EC%A4%91%EC%B2%A9\">3항 연산자 중첩</a></li>\n<li><a href=\"/2020/vanillacoding_prep/Prep%208%EC%A3%BC%EC%B0%A8%20%EC%9B%94%EC%9A%94%EC%9D%BC%20%EC%98%A4%ED%94%BC%EC%8A%A4%EC%95%84%EC%9B%8C%20%EC%A0%95%EB%A6%AC/#const%EB%A1%9C-%EA%B0%9D%EC%B2%B4-%EB%B0%B0%EC%97%B4-%EC%84%A0%EC%96%B8\">const로 객체, 배열 선언</a></li>\n<li><a href=\"/2020/vanillacoding_prep/Prep%208%EC%A3%BC%EC%B0%A8%20%EC%9B%94%EC%9A%94%EC%9D%BC%20%EC%98%A4%ED%94%BC%EC%8A%A4%EC%95%84%EC%9B%8C%20%EC%A0%95%EB%A6%AC/#%EB%B3%80%EC%88%98%EB%AA%85%EC%97%90-obj-arr-suffix\">변수명에 Obj, Arr suffix</a></li>\n<li>\n<p><a href=\"/2020/vanillacoding_prep/Prep%208%EC%A3%BC%EC%B0%A8%20%EC%9B%94%EC%9A%94%EC%9D%BC%20%EC%98%A4%ED%94%BC%EC%8A%A4%EC%95%84%EC%9B%8C%20%EC%A0%95%EB%A6%AC/#memoizefunc\">memoize(func)</a></p>\n<ul>\n<li><a href=\"/2020/vanillacoding_prep/Prep%208%EC%A3%BC%EC%B0%A8%20%EC%9B%94%EC%9A%94%EC%9D%BC%20%EC%98%A4%ED%94%BC%EC%8A%A4%EC%95%84%EC%9B%8C%20%EC%A0%95%EB%A6%AC/#q-%EC%A0%80%EC%B0%A8%ED%95%A8%EC%88%98%EB%8F%84-%EC%9E%88%EB%82%98%EC%9A%94\">Q. 저차함수도 있나요?</a></li>\n<li><a href=\"/2020/vanillacoding_prep/Prep%208%EC%A3%BC%EC%B0%A8%20%EC%9B%94%EC%9A%94%EC%9D%BC%20%EC%98%A4%ED%94%BC%EC%8A%A4%EC%95%84%EC%9B%8C%20%EC%A0%95%EB%A6%AC/#q-once-%EB%A9%94%EC%86%8C%EB%93%9C%EC%99%80-%EC%B0%A8%EC%9D%B4%EC%A0%90\">Q. once 메소드와 차이점?</a></li>\n<li><a href=\"/2020/vanillacoding_prep/Prep%208%EC%A3%BC%EC%B0%A8%20%EC%9B%94%EC%9A%94%EC%9D%BC%20%EC%98%A4%ED%94%BC%EC%8A%A4%EC%95%84%EC%9B%8C%20%EC%A0%95%EB%A6%AC/#q-%ED%98%84%EC%97%85%EC%9D%B4%EB%82%98-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90%EC%84%9C-%ED%81%B4%EB%A1%9C%EC%A0%80-%EC%9D%B4%EC%99%80%EA%B0%99%EC%9D%B4-%EC%9D%91%EC%9A%A9%EB%90%98%EB%82%98%EC%9A%94\">Q. 현업이나 프로젝트에서 클로저 이와같이 응용되나요?</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/2020/vanillacoding_prep/Prep%208%EC%A3%BC%EC%B0%A8%20%EC%9B%94%EC%9A%94%EC%9D%BC%20%EC%98%A4%ED%94%BC%EC%8A%A4%EC%95%84%EC%9B%8C%20%EC%A0%95%EB%A6%AC/#%EC%9D%B4%EB%B2%88%EC%A3%BC-%EC%A3%BC%EC%A0%9C\">이번주 주제</a></p>\n<ul>\n<li><a href=\"/2020/vanillacoding_prep/Prep%208%EC%A3%BC%EC%B0%A8%20%EC%9B%94%EC%9A%94%EC%9D%BC%20%EC%98%A4%ED%94%BC%EC%8A%A4%EC%95%84%EC%9B%8C%20%EC%A0%95%EB%A6%AC/#%EC%9D%B4%EB%B2%88%EC%A3%BC-%EA%B3%BC%EC%A0%9C\">이번주 과제</a></li>\n</ul>\n</li>\n<li><a href=\"/2020/vanillacoding_prep/Prep%208%EC%A3%BC%EC%B0%A8%20%EC%9B%94%EC%9A%94%EC%9D%BC%20%EC%98%A4%ED%94%BC%EC%8A%A4%EC%95%84%EC%9B%8C%20%EC%A0%95%EB%A6%AC/#q-%ED%98%84%EC%97%85%EC%97%90%EC%84%9C-%EC%9E%AC%EA%B7%80%ED%95%A8%EC%88%98-%EC%A7%81%EC%A0%91-%EA%B5%AC%ED%98%84%ED%95%B4%EC%84%9C-%EC%93%B0%EB%82%98%EC%9A%94\">Q. 현업에서 재귀함수 직접 구현해서 쓰나요?</a></li>\n<li><a href=\"/2020/vanillacoding_prep/Prep%208%EC%A3%BC%EC%B0%A8%20%EC%9B%94%EC%9A%94%EC%9D%BC%20%EC%98%A4%ED%94%BC%EC%8A%A4%EC%95%84%EC%9B%8C%20%EC%A0%95%EB%A6%AC/#q-%ED%95%A8%EC%88%98-%EC%84%A0%EC%96%B8%EB%AC%B8%EC%97%90%EC%84%9C-%ED%95%A8%EC%88%98%EB%8A%94-var-let-const-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EB%8A%94\">Q. 함수 선언문에서 함수는 var? let? const? 매개변수는?</a></li>\n<li><a href=\"/2020/vanillacoding_prep/Prep%208%EC%A3%BC%EC%B0%A8%20%EC%9B%94%EC%9A%94%EC%9D%BC%20%EC%98%A4%ED%94%BC%EC%8A%A4%EC%95%84%EC%9B%8C%20%EC%A0%95%EB%A6%AC/#etc\">ETC</a></li>\n</ul>","frontmatter":{"title":"바닐라코딩 Prep 8주차 월요일 오피스아워 정리","date":"November 23, 2020"}}},"pageContext":{"slug":"/2020/vanillacoding_prep/Prep 8주차 월요일 오피스아워 정리/","previous":{"fields":{"slug":"/2020/vanillacoding_prep/Prep 7주차 금요일 오피스아워 정리/"},"frontmatter":{"title":"바닐라코딩 Prep 7주차 금요일 오피스아워 정리","category":"vanilla coding","draft":false}},"next":{"fields":{"slug":"/2020/vanillacoding_prep/Prep 8주차 수요일 오피스아워 정리/"},"frontmatter":{"title":"바닐라코딩 Prep 8주차 수요일 오피스아워 정리","category":"vanilla coding","draft":false}}}}}