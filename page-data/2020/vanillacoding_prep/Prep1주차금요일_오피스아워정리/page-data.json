{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020/vanillacoding_prep/Prep1주차금요일_오피스아워정리/","result":{"data":{"site":{"siteMetadata":{"title":"HaYoung's Log","author":"@Ha-Young","siteUrl":"https://ha-young.github.io","comment":{"utterances":"Ha-Young/my-blog"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"adb172aa-7ecd-5f01-971d-4aad2077fd3e","excerpt":"PrevQ. {} || something 지난시간 {} || something, {} && something 이 안되었던 이유는  자바스크립트 엔진에서 {}를 구문블록 (block statement)로 해석 한 것! 우리가 if, for 문을 쓸 때 {}를 쓰듯이 {}는 block statement라고 하는데, {} 을 block statement…","html":"<h2 id=\"prevq---something\" style=\"position:relative;\"><a href=\"#prevq---something\" aria-label=\"prevq   something permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PrevQ. {} || something</h2>\n<p>지난시간 {} || something, {} &#x26;&#x26; something 이 안되었던 이유는 </p>\n<p>자바스크립트 엔진에서 {}를 구문블록 (block statement)로 해석 한 것!</p>\n<p>우리가 if, for 문을 쓸 때 {}를 쓰듯이 {}는 block statement라고 하는데,</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">||</span> <span class=\"token number\">123</span> <span class=\"token comment\">// Error</span>\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">\"123\"</span> <span class=\"token comment\">// Error</span></code></pre></div>\n<p>{} 을 block statement로 해석한 것.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> value1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">||</span> <span class=\"token number\">123</span>\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token number\">123</span></code></pre></div>\n<p>요렇게 변수에 대입할 때 써주거나 ()로 묶어주면 된다.</p>\n<p>실제로는 이렇게 잘 사용하지 않기 때문에 위와 같은 오류는 잘 볼 일이 없다.</p>\n<p>사실 위 처럼 변수에 할당하지않고 바로</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">||</span> <span class=\"token number\">123</span></code></pre></div>\n<p>으로 하지는 않기 때문에 흔하지 않은 애러.</p>\n<p>자바스크립트 엔진에서 <strong>{}를 객체 리터럴로 받아들이기보다 Block Statement로 인식 할 수 있다는걸</strong> 알아두면 될 것 같다.</p>\n<h4 id=\"근데-이런경우가-있다\" style=\"position:relative;\"><a href=\"#%EA%B7%BC%EB%8D%B0-%EC%9D%B4%EB%9F%B0%EA%B2%BD%EC%9A%B0%EA%B0%80-%EC%9E%88%EB%8B%A4\" aria-label=\"근데 이런경우가 있다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>근데 이런경우가 있다?</h4>\n<p>크롬 콘솔에서 </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// Pass - 세미콜론(;) 없이 수행</span>\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error - 세미콜론(;) 있음</span></code></pre></div>\n<p>로 하면 애러가 안난다 </p>\n<p>하지만 <strong>다른 브라우저</strong>에서는 되는데 브라우저마다 동작하는 방식? 이 조금 다를 수 있다는 점을 알아두면 될 듯.</p>\n<p>세밀하게 살펴보지 않으면 절대로 알 수 없는 내용인데 찾으신분은 진짜 대단하신 것 같다.</p>\n<h2 id=\"이번-과제-리뷰\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EB%B2%88-%EA%B3%BC%EC%A0%9C-%EB%A6%AC%EB%B7%B0\" aria-label=\"이번 과제 리뷰 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이번 과제 리뷰</h2>\n<h4 id=\"typeof\" style=\"position:relative;\"><a href=\"#typeof\" aria-label=\"typeof permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>typeof</h4>\n<p>typeof 키워드 기억.</p>\n<ul>\n<li>typeof “123” -> “string”</li>\n<li>typeof 123 -> “number”</li>\n</ul>\n<p>와 같이 작동하고 type값을 string으로 알려준다.</p>\n<h5 id=\"다음은-어떻게-작동할까\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%EC%9D%8C%EC%9D%80-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%9E%91%EB%8F%99%ED%95%A0%EA%B9%8C\" aria-label=\"다음은 어떻게 작동할까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다음은 어떻게 작동할까?</h5>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token comment\">// false</span>\n<span class=\"token comment\">// typeof undefined는 \"undefined\"이기 때문</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> arr\narr <span class=\"token comment\">// \"object\"</span>\n\n<span class=\"token comment\">// 그럼 여기서 어떻게 arr이 배열인걸 판별할 수 있을까?</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ToDo</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Array.isArray(something) 로 판별</span></code></pre></div>\n<blockquote>\n<p>arr.isArray() 가 아닌걸 염두하자!</p>\n</blockquote>\n<h3 id=\"aboutarrays에서-나온-부분\" style=\"position:relative;\"><a href=\"#aboutarrays%EC%97%90%EC%84%9C-%EB%82%98%EC%98%A8-%EB%B6%80%EB%B6%84\" aria-label=\"aboutarrays에서 나온 부분 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AboutArrays에서 나온 부분</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"함수 외부\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> message<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">overrideMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"함수 내부\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> message<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> result1 <span class=\"token operator\">=</span> <span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> result2 <span class=\"token operator\">=</span> <span class=\"token function\">overrideMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 아래는 어떻게 될까?</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//함수 외부</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//함수 내부</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Q. result1 왜 “함수 외부”?</strong></p>\n<ol>\n<li>result1는 getMessage() 함수 결과를 받는데,</li>\n<li>getMessage() 함수 안에 return문에 message를 받아서 쓴다.</li>\n<li>하지만, message라는 변수는 getMessage 함수안에 없기 때문에 <strong>제일 가까운 거리</strong>의 message라는 변수를 찾아다니게 되고,</li>\n<li>그 전에 선언했던 message = “함수 외부”; 를 가져오게 되는 것.</li>\n</ol>\n<p><strong>Q. result2 왜 “함수 내부”?</strong></p>\n<ol>\n<li>result2는 overrideMessage() 함수 결과를 받는데,</li>\n<li>result2 내부의 message가 가장 가까우므로 이거 리턴.</li>\n</ol>\n<p><strong>Q. 맨 마지막 console.log(message) 결과는?</strong></p>\n<p>결과는 “함수 외부”</p>\n<p>overrideMessage() 함수 내부의 결과는 overrideMessage() 함수 내부에만 영향을 미치기때문에 반영 X</p>\n<p><strong>이 부분은 다음주의 Scope와 연관된 부분이니 다음주에 더 자세히 알 수 있다.</strong></p>\n<blockquote>\n<p> <strong>자바스크립트 Definition(정의)에는 거리가 중요하다고 하는 부분이 있는데, Scope와 관련된 개념이니 다음주 Scope 잘 배우자</strong></p>\n</blockquote>\n<p>js에는 예약어(키워드)가 있는데,\n이는 변수명으로 쓸 수 없다.</p>\n<blockquote>\n<p>function , var, let, const, for, if, return 등등…</p>\n</blockquote>\n<h2 id=\"q-indexof숫자-or-문자열\" style=\"position:relative;\"><a href=\"#q-indexof%EC%88%AB%EC%9E%90-or-%EB%AC%B8%EC%9E%90%EC%97%B4\" aria-label=\"q indexof숫자 or 문자열 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q. indexOf(숫자 or 문자열?)</h2>\n<p>과제 AboutString.js에서</p>\n<blockquote>\n<p>orderMessage.indexOf(3)이 왜 되는지? orderMessage.indexOf(“3”)이 되어야 되는게 아닌지?</p>\n</blockquote>\n<p>원래 indexOf()에는 문자열이 들어가야되는게 맞지만,\n자동으로 string으로 변환? 되었다고 보면 된다.</p>\n<p>함수에는 요런 예외적인 부분이 있을 수 있다는 점!</p>\n<h2 id=\"q-var-vs-let\" style=\"position:relative;\"><a href=\"#q-var-vs-let\" aria-label=\"q var vs let permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q. var VS let</h2>\n<blockquote>\n<p> var 보다는 let을 사용하는게 좋지 않을까?</p>\n</blockquote>\n<p>맞다. 하지만 Prep에서는 var 쓰는 편</p>\n<p>자바스크립트 변수 선언은</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> var1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> var2 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> var3 <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>3가지가 있는데, 이 차이의 개념을 알려면 Scope, Hoisting과 같은 자바스크립트 핵심개념을 알아아 됨.</p>\n<p><strong>나중에 배울 수 있다. 궁금하면 구글 검색.</strong></p>\n<h2 id=\"q-mdn에서-indexofsearchelement-fromindex-\" style=\"position:relative;\"><a href=\"#q-mdn%EC%97%90%EC%84%9C-indexofsearchelement-fromindex-\" aria-label=\"q mdn에서 indexofsearchelement fromindex  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q. mdn에서 indexOf(searchElement[, fromIndex) ?</h2>\n<p>[ 대괄호로 표기된 부분은 <strong>Optional</strong> </p>\n<p>대괄호 뒷부분은 없어도 되는 부분이라</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">arr<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>searchElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>searchElement<span class=\"token punctuation\">,</span> fromIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>둘 다 가능하다는 표현.</p>\n<h2 id=\"q-tomatch에서-정규표현식\" style=\"position:relative;\"><a href=\"#q-tomatch%EC%97%90%EC%84%9C-%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D\" aria-label=\"q tomatch에서 정규표현식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q. toMatch()에서 정규표현식?</h2>\n<h4 id=\"정규표현식\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D\" aria-label=\"정규표현식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정규표현식</h4>\n<p><strong>정규표현식이 무엇인지는 알 필요가 있지만 어떻게 쓰는지는 지금은 공부 할 필요가 없다.</strong></p>\n<p>현업에서 종종 쓰일일이 있지만, 그때그때 필요할 때 공부하면 된다.</p>\n<h4 id=\"tomatch\" style=\"position:relative;\"><a href=\"#tomatch\" aria-label=\"tomatch permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>toMatch()</h4>\n<p>Mocha?라는 라이브러리에 내장된 함수.</p>\n<p>Mocha?라이브러리를 쓸일이 아니면 쓰일일이 없으니 신경안써도 됨.</p>\n<h2 id=\"q-객체속성키-\" style=\"position:relative;\"><a href=\"#q-%EA%B0%9D%EC%B2%B4%EC%86%8D%EC%84%B1%ED%82%A4-\" aria-label=\"q 객체속성키  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q. 객체.속성키() ?</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">welcomeMessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\"안녕!\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> say<span class=\"token operator\">:</span> welcomeMessage <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nperson<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"something\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 객체의 속성으로 함수를 넣을 수 있기 때문에,</span>\n<span class=\"token comment\">// 해당 키값으로 함수를 불러오고 사용 할 수 있다.</span>\n<span class=\"token comment\">// 여기선 key가 say, value가 welcomeMessage함수.</span>\n<span class=\"token comment\">// person의 say라는 속성으로 함수 사용.</span>\n\n<span class=\"token comment\">// person.say(\"something\")</span>\n<span class=\"token comment\">// welcomeMessage(\"something\")</span>\n<span class=\"token comment\">// person.say와 welcomeMessage는 같다.</span>\n<span class=\"token comment\">// person.say가 가리키고 있는것이 welcomeMessage이기 때문에.</span></code></pre></div>\n<h2 id=\"q-vs-확장프로그램-prettier\" style=\"position:relative;\"><a href=\"#q-vs-%ED%99%95%EC%9E%A5%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-prettier\" aria-label=\"q vs 확장프로그램 prettier permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q. VS 확장프로그램 Prettier?</h2>\n<p>써도 상관없다. BootCamp에서는 사용 못함.</p>\n<p>Prettier는 opinionated code formatter.</p>\n<p>prettier만의 코드스타일로 만들어 준다.</p>\n<p><strong>어떻게 코드스타일링을 하는지 참조하면 좋다.</strong></p>\n<p>하지만, opnionated하기 때문에,\nprettier의 코드스타일을 원치 않하지 않는데 적용되거나,\n회사 내부의 코드스타일을 망칠 수 있기 때문에 <strong>이런 상황에서는 사용하면 안된다.</strong></p>\n<p>다른 사람의 코드스타일을 이해하고 맞춰서 쓸 수 있으려면 어떤 한 코드스타일을 습득하거나 정립한 후부터 가능.</p>\n<p>코드스타일은 정답이 없기 때문에 <strong>회사에 맞추면 된다.</strong></p>\n<h2 id=\"etc\" style=\"position:relative;\"><a href=\"#etc\" aria-label=\"etc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ETC</h2>\n<blockquote>\n<ul>\n<li>금요일 깜짝 선물은 여수 바다. 실망…</li>\n<li>커피 수여식 여러분 감사합니다..!</li>\n<li>켄님은 돈까스 많이 좋아하신다.</li>\n<li>나이키는 재수없어서 싫어하신다.</li>\n<li>이번주말에 코드리뷰 진행된다.</li>\n</ul>\n</blockquote>","frontmatter":{"title":"Prep 1주차 금요일 오피스아워 정리","date":"October 09, 2020"}}},"pageContext":{"slug":"/2020/vanillacoding_prep/Prep1주차금요일_오피스아워정리/","previous":{"fields":{"slug":"/2020/vanillacoding_prep/Prep1주차수요일_오피스아워정리/"},"frontmatter":{"title":"바닐라코딩 Prep코스 사전준비 - 1주차 두번째 오피스아워 정리","category":"vanilla coding","draft":false}},"next":{"fields":{"slug":"/2020/programmers_algorithm_python/2020-10-12-프로그래머스_가장_긴_팰린드롬_Lv3/"},"frontmatter":{"title":"프로그래머스 - 가장 긴 팰린드롬 Lv3","category":"algorithm","draft":false}}}}}