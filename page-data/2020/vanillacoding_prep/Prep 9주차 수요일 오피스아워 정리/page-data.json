{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020/vanillacoding_prep/Prep 9주차 수요일 오피스아워 정리/","result":{"data":{"site":{"siteMetadata":{"title":"HaYoung's Log","author":"@Ha-Young","siteUrl":"https://ha-young.github.io","comment":{"utterances":"Ha-Young/my-blog"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"0355e05f-213c-59f0-a835-d41ec1579bbb","excerpt":"Promise 사용하는건 그렇게 어렵지 않다. 인자로 함수를 받는 생성자 함수! 그리고 이 함수의 인자는 resolve, reject를 받아야 한다. resolve는 작업 완료시 호출 reject는 애러시 호출 순서 순서는  다들 Promise 생성자 함수가 비동기로 작동한다고 생각해서 으로 생각하기 쉬우나, 생성자 함수 자체는 비동기가 아님을 유의하자! 내부에서 비동기작업이 이뤄지고,  완료후에 함수가 쓰여야 한다! 또 로 생각하기 쉬우나, 사실은 순서로 작동한다. Promise…","html":"<h2 id=\"promise\" style=\"position:relative;\"><a href=\"#promise\" aria-label=\"promise permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Promise</h2>\n<p>사용하는건 그렇게 어렵지 않다.</p>\n<p>인자로 함수를 받는 생성자 함수!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그리고 이 함수의 인자는 resolve, reject를 받아야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">func</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Async ToDo...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>resolve는 작업 완료시 호출</li>\n<li>reject는 애러시 호출</li>\n</ul>\n<h3 id=\"순서\" style=\"position:relative;\"><a href=\"#%EC%88%9C%EC%84%9C\" aria-label=\"순서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>순서</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">func</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\np1<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>순서는 <code class=\"language-text\">1 -> 2 -> 3 -> 5 -> 4</code></p>\n<ul>\n<li>다들 Promise 생성자 함수가 비동기로 작동한다고 생각해서 <code class=\"language-text\">1 -> 3</code>으로 생각하기 쉬우나, 생성자 함수 자체는 비동기가 아님을 유의하자! 내부에서 비동기작업이 이뤄지고,  완료후에 <code class=\"language-text\">resolve</code>함수가 쓰여야 한다!</li>\n<li>\n<p>또 <code class=\"language-text\">1 -> 2 -> 3 -> 4</code>로 생각하기 쉬우나, 사실은 <code class=\"language-text\">1 -> 2 -> 3 -> 5 -> 4</code>순서로 작동한다.</p>\n<ul>\n<li>Promise의 기본적인 작동 방식이 resolve()로 실행은 되었어도, then의 인자값으로 받은 <code class=\"language-text\">callback</code> 함수가 <strong>콜백 큐</strong>에 들어가진다. 따라서 5가 먼저 출력되는 것.</li>\n</ul>\n</li>\n</ul>\n<p>특징은</p>\n<ul>\n<li>딱 한번만 사용할 수 있다.</li>\n<li>비동기 결과값을 then을 통해 받을 수 있다.</li>\n</ul>\n<h3 id=\"q-then의-파라미터인-함수를-안받아도-되는가\" style=\"position:relative;\"><a href=\"#q-then%EC%9D%98-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0%EC%9D%B8-%ED%95%A8%EC%88%98%EB%A5%BC-%EC%95%88%EB%B0%9B%EC%95%84%EB%8F%84-%EB%90%98%EB%8A%94%EA%B0%80\" aria-label=\"q then의 파라미터인 함수를 안받아도 되는가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q. then의 파라미터인 함수를 안받아도 되는가?</h3>\n<p>안받아도 상관없다. (비동기 실행에 대한 결과값이 필요 없다면)</p>\n<p>만약, 비동기 결과값이 필요하다면, resolve()함수에 결과 인자를 넘기고, 이후 then 메소드의 콜백함수 인자값으로 받을 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">func</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\np1<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//10 출력</span></code></pre></div>\n<ul>\n<li>그냥 비동기 실행만 -> 인자 넘길 필요 없음</li>\n<li>비동기 실행하고 결과값도 필요 -> resolve(result) 후 then callback함수 인자로 받기</li>\n</ul>\n<p>상황에 맞춰서 사용하자.</p>\n<h3 id=\"q-프로미스의-결과값은\" style=\"position:relative;\"><a href=\"#q-%ED%94%84%EB%A1%9C%EB%AF%B8%EC%8A%A4%EC%9D%98-%EA%B2%B0%EA%B3%BC%EA%B0%92%EC%9D%80\" aria-label=\"q 프로미스의 결과값은 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q. 프로미스의 결과값은?</h3>\n<p>프로미스 인스턴스.</p>\n<p>status로 상태를 확인 할 수 있고, <code class=\"language-text\">then()</code>과 <code class=\"language-text\">catch()</code> 메소드를 사용 할 수 있다.</p>\n<h3 id=\"callback-hell\" style=\"position:relative;\"><a href=\"#callback-hell\" aria-label=\"callback hell permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Callback Hell</h3>\n<p>간단히 아래와 같은 예시와 비슷하다고 보면 되는데,</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">func1</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">func2</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">func3</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \n            <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">func4</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>1초 뒤 1</li>\n<li>3초 뒤 2</li>\n<li>6초 뒤 3</li>\n<li>10초 뒤 4</li>\n</ul>\n<p>다음과 같이 비동기 작업 이후에도 또 다음 비동기 작업 콜백함수를 계속해서 사용하면 callback hell이라고 할 수 있다.</p>\n<p>더 정확한 예시는 강의자료 참고.</p>\n<h4 id=\"부작용\" style=\"position:relative;\"><a href=\"#%EB%B6%80%EC%9E%91%EC%9A%A9\" aria-label=\"부작용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>부작용</h4>\n<ul>\n<li>가독성</li>\n<li>코드 이해</li>\n<li>\n<p><strong>수동적인 자세로 비동기 처리</strong></p>\n<ul>\n<li>다음 콜백함수가 실행되기 까지 기다려야 된다.</li>\n<li>로직이 잘못된건지, 비동기 작업이 오래걸리는 건지 알 수 없다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"promise-장점\" style=\"position:relative;\"><a href=\"#promise-%EC%9E%A5%EC%A0%90\" aria-label=\"promise 장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Promise 장점</h3>\n<p>가독성과 코드이해를 향상시킬 뿐만아니라 <code class=\"language-text\">new Promise</code>로 생성된 <code class=\"language-text\">promise 인스턴스</code>를 통해 능동적으로 비동기 처리가 가능하다.</p>\n<blockquote>\n<p>사실 Promise는 callback hell을 해결하는건 아니다.</p>\n</blockquote>\n<ul>\n<li>작업상태 확인</li>\n<li>비동기 결과값 받기</li>\n<li>애러 핸들링</li>\n<li>확장가능성 (객체지향 프로그래밍으로 만들어진 객체이기 때문에)</li>\n</ul>\n<h4 id=\"비동기-애러-핸들링-처리\" style=\"position:relative;\"><a href=\"#%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%95%A0%EB%9F%AC-%ED%95%B8%EB%93%A4%EB%A7%81-%EC%B2%98%EB%A6%AC\" aria-label=\"비동기 애러 핸들링 처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비동기 애러 핸들링 처리</h4>\n<p>예전에는 애러처리 방식이 동기상황일떄와 비동기상황일때가 달랐는데, <code class=\"language-text\">Promise</code>의 <code class=\"language-text\">then</code>과 <code class=\"language-text\">catch</code>를 이용해서 동기상황에서의 애러처리인 <code class=\"language-text\">try-catch</code> 문과 같은 방식으로 애러처리가 가능해졌다. 이는 코드 설계 자체를 바꾸는 큰 일!</p>\n<h2 id=\"async-await-es2017\" style=\"position:relative;\"><a href=\"#async-await-es2017\" aria-label=\"async await es2017 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>async await ES2017</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">asyncFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">asyncFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">async await</code>은 <code class=\"language-text\">Promise</code>를 이해했다면 저절로 이해될 것이다.</p>\n<p>비동기 처리의 순서가</p>\n<ol>\n<li>callback pattern: continuous passing style</li>\n<li>Promise</li>\n<li>async/await</li>\n</ol>\n<p>다음과 같음.</p>\n<p>우리는 <strong>Promise 이해부터!!</strong></p>\n<h2 id=\"promise에-대해-계속-공부하자-고차원적인-개념\" style=\"position:relative;\"><a href=\"#promise%EC%97%90-%EB%8C%80%ED%95%B4-%EA%B3%84%EC%86%8D-%EA%B3%B5%EB%B6%80%ED%95%98%EC%9E%90-%EA%B3%A0%EC%B0%A8%EC%9B%90%EC%A0%81%EC%9D%B8-%EA%B0%9C%EB%85%90\" aria-label=\"promise에 대해 계속 공부하자 고차원적인 개념 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Promise에 대해 계속 공부하자 (고차원적인 개념)</h2>\n<p><a href=\"https://blog.domenic.me/youre-missing-the-point-of-promises/\">You’re Missing the Point of Promises</a></p>\n<p>외의 유명한 사람들의 블로그</p>\n<h2 id=\"공부할-때-유명한-블로그들-글을-참조하자\" style=\"position:relative;\"><a href=\"#%EA%B3%B5%EB%B6%80%ED%95%A0-%EB%95%8C-%EC%9C%A0%EB%AA%85%ED%95%9C-%EB%B8%94%EB%A1%9C%EA%B7%B8%EB%93%A4-%EA%B8%80%EC%9D%84-%EC%B0%B8%EC%A1%B0%ED%95%98%EC%9E%90\" aria-label=\"공부할 때 유명한 블로그들 글을 참조하자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>공부할 때 유명한 블로그들 글을 참조하자</h2>\n<p><a href=\"https://kentcdodds.com/\">Kent C Dodds</a></p>\n<p><a href=\"https://blog.domenic.me/\">Domenic</a></p>\n<p>과 같은 사람들 등등…</p>\n<p>믿을만한 소스가 아니라면, 검증과정을 거쳐야 한다.</p>\n<ul>\n<li>추가적으로 조사</li>\n<li>예제 직접 확인</li>\n<li>등등…</li>\n</ul>\n<h2 id=\"etc\" style=\"position:relative;\"><a href=\"#etc\" aria-label=\"etc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ETC</h2>\n<ul>\n<li>\n<p>스탠드업 데이 외부적으로 하는건 취소</p>\n<ul>\n<li>유튜브로 시청가능</li>\n</ul>\n</li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/2020/vanillacoding_prep/Prep%209%EC%A3%BC%EC%B0%A8%20%EC%88%98%EC%9A%94%EC%9D%BC%20%EC%98%A4%ED%94%BC%EC%8A%A4%EC%95%84%EC%9B%8C%20%EC%A0%95%EB%A6%AC/#promise\">Promise</a></p>\n<ul>\n<li><a href=\"/2020/vanillacoding_prep/Prep%209%EC%A3%BC%EC%B0%A8%20%EC%88%98%EC%9A%94%EC%9D%BC%20%EC%98%A4%ED%94%BC%EC%8A%A4%EC%95%84%EC%9B%8C%20%EC%A0%95%EB%A6%AC/#%EC%88%9C%EC%84%9C\">순서</a></li>\n<li><a href=\"/2020/vanillacoding_prep/Prep%209%EC%A3%BC%EC%B0%A8%20%EC%88%98%EC%9A%94%EC%9D%BC%20%EC%98%A4%ED%94%BC%EC%8A%A4%EC%95%84%EC%9B%8C%20%EC%A0%95%EB%A6%AC/#q-then%EC%9D%98-%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0%EC%9D%B8-%ED%95%A8%EC%88%98%EB%A5%BC-%EC%95%88%EB%B0%9B%EC%95%84%EB%8F%84-%EB%90%98%EB%8A%94%EA%B0%80\">Q. then의 파라미터인 함수를 안받아도 되는가?</a></li>\n<li><a href=\"/2020/vanillacoding_prep/Prep%209%EC%A3%BC%EC%B0%A8%20%EC%88%98%EC%9A%94%EC%9D%BC%20%EC%98%A4%ED%94%BC%EC%8A%A4%EC%95%84%EC%9B%8C%20%EC%A0%95%EB%A6%AC/#q-%ED%94%84%EB%A1%9C%EB%AF%B8%EC%8A%A4%EC%9D%98-%EA%B2%B0%EA%B3%BC%EA%B0%92%EC%9D%80\">Q. 프로미스의 결과값은?</a></li>\n<li>\n<p><a href=\"/2020/vanillacoding_prep/Prep%209%EC%A3%BC%EC%B0%A8%20%EC%88%98%EC%9A%94%EC%9D%BC%20%EC%98%A4%ED%94%BC%EC%8A%A4%EC%95%84%EC%9B%8C%20%EC%A0%95%EB%A6%AC/#callback-hell\">Callback Hell</a></p>\n<ul>\n<li><a href=\"/2020/vanillacoding_prep/Prep%209%EC%A3%BC%EC%B0%A8%20%EC%88%98%EC%9A%94%EC%9D%BC%20%EC%98%A4%ED%94%BC%EC%8A%A4%EC%95%84%EC%9B%8C%20%EC%A0%95%EB%A6%AC/#%EB%B6%80%EC%9E%91%EC%9A%A9\">부작용</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/2020/vanillacoding_prep/Prep%209%EC%A3%BC%EC%B0%A8%20%EC%88%98%EC%9A%94%EC%9D%BC%20%EC%98%A4%ED%94%BC%EC%8A%A4%EC%95%84%EC%9B%8C%20%EC%A0%95%EB%A6%AC/#promise-%EC%9E%A5%EC%A0%90\">Promise 장점</a></p>\n<ul>\n<li><a href=\"/2020/vanillacoding_prep/Prep%209%EC%A3%BC%EC%B0%A8%20%EC%88%98%EC%9A%94%EC%9D%BC%20%EC%98%A4%ED%94%BC%EC%8A%A4%EC%95%84%EC%9B%8C%20%EC%A0%95%EB%A6%AC/#%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%95%A0%EB%9F%AC-%ED%95%B8%EB%93%A4%EB%A7%81-%EC%B2%98%EB%A6%AC\">비동기 애러 핸들링 처리</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"/2020/vanillacoding_prep/Prep%209%EC%A3%BC%EC%B0%A8%20%EC%88%98%EC%9A%94%EC%9D%BC%20%EC%98%A4%ED%94%BC%EC%8A%A4%EC%95%84%EC%9B%8C%20%EC%A0%95%EB%A6%AC/#async-await-es2017\">async await ES2017</a></li>\n<li><a href=\"/2020/vanillacoding_prep/Prep%209%EC%A3%BC%EC%B0%A8%20%EC%88%98%EC%9A%94%EC%9D%BC%20%EC%98%A4%ED%94%BC%EC%8A%A4%EC%95%84%EC%9B%8C%20%EC%A0%95%EB%A6%AC/#promise%EC%97%90-%EB%8C%80%ED%95%B4-%EA%B3%84%EC%86%8D-%EA%B3%B5%EB%B6%80%ED%95%98%EC%9E%90-%EA%B3%A0%EC%B0%A8%EC%9B%90%EC%A0%81%EC%9D%B8-%EA%B0%9C%EB%85%90\">Promise에 대해 계속 공부하자 (고차원적인 개념)</a></li>\n<li><a href=\"/2020/vanillacoding_prep/Prep%209%EC%A3%BC%EC%B0%A8%20%EC%88%98%EC%9A%94%EC%9D%BC%20%EC%98%A4%ED%94%BC%EC%8A%A4%EC%95%84%EC%9B%8C%20%EC%A0%95%EB%A6%AC/#%EA%B3%B5%EB%B6%80%ED%95%A0-%EB%95%8C-%EC%9C%A0%EB%AA%85%ED%95%9C-%EB%B8%94%EB%A1%9C%EA%B7%B8%EB%93%A4-%EA%B8%80%EC%9D%84-%EC%B0%B8%EC%A1%B0%ED%95%98%EC%9E%90\">공부할 때 유명한 블로그들 글을 참조하자</a></li>\n<li><a href=\"/2020/vanillacoding_prep/Prep%209%EC%A3%BC%EC%B0%A8%20%EC%88%98%EC%9A%94%EC%9D%BC%20%EC%98%A4%ED%94%BC%EC%8A%A4%EC%95%84%EC%9B%8C%20%EC%A0%95%EB%A6%AC/#etc\">ETC</a></li>\n</ul>","frontmatter":{"title":"바닐라코딩 Prep 9주차 수요일 오피스아워 정리","date":"December 02, 2020"}}},"pageContext":{"slug":"/2020/vanillacoding_prep/Prep 9주차 수요일 오피스아워 정리/","previous":{"fields":{"slug":"/2020/vanillacoding_prep/Prep 9주차 월요일 오피스아워 정리/"},"frontmatter":{"title":"바닐라코딩 Prep 9주차 월요일 오피스아워 정리","category":"vanilla coding","draft":false}},"next":{"fields":{"slug":"/2020/javascript/하옹의-자바스크립트-식사---Scope/"},"frontmatter":{"title":"하옹의 자바스크립트 식사 - Scope","category":"javascript","draft":false}}}},"staticQueryHashes":["1402886152","145675779","3128451518"]}