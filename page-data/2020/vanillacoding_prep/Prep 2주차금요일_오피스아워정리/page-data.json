{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020/vanillacoding_prep/Prep 2주차금요일_오피스아워정리/","result":{"data":{"site":{"siteMetadata":{"title":"HaYoung's Log","author":"@Ha-Young","siteUrl":"https://ha-young.github.io","comment":{"utterances":"Ha-Young/my-blog"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"64b39815-5a1a-53dc-87f2-460477618f76","excerpt":"Q. DOM 실습 좀더 하고싶을땐? Prep 과제로 충분하지만 더 하고싶다면, 인터넷에 javascript mini project 검색. 아니면, 스스로 아이디어를 내서 만들어보자. querySelector vs getElementById DOM에있는 요소를 선택하는 여러 방법들 중에서 (querySelector, getElementById, getElementsByClassName…) 어느것이 더 효율적일까? 결론은 본인이 쓰기에 편한걸로. 켄님은 querySelector…","html":"<h2 id=\"q-dom-실습-좀더-하고싶을땐\" style=\"position:relative;\"><a href=\"#q-dom-%EC%8B%A4%EC%8A%B5-%EC%A2%80%EB%8D%94-%ED%95%98%EA%B3%A0%EC%8B%B6%EC%9D%84%EB%95%90\" aria-label=\"q dom 실습 좀더 하고싶을땐 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q. DOM 실습 좀더 하고싶을땐?</h2>\n<p>Prep 과제로 충분하지만 더 하고싶다면,</p>\n<p>인터넷에 javascript mini project 검색.</p>\n<p>아니면, 스스로 아이디어를 내서 만들어보자.</p>\n<h2 id=\"queryselector-vs-getelementbyid\" style=\"position:relative;\"><a href=\"#queryselector-vs-getelementbyid\" aria-label=\"queryselector vs getelementbyid permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>querySelector vs getElementById</h2>\n<p>DOM에있는 요소를 선택하는 여러 방법들 중에서 (querySelector, getElementById, getElementsByClassName…) 어느것이 더 효율적일까?</p>\n<p>결론은 본인이 쓰기에 편한걸로.</p>\n<p>켄님은 querySelector 추천. (범용적으로 사용가능한 것 같음)</p>\n<p>기능적인 차이는 95%가 같으나 5%정도 미세하게 다른데,\n아직 이 차이에 대해서 깊은 관심은 없어도 된다.</p>\n<p>하지만, 사용에 있어서 일관성이 있으면 좋겠다.\nquerySelector만 쓰거나…\ngetElementById와 같은 것들만 쓰거나…</p>\n<p>querySelector와 getElementById의 5%가 다른 차이점은 한번 찾아보자.</p>\n<h2 id=\"과제-게임-재시작시에-생길-수-있는-버그-restart-button\" style=\"position:relative;\"><a href=\"#%EA%B3%BC%EC%A0%9C-%EA%B2%8C%EC%9E%84-%EC%9E%AC%EC%8B%9C%EC%9E%91%EC%8B%9C%EC%97%90-%EC%83%9D%EA%B8%B8-%EC%88%98-%EC%9E%88%EB%8A%94-%EB%B2%84%EA%B7%B8-restart-button\" aria-label=\"과제 게임 재시작시에 생길 수 있는 버그 restart button permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>과제 게임 재시작시에 생길 수 있는 버그? restart button?</h2>\n<p>start Button이나 restart Button 눌렀을 때 작동이 2번, 혹은 그 이상 되는 경우? </p>\n<p>이 부분은 <strong>addEventListener, removeEventListener</strong>와 관련이 있다. </p>\n<p>이벤트 실행구문이나 로직중에서 만약, addEventListener가 있다면 removeEventListener도 같이 이루어져야 된다.</p>\n<p>로직에 의해서 addEventListener로 여러번 등록되면 여러번 등록된 만큼 실행이 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  startButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ToDo...</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 이벤트 한번 등록</span>\n<span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 이벤트 두번 등록</span>\n<span class=\"token comment\">// 따라서 startButton click시에 위 event 함수가 2번 실행된다.</span></code></pre></div>\n<p>그래서 한번만 addEventListener가 이루어지도록 하거나, 로직상에 addEventListener가 반복된다면 removeEventListener도 동시에 이루어져야 된다.</p>\n<p>그래서 추후에 이벤트함수가 여러번 실행되는 것 같다면 addEventListener가 여러번 이루어지고 있지는 않은지 확인을 해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">startBtnClickHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ToDo...</span>\n  <span class=\"token punctuation\">}</span>\n  startButton<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> startBtnClickHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 이렇게 해도 똑같다.</span>\n  <span class=\"token comment\">// doSomething함수가 실행될때마다 startBtnClickHandler가 함수선언(생성)되고 등록되기 때문. replace되지 않는다.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>하지만, 한 요소의 같은 이벤트에 여러개의 함수를 등록하는 것 보다 하나의 이벤트 함수에 다른 함수들을 사용하도록 하는것이 훨씬 바람직하다.(어쩔 수 없는 상황 제외)</p>\n<p><strong>여러번 등록하게 된다면,  브라우저에 일이 추가가 되는 개념(이벤트 대기, 감지)이라 브라우저 효율이나 성능이 떨어질 수 있다.</strong></p>\n<h2 id=\"tic-tac-toe-개발시-tip-네모판cell-클릭시-x-o-쓰는법-중복-기입-회피방법\" style=\"position:relative;\"><a href=\"#tic-tac-toe-%EA%B0%9C%EB%B0%9C%EC%8B%9C-tip-%EB%84%A4%EB%AA%A8%ED%8C%90cell-%ED%81%B4%EB%A6%AD%EC%8B%9C-x-o-%EC%93%B0%EB%8A%94%EB%B2%95-%EC%A4%91%EB%B3%B5-%EA%B8%B0%EC%9E%85-%ED%9A%8C%ED%94%BC%EB%B0%A9%EB%B2%95\" aria-label=\"tic tac toe 개발시 tip 네모판cell 클릭시 x o 쓰는법 중복 기입 회피방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tic Tac Toe 개발시 TIP. 네모판(cell) 클릭시 X, O 쓰는법? 중복 기입 회피방법?</h2>\n<p>3*3 board로 markup 되었다고 가정.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> boardElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".board\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nboardElement<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ToDo </span>\n  <span class=\"token comment\">// 전체 보드(Cell 상위 Element)하나에만 addEventListener해줘도 각 Cell Element에 대해 클릭이벤트가 가능하다.</span>\n  <span class=\"token comment\">// 이전시간에 배웠던 target / currentTarget</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> boardElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".board\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> isXPlaying <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 차례. true: X, false: O</span>\n\nboardElement<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isXPlaying<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 눌러진 cell에 X라고 변경</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 눌러진 cell에 O라고 변경</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>현재 눌러진 cell을 어떻게 알 수 있을까?</p>\n<p>그것이 바로 저번시간에 배웠던 event.target</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> boardElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".board\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> isXPlaying <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\nboardElement<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// e.target &lt;-> e.currentTarget</span>\n  <span class=\"token keyword\">var</span> targetElement <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isXPlaying<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 눌러진 cell에 X라고 변경</span>\n    targetElement<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">\"X\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 눌러진 cell에 O라고 변경</span>\n    targetElement<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">\"O\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  isXPlaying <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>isXPlaying <span class=\"token comment\">// 다음과 같이 toggle시켜 플레이어 순서를 바꿔준다.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>일단, X / O 반복해서 기입하는건 완성.</p>\n<p>그럼 중복기입 회피는 어떻게 할 수 있을까?</p>\n<p> -> e.target의 값이 비어있는 경우에만 쓰고 값이 있다면 무시하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>targetElement<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">===</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isXPlaying<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 눌러진 cell에 X라고 변경</span>\n    targetElement<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">\"X\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 눌러진 cell에 O라고 변경</span>\n    targetElement<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">\"O\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다음과 같이 처리도 가능하겠다.</p>\n<h2 id=\"q-이벤트-추가-말고도-브라우저에-부담을-주는-것들\" style=\"position:relative;\"><a href=\"#q-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%B6%94%EA%B0%80-%EB%A7%90%EA%B3%A0%EB%8F%84-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%97%90-%EB%B6%80%EB%8B%B4%EC%9D%84-%EC%A3%BC%EB%8A%94-%EA%B2%83%EB%93%A4\" aria-label=\"q 이벤트 추가 말고도 브라우저에 부담을 주는 것들 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q. 이벤트 추가 말고도 브라우저에 부담을 주는 것들?</h2>\n<p>브라우저가 해야하는 일이 많아지면 부담이 늘어난다고 보면 된다.</p>\n<ul>\n<li>이벤트 추가</li>\n<li>DOM 조작</li>\n<li>setTimeout, setInterval 함수</li>\n<li>등등…</li>\n</ul>\n<h2 id=\"q-innerhtml과-textcontent-차이\" style=\"position:relative;\"><a href=\"#q-innerhtml%EA%B3%BC-textcontent-%EC%B0%A8%EC%9D%B4\" aria-label=\"q innerhtml과 textcontent 차이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q. innerHTML과 textContent 차이?</h2>\n<p>두가지의 기능이 완전 다르다.</p>\n<p>innerHTML은 element의 내부 html을 설정, 변경하는 것!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">someElement<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;img src='...' alt=''/>\"</span></code></pre></div>\n<p>와 같이 HTML을 수정할 수 있다.</p>\n<blockquote>\n<p>이전에 someElement 내부에 들어있던 기존 html 값들은 다 없어진다.</p>\n</blockquote>\n<p>textContent는 element의 text값만 설정, 변경하는 것!</p>\n<h4 id=\"innertext-vs-textcontent\" style=\"position:relative;\"><a href=\"#innertext-vs-textcontent\" aria-label=\"innertext vs textcontent permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>innerText VS textContent</h4>\n<p>innerText보다는 textContent가 더 권장된다.</p>\n<p>왜 권장되는지는 찾아보자.</p>\n<h4 id=\"innerhtml과-createelement---appendchild-다른점\" style=\"position:relative;\"><a href=\"#innerhtml%EA%B3%BC-createelement---appendchild-%EB%8B%A4%EB%A5%B8%EC%A0%90\" aria-label=\"innerhtml과 createelement   appendchild 다른점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>innerHTML과 createElement - appendChild 다른점?</h4>\n<p>innerHTML은 우리가 HTML 파일을 생성(Marup)할때처럼 문자열처럼 값을 넣을 수 있다면,</p>\n<p>createElement - appendChild는 각 요소를 프로그래밍적으로 만들어서 넣는다고 보면된다.</p>\n<p>상황에 맞게 쓰면 된다. 후자는 요소를 여러개 추가해야되는 상황이면 일일이 만들어서 넣어줘야 된다.</p>\n<p>둘 다 상황에 맞게 잘 쓰면 된다.</p>","tableOfContents":"<ul>\n<li><a href=\"/2020/vanillacoding_prep/Prep%202%EC%A3%BC%EC%B0%A8%EA%B8%88%EC%9A%94%EC%9D%BC_%EC%98%A4%ED%94%BC%EC%8A%A4%EC%95%84%EC%9B%8C%EC%A0%95%EB%A6%AC/#q-dom-%EC%8B%A4%EC%8A%B5-%EC%A2%80%EB%8D%94-%ED%95%98%EA%B3%A0%EC%8B%B6%EC%9D%84%EB%95%90\">Q. DOM 실습 좀더 하고싶을땐?</a></li>\n<li><a href=\"/2020/vanillacoding_prep/Prep%202%EC%A3%BC%EC%B0%A8%EA%B8%88%EC%9A%94%EC%9D%BC_%EC%98%A4%ED%94%BC%EC%8A%A4%EC%95%84%EC%9B%8C%EC%A0%95%EB%A6%AC/#queryselector-vs-getelementbyid\">querySelector vs getElementById</a></li>\n<li><a href=\"/2020/vanillacoding_prep/Prep%202%EC%A3%BC%EC%B0%A8%EA%B8%88%EC%9A%94%EC%9D%BC_%EC%98%A4%ED%94%BC%EC%8A%A4%EC%95%84%EC%9B%8C%EC%A0%95%EB%A6%AC/#%EA%B3%BC%EC%A0%9C-%EA%B2%8C%EC%9E%84-%EC%9E%AC%EC%8B%9C%EC%9E%91%EC%8B%9C%EC%97%90-%EC%83%9D%EA%B8%B8-%EC%88%98-%EC%9E%88%EB%8A%94-%EB%B2%84%EA%B7%B8-restart-button\">과제 게임 재시작시에 생길 수 있는 버그? restart button?</a></li>\n<li><a href=\"/2020/vanillacoding_prep/Prep%202%EC%A3%BC%EC%B0%A8%EA%B8%88%EC%9A%94%EC%9D%BC_%EC%98%A4%ED%94%BC%EC%8A%A4%EC%95%84%EC%9B%8C%EC%A0%95%EB%A6%AC/#tic-tac-toe-%EA%B0%9C%EB%B0%9C%EC%8B%9C-tip-%EB%84%A4%EB%AA%A8%ED%8C%90cell-%ED%81%B4%EB%A6%AD%EC%8B%9C-x-o-%EC%93%B0%EB%8A%94%EB%B2%95-%EC%A4%91%EB%B3%B5-%EA%B8%B0%EC%9E%85-%ED%9A%8C%ED%94%BC%EB%B0%A9%EB%B2%95\">Tic Tac Toe 개발시 TIP. 네모판(cell) 클릭시 X, O 쓰는법? 중복 기입 회피방법?</a></li>\n<li><a href=\"/2020/vanillacoding_prep/Prep%202%EC%A3%BC%EC%B0%A8%EA%B8%88%EC%9A%94%EC%9D%BC_%EC%98%A4%ED%94%BC%EC%8A%A4%EC%95%84%EC%9B%8C%EC%A0%95%EB%A6%AC/#q-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%B6%94%EA%B0%80-%EB%A7%90%EA%B3%A0%EB%8F%84-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%97%90-%EB%B6%80%EB%8B%B4%EC%9D%84-%EC%A3%BC%EB%8A%94-%EA%B2%83%EB%93%A4\">Q. 이벤트 추가 말고도 브라우저에 부담을 주는 것들?</a></li>\n<li>\n<p><a href=\"/2020/vanillacoding_prep/Prep%202%EC%A3%BC%EC%B0%A8%EA%B8%88%EC%9A%94%EC%9D%BC_%EC%98%A4%ED%94%BC%EC%8A%A4%EC%95%84%EC%9B%8C%EC%A0%95%EB%A6%AC/#q-innerhtml%EA%B3%BC-textcontent-%EC%B0%A8%EC%9D%B4\">Q. innerHTML과 textContent 차이?</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/2020/vanillacoding_prep/Prep%202%EC%A3%BC%EC%B0%A8%EA%B8%88%EC%9A%94%EC%9D%BC_%EC%98%A4%ED%94%BC%EC%8A%A4%EC%95%84%EC%9B%8C%EC%A0%95%EB%A6%AC/#innertext-vs-textcontent\">innerText VS textContent</a></li>\n<li><a href=\"/2020/vanillacoding_prep/Prep%202%EC%A3%BC%EC%B0%A8%EA%B8%88%EC%9A%94%EC%9D%BC_%EC%98%A4%ED%94%BC%EC%8A%A4%EC%95%84%EC%9B%8C%EC%A0%95%EB%A6%AC/#innerhtml%EA%B3%BC-createelement---appendchild-%EB%8B%A4%EB%A5%B8%EC%A0%90\">innerHTML과 createElement - appendChild 다른점?</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"바닐라코딩 Prep 2주차 금요일 오피스아워 정리","date":"October 16, 2020"}}},"pageContext":{"slug":"/2020/vanillacoding_prep/Prep 2주차금요일_오피스아워정리/","previous":{"fields":{"slug":"/2020/vanillacoding_prep/Prep 2주차수요일 오피스아워 정리/"},"frontmatter":{"title":"바닐라코딩 Prep 2주차 수요일 오피스아워 정리","category":"vanilla coding","draft":false}},"next":{"fields":{"slug":"/2020/vanillacoding_prep/Prep 3주차월요일_오피스아워정리/"},"frontmatter":{"title":"바닐라코딩 Prep 3주차 월요일 오피스아워 정리","category":"vanilla coding","draft":false}}}}}