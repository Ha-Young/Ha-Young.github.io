{"componentChunkName":"component---src-templates-blog-post-js","path":"/algorithm/fastcampus/test2","result":{"data":{"markdownRemark":{"html":"<h2>1번</h2>\n<h3>문제</h3>\n<p>철수와 친구들은 다함께 용돈을 모은 총 <code class=\"language-text\">x</code>원을 모두 소진하여 중국집에서 배달을 시키려고 한다. 각 음식의 가격은 <code class=\"language-text\">food_list</code>로 주어질 때, <code class=\"language-text\">x</code>원을 소진하기 위한 최소한의 음식 갯수를 반환하는 함수 solution을 완성하시오.</p>\n<ul>\n<li>예시 입출력</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>x</th>\n<th>food_list</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>20000</td>\n<td>[100, 1500, 1200, 300]</td>\n<td>16</td>\n</tr>\n</tbody>\n</table>\n<h3>나의 풀이</h3>\n<h4>소스</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> food_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    food_count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    food_list<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>reverse<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">for</span> food_pay <span class=\"token keyword\">in</span> food_list<span class=\"token punctuation\">:</span>\n      calc_count <span class=\"token operator\">=</span> x <span class=\"token operator\">//</span> food_pay\n\n      <span class=\"token keyword\">if</span> calc_count <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        food_count <span class=\"token operator\">+=</span> calc_count\n        x <span class=\"token operator\">-=</span> food_pay <span class=\"token operator\">*</span> calc_count\n    \n    <span class=\"token keyword\">return</span> food_count\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>solution<span class=\"token punctuation\">(</span><span class=\"token number\">20000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1500</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>설명</h4>\n<p>그리디를 적용. 가장 높은 가격부터 순서대로.</p>\n<h3>예시답안</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">,</span> food_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    result <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    food_list<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>reverse<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> food <span class=\"token keyword\">in</span> food_list<span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">+=</span> N <span class=\"token operator\">//</span> food\n        N <span class=\"token operator\">=</span> N <span class=\"token operator\">%</span> food\n    <span class=\"token keyword\">return</span> result</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>2번</h2>\n<h3>문제</h3>\n<p>그래프를 DFS로 탐색한 결과를 출력하는 프로그램을 작성하시오. 단, 방문할 수 있는 정점이 여러 개인 경우에는 정점 번호가 작은 것을 먼저 방문하고, 더 이상 방문할 수 있는 점이 없는 경우 종료한다. 정점 번호는 1번부터 N번까지이다.</p>\n<ul>\n<li>입력: 첫째 줄에 정점의 개수 N(1 ≤ N ≤ 1,000), 간선의 개수 M(1 ≤ M ≤ 10,000), 탐색을 시작할 정점의 번호 V가 주어진다. 다음 M개의 줄에는 간선이 연결하는 두 정점의 번호가 주어진다. 어떤 두 정점 사이에 여러 개의 간선이 있을 수 있다. 입력으로 주어지는 간선은 양방향이다.</li>\n<li>출력: V부터 방문된 점을 순서대로 출력한다.</li>\n<li>예시 입출력</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>N</th>\n<th>M</th>\n<th>V</th>\n<th>edges</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>4</td>\n<td>5</td>\n<td>1</td>\n<td>[[1, 2], [1, 3], [1,4], [2, 3], [3, 4]]</td>\n<td>1 2 3 4</td>\n</tr>\n</tbody>\n</table>\n<h3>나의 풀이</h3>\n<h4>소스</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">N<span class=\"token punctuation\">,</span> M<span class=\"token punctuation\">,</span> V <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span>\nedges <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">,</span> M<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">,</span> edges<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">make_graph</span><span class=\"token punctuation\">(</span>edges<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        graph <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">for</span> edge <span class=\"token keyword\">in</span> edges<span class=\"token punctuation\">:</span>\n          first <span class=\"token operator\">=</span> edge<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n          second <span class=\"token operator\">=</span> edge<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n          <span class=\"token keyword\">if</span> first <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> graph<span class=\"token punctuation\">:</span>\n            graph<span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>second<span class=\"token punctuation\">]</span>\n          <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            graph<span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>second<span class=\"token punctuation\">)</span>\n          \n          <span class=\"token keyword\">if</span> second <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> graph<span class=\"token punctuation\">:</span>\n            graph<span class=\"token punctuation\">[</span>second<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">]</span>\n          <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            graph<span class=\"token punctuation\">[</span>second<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> graph\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        visited <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        need_visit <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        need_visit<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">while</span> need_visit<span class=\"token punctuation\">:</span>\n            node <span class=\"token operator\">=</span> need_visit<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> node <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> visited<span class=\"token punctuation\">:</span>\n                visited<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n                need_visit<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span><span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> reverse<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    graph <span class=\"token operator\">=</span> make_graph<span class=\"token punctuation\">(</span>edges<span class=\"token punctuation\">)</span>\n       \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">)</span>\n    dfs<span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">)</span>\n\nsolution<span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">,</span> M<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">,</span> edges<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>설명</h4>\n<p>그냥 주어진 edges로부터 graph를 구하고, 그 graph로 graph dfs 알고리즘 적용.</p>\n<h3>예시답안</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">,</span> M<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">,</span> edges<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    visited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    adj_lists <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>N <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> N <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        adj_list <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span>x<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span>x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> i<span class=\"token punctuation\">,</span> edges<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span>x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span>x<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> i<span class=\"token punctuation\">,</span> edges<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        adj_list<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        adj_lists<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> adj_list\n \n    <span class=\"token keyword\">def</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        visited<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> adj_lists<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> n <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> visited<span class=\"token punctuation\">:</span>\n                dfs<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n    dfs<span class=\"token punctuation\">(</span>V<span class=\"token punctuation\">)</span>\n \nN<span class=\"token punctuation\">,</span> M<span class=\"token punctuation\">,</span> V <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span>\nedges <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\nsolution<span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">,</span> M<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">,</span> edges<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>3번</h2>\n<h3>문제</h3>\n<p>그래프를 BFS로 탐색한 결과를 출력하는 프로그램을 작성하시오. 단, 방문할 수 있는 정점이 여러 개인 경우에는 정점 번호가 작은 것을 먼저 방문하고, 더 이상 방문할 수 있는 점이 없는 경우 종료한다. 정점 번호는 1번부터 N번까지이다.</p>\n<ul>\n<li>입력: 첫째 줄에 정점의 개수 N(1 ≤ N ≤ 1,000), 간선의 개수 M(1 ≤ M ≤ 10,000), 탐색을 시작할 정점의 번호 V가 주어진다. 다음 M개의 줄에는 간선이 연결하는 두 정점의 번호가 주어진다. 어떤 두 정점 사이에 여러 개의 간선이 있을 수 있다. 입력으로 주어지는 간선은 양방향이다.</li>\n<li>출력: V부터 방문된 점을 순서대로 출력한다.</li>\n<li>예시 입출력</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>N</th>\n<th>M</th>\n<th>V</th>\n<th>edges</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>4</td>\n<td>5</td>\n<td>1</td>\n<td>[[1, 2], [1, 3], [1,4], [2, 3], [3, 4]]</td>\n<td>1 2 3 4</td>\n</tr>\n</tbody>\n</table>\n<h3>나의 풀이</h3>\n<h4>소스</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> deque\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">,</span> M<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">,</span> edges<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">make_graph</span><span class=\"token punctuation\">(</span>edges<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        graph <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">for</span> edge <span class=\"token keyword\">in</span> edges<span class=\"token punctuation\">:</span>\n          first <span class=\"token operator\">=</span> edge<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n          second <span class=\"token operator\">=</span> edge<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n          <span class=\"token keyword\">if</span> first <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> graph<span class=\"token punctuation\">:</span>\n            graph<span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>second<span class=\"token punctuation\">]</span>\n          <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            graph<span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>second<span class=\"token punctuation\">)</span>\n          \n          <span class=\"token keyword\">if</span> second <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> graph<span class=\"token punctuation\">:</span>\n            graph<span class=\"token punctuation\">[</span>second<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">]</span>\n          <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            graph<span class=\"token punctuation\">[</span>second<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> graph\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n        visited <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        need_visit <span class=\"token operator\">=</span> deque<span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        \n        need_visit<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span>\n        \n        <span class=\"token keyword\">while</span> need_visit<span class=\"token punctuation\">:</span>\n            node <span class=\"token operator\">=</span> need_visit<span class=\"token punctuation\">.</span>popleft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> node <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> visited<span class=\"token punctuation\">:</span>\n                visited<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n                need_visit<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span><span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    graph <span class=\"token operator\">=</span> make_graph<span class=\"token punctuation\">(</span>edges<span class=\"token punctuation\">)</span>\n\n    bfs<span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">)</span>\n\nsolution<span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">,</span> M<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">,</span> edges<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>설명</h4>\n<p>위 DFS처럼 edgs로부터 graph를 구하고 bfs를 적용. 효율을 위해 deque를 사용하였다.</p>\n<h3>예시답안</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> deque\n \n<span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">,</span> M<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">,</span> edges<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    adj_lists <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>N <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> N <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        adj_list <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span>x<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span>x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> i<span class=\"token punctuation\">,</span> edges<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span>x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span>x<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> i<span class=\"token punctuation\">,</span> edges<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        adj_list<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        adj_lists<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> adj_list\n \n    <span class=\"token keyword\">def</span> <span class=\"token function\">bfs</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n        q <span class=\"token operator\">=</span> deque<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        visited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n \n        q<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span>\n        visited<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span>\n \n        <span class=\"token keyword\">while</span> q<span class=\"token punctuation\">:</span>\n            front <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span>popleft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>front<span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span> node <span class=\"token keyword\">in</span> adj_lists<span class=\"token punctuation\">[</span>front<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> node <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> visited<span class=\"token punctuation\">:</span>\n                    q<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n                    visited<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span>\n    bfs<span class=\"token punctuation\">(</span>V<span class=\"token punctuation\">)</span>\nN<span class=\"token punctuation\">,</span> M<span class=\"token punctuation\">,</span> V <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span>\nedges <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\nsolution<span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">,</span> M<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">,</span> edges<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>4번</h2>\n<h3>문제</h3>\n<p>방향 그래프에서 최단경로를 구하고자 한다.그래프에 대한 정보들로는 각 노드로부터 간선이 연결된 정보가 딕셔너리 <code class=\"language-text\">a</code>로 주어진다. 이 때 시작 노드(start)에서 마지막 노드(final)까지의 최소비용을 구하시오.</p>\n<table>\n<thead>\n<tr>\n<th>a</th>\n<th>start</th>\n<th>final</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">{&#39;A&#39;: {&#39;B&#39;: 2, &#39;C&#39;: 5, &#39;D&#39;: 1}, &#39;B&#39;: {&#39;C&#39;: 8}, &#39;C&#39;: {}, &#39;D&#39;: {&#39;C&#39;: 3}}</code></td>\n<td><code class=\"language-text\">&#39;A&#39;</code></td>\n<td><code class=\"language-text\">&#39;C&#39;</code></td>\n<td>4</td>\n</tr>\n</tbody>\n</table>\n<h3>예시답안</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> heapq\n \n<span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> final<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    distances <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>node<span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inf'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> node <span class=\"token keyword\">in</span> a<span class=\"token punctuation\">}</span>\n    distances<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    heapq<span class=\"token punctuation\">.</span>heappush<span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>distances<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n \n    <span class=\"token keyword\">while</span> queue<span class=\"token punctuation\">:</span>\n        current_dist<span class=\"token punctuation\">,</span> current_node <span class=\"token operator\">=</span> heapq<span class=\"token punctuation\">.</span>heappop<span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span>\n \n        <span class=\"token keyword\">if</span> distances<span class=\"token punctuation\">[</span>current_node<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> current_dist<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">continue</span>\n \n        <span class=\"token keyword\">for</span> adjacent<span class=\"token punctuation\">,</span> weight <span class=\"token keyword\">in</span> a<span class=\"token punctuation\">[</span>current_node<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            distance <span class=\"token operator\">=</span> current_dist <span class=\"token operator\">+</span> weight\n \n            <span class=\"token keyword\">if</span> distance <span class=\"token operator\">&lt;</span> distances<span class=\"token punctuation\">[</span>adjacent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                distances<span class=\"token punctuation\">[</span>adjacent<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> distance\n                heapq<span class=\"token punctuation\">.</span>heappush<span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>distance<span class=\"token punctuation\">,</span> adjacent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n \n    <span class=\"token keyword\">return</span> distances<span class=\"token punctuation\">[</span>final<span class=\"token punctuation\">]</span>\n \na<span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'A'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'B'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'C'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'C'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'D'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'C'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nstart <span class=\"token operator\">=</span> <span class=\"token string\">'A'</span>\nfinal <span class=\"token operator\">=</span> <span class=\"token string\">'C'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>solution<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> final<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>설명</h4>\n<ul>\n<li>유향 그래프에서 노드간의 최소거리를 구하는 문제였습니다.</li>\n<li>Dijkstra 알고리즘을 이용하면 답을 구할 수 있습니다.</li>\n</ul>","excerpt":"1번 문제 철수와 친구들은 다함께 용돈을 모은 총 원을 모두 소진하여 중국집에서 배달을 시키려고 한다. 각 음식의 가격은 로 주어질 때, 원을 소진하기 위한 최소한의 음식 갯수를 반환하는 함수 solution을 완성하시오. 예시 입출력 x food_list return 20000 10…","frontmatter":{"date":"29 October, 2020","path":"/algorithm/fastcampus/test2","title":"패스트캠퍼스 알고리즘 완주반 2차평가"},"fields":{"readingTime":{"text":"5 min read"}}}},"pageContext":{"slug":"/programmers_algorithm_study/2020-10-29-패스트캠퍼스-알고리즘-완주반-2차평가/","previous":{"frontmatter":{"path":"/vanillacoding/prep/week4_op2","draft":false,"category":"vanilla coding"},"fields":{"slug":"/vanillacoding_prep/Prep 4주차 수요일 오피스아워 정리/"}},"next":{"frontmatter":{"path":"/algorithm/programmers/lv2_skill_tree","draft":false,"category":"algorithm"},"fields":{"slug":"/programmers_algorithm_study/2020-10-30-프로그래머스---스킬트리-Lv2/"}}}}}