{"componentChunkName":"component---src-templates-blog-post-js","path":"/algorithm/programmers/study_week2_5","result":{"data":{"markdownRemark":{"html":"<h2>문제 설명</h2>\n<p>짝지어 제거하기는, 알파벳 소문자로 이루어진 문자열을 가지고 시작합니다. 먼저 문자열에서 같은 알파벳이 2개 붙어 있는 짝을 찾습니다. 그다음, 그 둘을 제거한 뒤, 앞뒤로 문자열을 이어 붙입니다. 이 과정을 반복해서 문자열을 모두 제거한다면 짝지어 제거하기가 종료됩니다. 문자열 S가 주어졌을 때, 짝지어 제거하기를 성공적으로 수행할 수 있는지 반환하는 함수를 완성해 주세요. 성공적으로 수행할 수 있으면 1을, 아닐 경우 0을 리턴해주면 됩니다.</p>\n<p>예를 들어, 문자열 S = <code class=\"language-text\">baabaa</code> 라면</p>\n<p>b <em>aa</em> baa → <em>bb</em> aa → <em>aa</em> →</p>\n<p>의 순서로 문자열을 모두 제거할 수 있으므로 1을 반환합니다.</p>\n<h2>제한사항</h2>\n<ul>\n<li>문자열의 길이 : 1,000,000이하의 자연수</li>\n<li>문자열은 모두 소문자로 이루어져 있습니다.</li>\n</ul>\n<hr>\n<h2>입출력 예</h2>\n<table>\n<thead>\n<tr>\n<th>s</th>\n<th>result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>baabaa</td>\n<td>1</td>\n</tr>\n<tr>\n<td>cdcd</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<h5>입출력 예 설명</h5>\n<p>입출력 예 #1\n위의 예시와 같습니다.\n입출력 예 #2\n문자열이 남아있지만 짝지어 제거할 수 있는 문자열이 더 이상 존재하지 않기 때문에 0을 반환합니다.</p>\n<h2>나의 풀이</h2>\n<h3>첫번째 풀이</h3>\n<h4>소스</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> deque\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    stack <span class=\"token operator\">=</span> deque<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">:</span>\n        stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">2</span> <span class=\"token keyword\">and</span> stack<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> stack<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> stack<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>설명</h4>\n<ul>\n<li>Stack을 이용하여서 쉽게 풀 수 있었다.</li>\n<li>stack을 이용해서 끝의 2개를 비교한 후 같으면 둘 다 pop합니다.</li>\n<li>마지막에 stack이 비어있으면 1을 리턴합니다.</li>\n<li>list pop시에 O(n)이 소요된다고 하셔서 알려주신 deque를 이용하였습니다.</li>\n<li>\n<h5>질문</h5>\n<ul>\n<li>문득 궁금해졌는데, 왜 list pop(0)이나 pop()이나 O(n)인가요? 어차피 시작과 끝에있는걸 제거하는 것이니 O(1)이 걸려야 되는게 아닌가요?\n왜 O(n)으로 비효율적으로 제거를 하는걸까요?</li>\n</ul>\n</li>\n</ul>\n<h4>결과</h4>\n<p>통과</p>\n<h4>리뷰</h4>\n<blockquote>\n<ul>\n<li><code class=\"language-text\">return 0 if stack else 1</code>로 줄일 수 있습니다. :)</li>\n<li>\n<p>조건을 조금 바꿔서 <code class=\"language-text\">stack.pop()</code>을 두 번하지 않도록 수정할 수 있습니다. :)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">for c in s:\n  if stack and stack[-1] == c:\n      stack.pop()\n  else:\n      stack.append(c)</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li><code class=\"language-text\">deque</code>를 사용하지 않아도 괜찮습니다. :)</li>\n<li>\n<h6>답변</h6>\n<p>list의 pop(0)은 O(n)이지만 pop()은 O(1)입니다. :)\n이렇게 구현된 이유는 python의 list가 성능을 위해 C언어의 pointer array로 구현되서 그렇습니다.\npop(0)을 했을 때 값을 리턴하는 것은 O(1)이지만 각 요소들을 앞으로 한 칸씩 당겨줘야하기 때문입니다.\n예를들어 <code class=\"language-text\">[5, 1, 6, 2, 9, 8]</code>이라는 값이 있을 때 <code class=\"language-text\">1</code>을 제거하면 <code class=\"language-text\">[5, X, 6, 2, 9, 8]</code> 상태가되고 각 <code class=\"language-text\">6, 2, 9, 8</code>을 한 칸씩 당겨줘야 합니다.\n그렇기 때문에 0번째 값을 제거한다면 결과적으로 O(n)의 시간복잡도가 발생합니다. :)</p>\n</li>\n</ul>\n</blockquote>\n<h2>스터디 리더의 풀이</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> stack <span class=\"token keyword\">and</span> stack<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> c<span class=\"token punctuation\">:</span>\n            stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>stack <span class=\"token operator\">==</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","excerpt":"문제 설명 짝지어 제거하기는, 알파벳 소문자로 이루어진 문자열을 가지고 시작합니다. 먼저 문자열에서 같은 알파벳이…","frontmatter":{"date":"15 September, 2020","path":"/algorithm/programmers/study_week2_5","title":"[2주차 Stack & Hash] 짝지어제거하기 - Lv2"},"fields":{"readingTime":{"text":"3 min read"}}}},"pageContext":{"slug":"/programmers_algorithm_study/2020-09-15-[2주차-Stack-&-Hash]-짝지어 제거하기/","previous":{"frontmatter":{"path":"/algorithm/programmers/study_week2_4","draft":false,"category":"algorithm"},"fields":{"slug":"/programmers_algorithm_study/2020-09-15-[2주차-Stack-&-Hash]-방문길이/"}},"next":{"frontmatter":{"path":"/algorithm/programmers/study_week2_6","draft":false,"category":"algorithm"},"fields":{"slug":"/programmers_algorithm_study/2020-09-15-[2주차-Stack-&-Hash]-사전순-부분문자열/"}}}},"staticQueryHashes":["3649515864","63159454"]}