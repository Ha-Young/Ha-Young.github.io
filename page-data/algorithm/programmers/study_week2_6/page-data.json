{"componentChunkName":"component---src-templates-blog-post-js","path":"/algorithm/programmers/study_week2_6","result":{"data":{"markdownRemark":{"html":"<h6>문제 설명</h6>\n<p>어떤 문자열 s가 주어졌을 때, s로부터 만들 수 있는 부분 문자열 중 사전 순으로 가장 뒤에 나오는 문자열을 찾으려 합니다. 부분 문자열을 만드는 방법은 다음과 같습니다.</p>\n<ol>\n<li>s에서 일부 문자를 선택해 새로운 문자열을 만듭니다.</li>\n<li>단, 이때 문자의 순서는 뒤바꾸지 않습니다.</li>\n</ol>\n<p>예를 들어 문자열 xyb로 만들 수 있는 부분 문자열은 다음과 같습니다.</p>\n<p>x\ny\nb\nxy\nxb\nyb\nxyb</p>\n<p>이 중 사전 순으로 가장 뒤에 있는 문자열은 yb입니다.</p>\n<p>문자열 s가 주어졌을 때 s로부터 만들 수 있는 부분 문자열 중 사전 순으로 가장 뒤에 나오는 문자열을 리턴하는 solution 함수를 완성해주세요.</p>\n<h5>제한 사항</h5>\n<ul>\n<li>s는 길이가 1 이상 1,000,000 이하인 문자열입니다.</li>\n<li>s는 알파벳 소문자로만 이루어져 있습니다.</li>\n</ul>\n<h5>입출력 예</h5>\n<table>\n<thead>\n<tr>\n<th>s</th>\n<th>result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>xyb</td>\n<td>yb</td>\n</tr>\n<tr>\n<td>yxyc</td>\n<td>yyc</td>\n</tr>\n</tbody>\n</table>\n<h5>입출력 예 설명</h5>\n<p>입출력 예 #1</p>\n<p>앞서 설명한 예와 같습니다.</p>\n<p>입출력 예 #2</p>\n<p>yxyc로 만들 수 있는 부분 문자열은 다음과 같습니다.</p>\n<p>y\nx\nc\nyx\nyy\nyc\nxy\nxc\nyxy\nyxc\nyyc\nxyc\nyxyc</p>\n<p>이 중 사전 순으로 가장 뒤에 나오는 문자열은 yyc입니다.</p>\n<h2>나의 풀이</h2>\n<h3>첫번째 풀이</h3>\n<h4>소스</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> stack<span class=\"token punctuation\">:</span>\n            stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">continue</span>\n\n        <span class=\"token keyword\">if</span> stack<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> c<span class=\"token punctuation\">:</span>\n            stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>stack</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>설명</h4>\n<ul>\n<li>Stack이용해서 마지막에 있는 문자열보다 새로들어오는 문자열이 크면 바꿔주는 방식 사용.</li>\n</ul>\n<h4>결과</h4>\n<p>일부분 틀림 (많이...)</p>\n<h4>리뷰</h4>\n<blockquote>\n<ul>\n<li>\n<p>stack의 top에 해당하는 값이 c보다 작을 경우 계속 지워야 합니다. :) <code class=\"language-text\">edcbakjih</code>를 예로들면,</p>\n<ol>\n<li>edcba &#x3C;- 여기까지 입력됩니다.</li>\n<li>edcba k &#x3C;- top인 a가 k보다 작기 때문에 pop 됩니다.</li>\n<li>edcb k &#x3C;- top인 b가 k보다 작기 때문에 pop 됩니다.\n...</li>\n<li>k &#x3C;- k만 남습니다.</li>\n<li>kjih &#x3C;- 그 이후로 k보다 큰 값은 안나오기 때문에 쭉 추가됩니다.</li>\n</ol>\n</li>\n<li>\n<p>stack의 top에 해당하는 값이 c보다 작을 경우 계속 지워줘야 합니다. <code class=\"language-text\">while</code>을 이용하면 다음과 같이 코드를 작성할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">while</span> stack <span class=\"token keyword\">and</span> stack<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> c<span class=\"token punctuation\">:</span>\n          stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n</ul>\n</blockquote>\n<h3>두번째 풀이</h3>\n<h4>소스</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">while</span> stack <span class=\"token keyword\">and</span> stack<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> c<span class=\"token punctuation\">:</span>\n            stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>설명</h4>\n<ul>\n<li>리뷰 반영하여 작은것이 계속해서 있으면 계속해서 pop하는 방식으로 바꿨다.</li>\n</ul>\n<h4>결과</h4>\n<p>통과</p>\n<h2>스터디 리더의 풀이</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">while</span> stack <span class=\"token keyword\">and</span> stack<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> c<span class=\"token punctuation\">:</span>\n            stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","excerpt":"문제 설명 어떤 문자열 s가 주어졌을 때, s로부터 만들 수 있는 부분 문자열 중 사전 순으로 가장 뒤에 나오는 문자열을 찾으려 합니다. 부분 문자열을 만드는 방법은 다음과 같습니다. s…","frontmatter":{"date":"15 September, 2020","path":"/algorithm/programmers/study_week2_6","title":"[2주차 Stack & Hash] 사전순부분문자열 - Lv2 [첫번째 실패]"},"fields":{"readingTime":{"text":"3 min read"}}}},"pageContext":{"slug":"/programmers_algorithm_study/2020-09-15-[2주차-Stack-&-Hash]-사전순-부분문자열/","previous":{"frontmatter":{"path":"/algorithm/programmers/study_week2_5","draft":false,"category":"algorithm"},"fields":{"slug":"/programmers_algorithm_study/2020-09-15-[2주차-Stack-&-Hash]-짝지어 제거하기/"}},"next":{"frontmatter":{"path":"/algorithm/programmers/kakao_test2","draft":false,"category":"algorithm"},"fields":{"slug":"/programmers_algorithm_study/2020-09-15-[카카오기출]-자물쇠와-열쇠/"}}}}}