{"componentChunkName":"component---src-templates-blog-post-js","path":"/algorithm/programmers/study_week1_4","result":{"data":{"markdownRemark":{"html":"<h2>문제 설명</h2>\n<p>n x m 크기 도화지에 그려진 그림의 색깔이 2차원 리스트로 주어집니다. 같은 색깔은 같은 숫자로 나타난다고 할 때, 그림에 있는 영역은 총 몇 개인지 알아내려 합니다. 영역이란 상하좌우로 연결된 같은 색상의 공간을 말합니다.</p>\n<p>예를 들어, [[1,2,3], [3,2,1]] 같은 리스트는 다음과 같이 표현할 수 있습니다.</p>\n<p><img src=\"./2020-09-04-%5B1%E1%84%8C%E1%85%AE%E1%84%8E%E1%85%A1-Queue-&#x26;-Heap%5D-FloodFill_1.png\" alt=\"574846660.46.png\"></p>\n<p>이때, 이 그림에는 총 5개 영역이 있습니다.</p>\n<p>도화지의 크기 n과 m, 도화지에 칠한 색깔 image가 주어질 때, 그림에서 영역이 몇 개 있는지 리턴하는 solution 함수를 작성해주세요.</p>\n<h2>제한 사항</h2>\n<ul>\n<li>n과 m은 1 이상 250 이하인 정수입니다.</li>\n<li>그림의 색깔은 1 이상 30000 미만인 정수로만 주어집니다.</li>\n</ul>\n<h2>입출력 예</h2>\n<table>\n<thead>\n<tr>\n<th>n</th>\n<th>m</th>\n<th>images</th>\n<th>정답</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2</td>\n<td>3</td>\n<td>[[1, 2, 3], [3, 2, 1]]</td>\n<td>5</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2</td>\n<td>[[1, 2], [1, 2], [4, 5]]</td>\n<td>4</td>\n</tr>\n</tbody>\n</table>\n<p>입출력 예 #1</p>\n<p>앞서 설명한 예와 같습니다.</p>\n<p>입출력 예 #2</p>\n<p>주어진 이미지는 다음과 같이 표현할 수 있습니다.</p>\n<p><img src=\"./%5B1%E1%84%8C%E1%85%AE%E1%84%8E%E1%85%A1%20Queue%20&#x26;%20Heap%5D%20Flood%20Fill_2.png\" alt=\"22.png\"></p>\n<p>따라서 이 이미지에는 4개 영역이 있습니다.</p>\n<h2>나의 풀이</h2>\n<h3>첫 번째 풀이</h3>\n<h4>소스</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> Counter\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_parent</span><span class=\"token punctuation\">(</span>area_number<span class=\"token punctuation\">,</span> same_area_check<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> same_area_check<span class=\"token punctuation\">[</span>area_number<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> area_number<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> area_number\n    same_area_check<span class=\"token punctuation\">[</span>area_number<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> get_parent<span class=\"token punctuation\">(</span>\n        same_area_check<span class=\"token punctuation\">[</span>area_number<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> same_area_check<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> same_area_check<span class=\"token punctuation\">[</span>area_number<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">union_parent</span><span class=\"token punctuation\">(</span>area_number1<span class=\"token punctuation\">,</span> area_number2<span class=\"token punctuation\">,</span> same_area_check<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    area_number1 <span class=\"token operator\">=</span> get_parent<span class=\"token punctuation\">(</span>area_number1<span class=\"token punctuation\">,</span> same_area_check<span class=\"token punctuation\">)</span>\n    area_number2 <span class=\"token operator\">=</span> get_parent<span class=\"token punctuation\">(</span>area_number2<span class=\"token punctuation\">,</span> same_area_check<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> area_number1 <span class=\"token operator\">&lt;</span> area_number2<span class=\"token punctuation\">:</span>\n        same_area_check<span class=\"token punctuation\">[</span>area_number2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> area_number1\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        same_area_check<span class=\"token punctuation\">[</span>area_number1<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> area_number2\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">union_area</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">,</span> same_area_check<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    column_length <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    area_number <span class=\"token operator\">=</span> row <span class=\"token operator\">*</span> column_length <span class=\"token operator\">+</span> col\n\n    <span class=\"token comment\"># 위쪽 체크</span>\n    <span class=\"token keyword\">if</span> row <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> image<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> image<span class=\"token punctuation\">[</span>row <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        up_area_number <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>row <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> column_length <span class=\"token operator\">+</span> col\n        union_parent<span class=\"token punctuation\">(</span>area_number<span class=\"token punctuation\">,</span> up_area_number<span class=\"token punctuation\">,</span> same_area_check<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 왼쪽 체크</span>\n    <span class=\"token keyword\">if</span> col <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> image<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> image<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        left_area_number <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> column_length <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>col <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        union_parent<span class=\"token punctuation\">(</span>area_number<span class=\"token punctuation\">,</span> left_area_number<span class=\"token punctuation\">,</span> same_area_check<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 아래쪽 체크</span>\n    <span class=\"token keyword\">if</span> row <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token keyword\">and</span> image<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> image<span class=\"token punctuation\">[</span>row <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        down_area_number <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>row <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> column_length <span class=\"token operator\">+</span> col\n        union_parent<span class=\"token punctuation\">(</span>area_number<span class=\"token punctuation\">,</span> down_area_number<span class=\"token punctuation\">,</span> same_area_check<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 오른쪽 체크</span>\n    <span class=\"token keyword\">if</span> col <span class=\"token operator\">&lt;</span> column_length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token keyword\">and</span> image<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> image<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        right_area_number <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> column_length <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>col <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        union_parent<span class=\"token punctuation\">(</span>area_number<span class=\"token punctuation\">,</span> right_area_number<span class=\"token punctuation\">,</span> same_area_check<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    answer <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    same_area_check <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">for</span> row <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> col <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            same_area_check<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span>\n            count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    \n    <span class=\"token keyword\">for</span> row <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> col <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            union_area<span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">,</span> same_area_check<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>Counter<span class=\"token punctuation\">(</span>same_area_check<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>설명</h4>\n<p>이 문제는 처음 봤을 때 어떻게 해결해야 될지 감이 잘 안왔다.</p>\n<p>그렇게 한 2시간 빈둥대며 고민하다가 예전에 한번 봤던 Union-Find 알고리즘이 생각났는데, 이를 적용하면 되겠다 싶어서\nimage에 각 픽셀에 대해 for문으로 돌면서 위, 왼쪽, 오른쪽, 아래쪽을 보면서 값이 같으면 same<em>area</em>check List에 Union 하는 방식이다. </p>\n<p>union은 서로 해당 픽셀에 대해 same<em>area</em>check List에 getParent()해서 부모값을 가져오고, 그 부모 값중 작은 값으로 모두 설정해주는 방식. 그냥 Union-Find의 Union방식과도 같다.</p>\n<p>그냥 이부분은 어떤걸 Union할거냐만 다르다고 보면 된다.</p>\n<p>어쨋든 이렇게 풀고 Test문제를 풀었더니 두개맞고 다 틀렸다 ㅎㅎㅎ</p>\n<p>리뷰나 받아야지....ㅠㅠㅠ</p>\n<h4>리뷰</h4>\n<blockquote>\n<p>코드를 봤을때 <code class=\"language-text\">5, 5, [[1, 2, 1, 1, 1], [1, 2, 1, 2, 1], [1, 2, 1, 2, 1], [1, 2, 1, 2, 1], [1, 1, 1, 2, 1]]</code>와 같은 꼬불꼬불한 케이스가 있는 경우 예외가 있습니다. 왼쪽과 위쪽을 보고 판단하기 때문에 아래에서 올라오는 경우를 파악 못한 것으로 보입니다. :)\n보통 FloodFill과 같이 영역을 채우는 문제, 혹은 길을 찾아야하는 문제의 경우 BFS와 DFS를 많이 사용합니다. 길찾기 문제의 경우 문제에 따라 더 빠른 방법도 있기 때문에 가장 많이 쓰는 부분은 FloodFill과 같은 문제입니다.</p>\n<p>반면 유니온 파인드의 경우 각 부분 집합이 서로 연결되어있는지 판단하는 알고리즘입니다. 보통 트리 구조에서 많이 사용되기 때문에 부모 자식 관계가 뚜렷하지 않은 경우 사용하기에 적합하지 않습니다. :)</p>\n<p>이 문제의 경우 색상별로 BFS를 이용해 <strong>전부 채워나간다</strong>라고 생각하시면 조금 더 이해가 쉽습니다. 한 번 도전해보세요!</p>\n</blockquote>\n<p>라고 받았다. BFS, DFS로 적용해봐야겠다.</p>\n<h3>두 번째 풀이</h3>\n<h4>소스</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">find_linked_area_dfs</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    row_max_idx <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n    col_max_idx <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\n    stack_dfs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>stack_dfs<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> stack_dfs<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        visited<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\n        <span class=\"token comment\"># 왼쪽을 본다</span>\n        <span class=\"token keyword\">if</span> row <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> image<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> image<span class=\"token punctuation\">[</span>row <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span> <span class=\"token keyword\">and</span> <span class=\"token keyword\">not</span> visited<span class=\"token punctuation\">[</span>row <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            stack_dfs<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>row <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 오른쪽을 본다</span>\n        <span class=\"token keyword\">if</span> row <span class=\"token operator\">&lt;</span> row_max_idx <span class=\"token keyword\">and</span> image<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> image<span class=\"token punctuation\">[</span>row <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span> <span class=\"token keyword\">and</span> <span class=\"token keyword\">not</span> visited<span class=\"token punctuation\">[</span>row <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            stack_dfs<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>row <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 위쪽을 본다</span>\n        <span class=\"token keyword\">if</span> col <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> image<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> image<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">and</span> <span class=\"token keyword\">not</span> visited<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            stack_dfs<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> col <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># 아래쪽을 본다</span>\n        <span class=\"token keyword\">if</span> col <span class=\"token operator\">&lt;</span> col_max_idx <span class=\"token keyword\">and</span> image<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> image<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">and</span> <span class=\"token keyword\">not</span> visited<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            stack_dfs<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> col <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    area_number <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    visited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>m <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">for</span> row <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> col <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> visited<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                find_linked_area_dfs<span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">,</span> visited<span class=\"token punctuation\">)</span>\n                area_number <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">return</span> area_number</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>설명</h4>\n<p>이전 리뷰를 참고해서 이번에는 DFS를 적용시켰다.\n확실히 DFS로 풀이하면서 알고리즘이 간단해지고 잘 풀리는? 느낌을 받았다.</p>\n<h4>결과</h4>\n<p>통과.</p>\n<h4>리뷰</h4>\n<p>2주차 세션에서 리더님이 보여주셨는데, DFS 부분에서 왼쪽, 오른쪽, 위, 아래 부분을 볼 때 for 문을 이용해서 줄일 수 있다고 한다.</p>\n<h3>세번째 풀이</h3>\n<h4>소스</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># BFS 혹은 DFS를 이용하는 문제다.</span>\n<span class=\"token comment\"># DFS = 깊이 우선 탐색 -> 재귀 호출을 많이 사용</span>\n<span class=\"token comment\"># 파이썬에서 재귀 호출은 느리기 때문에 가급적 BFS를 쓰는 것이 좋다</span>\n<span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> deque\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    answer <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    directions <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># 이처럼 표현하면 반복되는 if문을 줄일 수 있다.</span>\n\n    <span class=\"token keyword\">for</span> sy <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> sx <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> image<span class=\"token punctuation\">[</span>sy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>sx<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">continue</span>\n\n            target_color <span class=\"token operator\">=</span> image<span class=\"token punctuation\">[</span>sy<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>sx<span class=\"token punctuation\">]</span>\n            deq <span class=\"token operator\">=</span> deque<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>sy<span class=\"token punctuation\">,</span> sx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">while</span> deq<span class=\"token punctuation\">:</span>\n                y<span class=\"token punctuation\">,</span> x <span class=\"token operator\">=</span> deq<span class=\"token punctuation\">.</span>popleft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#deque의 popleft는 O(n)</span>\n\t\t\t\t\t\t\t\t\t <span class=\"token comment\">#list의 pop(0)은 O(n)</span>\n                <span class=\"token keyword\">for</span> dy<span class=\"token punctuation\">,</span> dx <span class=\"token keyword\">in</span> directions<span class=\"token punctuation\">:</span>\n                    py <span class=\"token operator\">=</span> y <span class=\"token operator\">+</span> dy\n                    px <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> dx\n                    <span class=\"token keyword\">if</span> px <span class=\"token operator\">>=</span> m <span class=\"token keyword\">or</span> px <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token keyword\">or</span> py <span class=\"token operator\">>=</span> n <span class=\"token keyword\">or</span> py <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                        <span class=\"token keyword\">continue</span>\n                    <span class=\"token keyword\">if</span> image<span class=\"token punctuation\">[</span>py<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>px<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target_color<span class=\"token punctuation\">:</span>\n                        image<span class=\"token punctuation\">[</span>py<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>px<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n                        deq<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>py<span class=\"token punctuation\">,</span> px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n            answer <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">return</span> answer</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>설명</h4>\n<p>세션에서 보여주신 리더님의 소스이다.</p>\n<p>보면 directions로 반복되는 if문을 줄였고,\nimage 방문 체크를 image의 값을 -1로 설정하여 방문체크를 하였다. 그래서 따로 배열 생성 X</p>\n<p>또 deque를 써서 pop(0)에 걸리는 O(n)의 시간을 O(1)로 줄여주었다.</p>\n<h4>결과</h4>\n<p>당연히 통과. (빠른속도로)</p>\n<h4>시간복잡도</h4>\n<p>시작지점을 n*m만큼 순회하고 BFS, DFS로 모든 부분을 한번 더 순회하기 때문에\nO( (n * m)^2 ) 가 된다.</p>","excerpt":"문제 설명 n x m 크기 도화지에 그려진 그림의 색깔이 2차원 리스트로 주어집니다. 같은 색깔은 같은 숫자로 나타난다고 할 때, 그림에 있는 영역은 총 몇 개인지 알아내려 합니다. 영역이란 상하좌우로 연결된 같은 색상의 공간을 말합니다. 예를 들어, [1,2,3, 3,2,…","frontmatter":{"date":"08 September, 2020","path":"/algorithm/programmers/study_week1_4","title":"[1주차 Queue & Heap] Flood Fill"},"fields":{"readingTime":{"text":"6 min read"}}}},"pageContext":{}}}