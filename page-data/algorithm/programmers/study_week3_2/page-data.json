{"componentChunkName":"component---src-templates-blog-post-js","path":"/algorithm/programmers/study_week3_2","result":{"data":{"markdownRemark":{"html":"<h2>문제 설명</h2>\n<p>Leo는 카펫을 사러 갔다가 아래 그림과 같이 중앙에는 빨간색으로 칠해져 있고 가장 끝쪽의 모서리 한 줄은 갈색으로 칠해져 있는 격자 모양 카펫을 봤습니다.</p>\n<p><img src=\"https://grepp-programmers.s3.amazonaws.com/files/ybm/7c94563a35/2ff27ac9-97d0-43a9-9cf8-a344b8e7912e.png\" alt=\"image.png\"></p>\n<p>Leo는 집으로 돌아와서 아까 본 카펫의 빨간색과 갈색으로 색칠된 격자의 개수는 기억했지만, 전체 카펫의 크기는 기억하지 못했습니다.</p>\n<p>Leo가 본 카펫에서 갈색 격자의 수 brown, 빨간색 격자의 수 red가 매개변수로 주어질 때 카펫의 가로, 세로 크기를 순서대로 배열에 담아 return 하도록 solution 함수를 작성해주세요.</p>\n<h5>제한사항</h5>\n<ul>\n<li>갈색 격자의 수 brown은 8 이상 5,000 이하인 자연수입니다.</li>\n<li>빨간색 격자의 수 red는 1 이상 2,000,000 이하인 자연수입니다.</li>\n<li>카펫의 가로 길이는 세로 길이와 같거나, 세로 길이보다 깁니다.</li>\n</ul>\n<h5>입출력 예</h5>\n<table>\n<thead>\n<tr>\n<th>brown</th>\n<th>red</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>10</td>\n<td>2</td>\n<td>[4, 3]</td>\n</tr>\n<tr>\n<td>8</td>\n<td>1</td>\n<td>[3, 3]</td>\n</tr>\n<tr>\n<td>24</td>\n<td>24</td>\n<td>[8, 6]</td>\n</tr>\n</tbody>\n</table>\n<p><a href=\"http://hsin.hr/coci/archive/2010_2011/contest4_tasks.pdf\">출처</a></p>\n<h2>나의 풀이</h2>\n<h3>첫번째 풀이</h3>\n<h4>소스</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># 1. red 해서 전체 개수 구한 다음 약수 2개의 리스트를 만든다. (가로가 긴 or same)</span>\n<span class=\"token comment\"># 2. 이 2개 약수리스트를 돌면서 가능한 것을 찾는다</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_divisor_pair</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    divisor_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> i <span class=\"token operator\">>=</span> n <span class=\"token operator\">/</span> i <span class=\"token keyword\">and</span> n <span class=\"token operator\">%</span> i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            divisor_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">/</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> divisor_list\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>brown<span class=\"token punctuation\">,</span> red<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    candidates <span class=\"token operator\">=</span> get_divisor_pair<span class=\"token punctuation\">(</span>red<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">for</span> candidiate <span class=\"token keyword\">in</span> candidates<span class=\"token punctuation\">:</span>\n        red_width<span class=\"token punctuation\">,</span> red_height <span class=\"token operator\">=</span> candidiate\n        <span class=\"token keyword\">if</span> brown <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span>red_width <span class=\"token operator\">+</span> red_height <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>red_width <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> red_height <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n    \n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>설명</h4>\n<ul>\n<li>좀 searching을 하고 나서 푼 문제라 추후 다시 꼭 풀어봐야 할 문제.</li>\n<li>문제 이해부터 잘못했었는데 무조건 brown은 red를 한줄로 감싸고 있는 형태이고,\nred는 가로가 긴 직사각형으로 생겨야 되는 문제.</li>\n<li>그래서 이 문제의 관건은 red의 경우의 수를 모두 구한다음, 입력 받은 brown의 개수와 맞는 red의 생김 경우의 수를 찾으면 된다.</li>\n<li>red의 생김 경우의 수는 가로가 세로보다 길도록 하여 약수를 구하듯이 구하였다. [가로, 세로] 의 리스트</li>\n<li>red의 생김 경우의 수를 순회하면서 입력받은 brown의 개수가 되면 return.</li>\n</ul>\n<h4>결과</h4>\n<p>통과</p>\n<h4>리뷰</h4>\n<blockquote>\n<ul>\n<li>안녕하세요. 하영님. :)\n전체적으로 깔금하게 잘 작성하셨습니다.</li>\n<li><code class=\"language-text\">int(n / i)</code> 대신 <code class=\"language-text\">n // i</code>를 사용할 수 있습니다. :)</li>\n</ul>\n</blockquote>","excerpt":"문제 설명 Leo는 카펫을 사러 갔다가 아래 그림과 같이 중앙에는 빨간색으로 칠해져 있고 가장 끝쪽의 모서리 한 줄은 갈색으로 칠해져 있는 격자 모양 카펫을 봤습니다. image.png Leo…","frontmatter":{"date":"21 September, 2020","path":"/algorithm/programmers/study_week3_2","title":"[3주차 Searching] 카페 - Lv2"},"fields":{"readingTime":{"text":"2 min read"}}}},"pageContext":{"slug":"/programmers_algorithm_study/2020-09-21-[3주차-Searching]-카페---Lv2/","previous":{"frontmatter":{"path":"/algorithm/programmers/study_week3_1","draft":false,"category":"code test"},"fields":{"slug":"/programmers_algorithm_study/2020-09-21-[3주차-Searching]-세-소수의-합/"}},"next":{"frontmatter":{"path":"/algorithm/programmers/study_week3_3","draft":false,"category":"code test"},"fields":{"slug":"/programmers_algorithm_study/2020-09-21-[3주차-Searching]-주사위게임---Lv2/"}}}},"staticQueryHashes":["3649515864","63159454"]}