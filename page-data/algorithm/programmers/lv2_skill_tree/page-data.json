{"componentChunkName":"component---src-templates-blog-post-js","path":"/algorithm/programmers/lv2_skill_tree","result":{"data":{"markdownRemark":{"html":"<h2>문제 설명</h2>\n<p>선행 스킬이란 어떤 스킬을 배우기 전에 먼저 배워야 하는 스킬을 뜻합니다.</p>\n<p>예를 들어 선행 스킬 순서가 <code class=\"language-text\">스파크 → 라이트닝 볼트 → 썬더</code>일때, 썬더를 배우려면 먼저 라이트닝 볼트를 배워야 하고, 라이트닝 볼트를 배우려면 먼저 스파크를 배워야 합니다.</p>\n<p>위 순서에 없는 다른 스킬(힐링 등)은 순서에 상관없이 배울 수 있습니다. 따라서 <code class=\"language-text\">스파크 → 힐링 → 라이트닝 볼트 → 썬더</code>와 같은 스킬트리는 가능하지만, <code class=\"language-text\">썬더 → 스파크</code>나 <code class=\"language-text\">라이트닝 볼트 → 스파크 → 힐링 → 썬더</code>와 같은 스킬트리는 불가능합니다.</p>\n<p>선행 스킬 순서 skill과 유저들이 만든 스킬트리<a href=\"https://school.programmers.co.kr/courses/10683/lessons/68169#fn1\">1</a>를 담은 배열 skill_trees가 매개변수로 주어질 때, 가능한 스킬트리 개수를 return 하는 solution 함수를 작성해주세요.</p>\n<h5>제한 조건</h5>\n<ul>\n<li>스킬은 알파벳 대문자로 표기하며, 모든 문자열은 알파벳 대문자로만 이루어져 있습니다.</li>\n<li>\n<p>스킬 순서와 스킬트리는 문자열로 표기합니다.</p>\n<ul>\n<li>예를 들어, <code class=\"language-text\">C → B → D</code> 라면 CBD로 표기합니다</li>\n</ul>\n</li>\n<li>선행 스킬 순서 skill의 길이는 1 이상 26 이하이며, 스킬은 중복해 주어지지 않습니다.</li>\n<li>skill_trees는 길이 1 이상 20 이하인 배열입니다.</li>\n<li>\n<p>skill_trees의 원소는 스킬을 나타내는 문자열입니다.</p>\n<ul>\n<li>skill_trees의 원소는 길이가 2 이상 26 이하인 문자열이며, 스킬이 중복해 주어지지 않습니다.</li>\n</ul>\n</li>\n</ul>\n<h5>입출력 예</h5>\n<table>\n<thead>\n<tr>\n<th>skill</th>\n<th>skill_trees</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CBD</td>\n<td>[BACDE, CBADF, AECB, BDA]</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n<h5>입출력 예 설명</h5>\n<ul>\n<li>BACDE: B 스킬을 배우기 전에 C 스킬을 먼저 배워야 합니다. 불가능한 스킬트립니다.</li>\n<li>CBADF: 가능한 스킬트리입니다.</li>\n<li>AECB: 가능한 스킬트리입니다.</li>\n<li>BDA: B 스킬을 배우기 전에 C 스킬을 먼저 배워야 합니다. 불가능한 스킬트리입니다.</li>\n</ul>\n<h2>나의 풀이</h2>\n<h3>소스</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>skill<span class=\"token punctuation\">,</span> skill_trees<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    answer <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    \n    skill_dict <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> each_skill <span class=\"token keyword\">in</span> skill<span class=\"token punctuation\">:</span>\n        skill_dict<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>each_skill<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">for</span> user_skill_tree <span class=\"token keyword\">in</span> skill_trees<span class=\"token punctuation\">:</span>\n        check_skill <span class=\"token operator\">=</span> skill\n        isAvailable <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n        <span class=\"token keyword\">for</span> user_skill <span class=\"token keyword\">in</span> user_skill_tree<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>check_skill<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">break</span>\n                \n            <span class=\"token keyword\">if</span> user_skill <span class=\"token keyword\">in</span> skill_dict<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> user_skill <span class=\"token operator\">==</span> check_skill<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    check_skill <span class=\"token operator\">=</span> check_skill<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n                    <span class=\"token keyword\">continue</span>\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    isAvailable <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n                    <span class=\"token keyword\">break</span>\n        \n        <span class=\"token keyword\">if</span> isAvailable<span class=\"token punctuation\">:</span>\n            answer <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            \n    <span class=\"token keyword\">return</span> answer</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>설명</h3>\n<p>skill_trees를 순회하면서 각 user의 skill tree가 skill에 있는 순서에 맞는지 판별하면 된다.</p>\n<p>skill의 순서에 맞는지 판별은 user의 skill tree를 처음부터 순회하면서 skill의 순서와 맞는지 판별해야되는데,\n각 user skill tree의 string 한 단어씩 비교하기에는 탐색이 너무 오래걸려서 Set을 통해 빠르게 있는지 없는지 판별하고, skill에 처음부분이면 계속 진행, 아니면 skill의 순서와 틀리므로 break 하는 순으로 모든 순회를 다 안하고 가지치기를 통해 가능하면 빠르게 끝낼 수 있도록 구성하였다.</p>\n<h2>다른사람의 풀이</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>skill<span class=\"token punctuation\">,</span> skill_trees<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    answer <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">for</span> skill_tree <span class=\"token keyword\">in</span> skill_trees<span class=\"token punctuation\">:</span>\n        skill_list <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>skill<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> s <span class=\"token keyword\">in</span> skill_tree<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> s <span class=\"token keyword\">in</span> skill <span class=\"token keyword\">and</span> s <span class=\"token operator\">!=</span> skill_list<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">break</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># for-else 문법을 사용하면 dirty flag를 제거할 수 있고 파이썬스럽게 푼 느낌이 든다.</span>\n            answer <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">return</span> answer</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>set을 이용안하고 모든 skill을 순회하게하는 코드를 간단하게 구성하였다.</p>","excerpt":"…","frontmatter":{"date":"30 October, 2020","path":"/algorithm/programmers/lv2_skill_tree","title":"프로그래머스 - 스킬트리 Lv2"},"fields":{"readingTime":{"text":"3 min read"}}}},"pageContext":{"slug":"/programmers_algorithm_study/2020-10-30-프로그래머스---스킬트리-Lv2/","previous":{"frontmatter":{"path":"/algorithm/fastcampus/test2","draft":false,"category":"algorithm"},"fields":{"slug":"/programmers_algorithm_study/2020-10-29-패스트캠퍼스-알고리즘-완주반-2차평가/"}},"next":{"frontmatter":{"path":"/javascript/type","draft":false,"category":"javascript"},"fields":{"slug":"/javascript/하옹의-간단하게-살펴보는-필수-자바스크립트---Type/"}}}},"staticQueryHashes":["3649515864","63159454"]}