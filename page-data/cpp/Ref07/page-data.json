{"componentChunkName":"component---src-templates-blog-post-js","path":"/cpp/Ref07","result":{"data":{"markdownRemark":{"html":"<h3>파일 입출력 (I/O)시 쓰이는 Lib</h3>\n<ul>\n<li>ifstream : 파일입력</li>\n<li>ofstream : 파일 출력</li>\n<li>fstream: 파일 입력 및 출력</li>\n</ul>\n<blockquote>\n<p>파일 스트림에 &#x3C;&#x3C;, >>, 조정자 등을 쓸 수 있다.</p>\n</blockquote>\n<h3>C언어와의 비교</h3>\n<ul>\n<li>C</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\">FILE <span class=\"token operator\">*</span>fp<span class=\"token punctuation\">;</span>\nfp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"w+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>C++</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c++ line-numbers\"><code class=\"language-c++\">ifstream fin;\nfin.open(&quot;hello.txt&quot;);\nofstream fout;\nfout.open(&quot;hello.txt&quot;);\nfstream fs;\nfs.open(&quot;hello.txt&quot;);</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<blockquote>\n<p>각 Stream 마다 open() 함수가 있다.\nOpen(\"filename\", ios-base::in | ios-base::binary)    &#x3C;-     binary로도 읽을 수 있다.</p>\n</blockquote>\n<ul>\n<li>\n<p>option 비교</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">C</th>\n<th align=\"center\">C++</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">\"r\"</td>\n<td align=\"center\">in</td>\n</tr>\n<tr>\n<td align=\"center\">\"w\"</td>\n<td align=\"center\">out<br />out |trunc</td>\n</tr>\n<tr>\n<td align=\"center\">\"a\"</td>\n<td align=\"center\">out | app</td>\n</tr>\n<tr>\n<td align=\"center\">\"rt\"</td>\n<td align=\"center\">in|out</td>\n</tr>\n<tr>\n<td align=\"center\">\"wt\"</td>\n<td align=\"center\">in|out|trunc</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<h3>파일 닫기</h3>\n<ul>\n<li>C</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\">FILE <span class=\"token operator\">*</span>fp<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>C++</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c++ line-numbers\"><code class=\"language-c++\">fstream fs;\n// ...\nfs.close(); // fstream 소멸자에서 닫아주기는 한다.</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h3>스트림 상태 확인</h3>\n<ul>\n<li>C</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\">FILE <span class=\"token operator\">*</span>fp<span class=\"token punctuation\">;</span>\nfp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"open.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fp <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>C++</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c++ line-numbers\"><code class=\"language-c++\">fstream fs;\nfs.open(&quot;open.txt&quot;);\n\nif (fs.is_open())\n{\n\t//...\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>파일에서 문자 하나씩 읽기</h3>\n<ul>\n<li>C</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\">FILE <span class=\"token operator\">*</span>fp<span class=\"token punctuation\">;</span>\nfp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"open.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> c<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">do</span>\n<span class=\"token punctuation\">{</span>\n\tc <span class=\"token operator\">=</span> <span class=\"token function\">getc</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%c\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">!=</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>C++</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c++ line-numbers\"><code class=\"language-c++\">ifstream fin;\nfin.open(&quot;open.txt&quot;);\nchar c;\nwhile(true)\n{\n    fin.get(c);\n    if (fin.fail())\n    {\n        break;\n    }\n    cout &lt;&lt; c;\n}\nfin.close();</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<blockquote>\n<p>get, getline 함수는 cin, istringstream, ifstream 모두 동일하게 적용 -> 추상화가 잘 되어 있음</p>\n</blockquote>\n<p><strong>위 소스에서 get을 getline으로 바꾸면 한줄씩 읽기가 된다.</strong></p>\n<p><strong>여기서 잘못된 입력을 고려해야되는데,</strong></p>\n<ol>\n<li>숫자들과 뉴라인</li>\n<li>잘못된 입력과 숫자들</li>\n</ol>\n<p>만약, 잘못 입력된 값을 string으로 저장할 경우,\n먼저 clear()를 해줘야 한다.</p>\n<p> -> 그래야 failbit가 false로 초기화 되서 읽을 수 있다. failbit가 true면 읽지 않음.</p>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c++ line-numbers\"><code class=\"language-c++\">while(!fin.eof())\n{\n    cin &gt;&gt; number;\n    if (cin.fail())\n    {\n        clear();\n        cin.ignore(1);\n        cin &gt;&gt; trash\n    }\n    else\n        cout &lt;&lt; number &lt;&lt; endl;\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>파일에 쓰기</h3>\n<ul>\n<li>C</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\">FILE <span class=\"token operator\">*</span>fp<span class=\"token punctuation\">;</span>\nfp <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"output.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> line<span class=\"token punctuation\">[</span><span class=\"token number\">512</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">,</span> <span class=\"token number\">512</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>C++</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c++ line-numbers\"><code class=\"language-c++\">ofstream fout;\nfout.open(&quot;output.txt&quot;);\nstring line;\ngetline(cin.line);\nif(!cin.fail())\n{\n    fout &lt;&lt; line &lt;&lt; endl;\n}\nfin.close();</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>바이너리 파일 읽기</h3>\n<ul>\n<li>C</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\">FILE <span class=\"token operator\">*</span>fp<span class=\"token punctuation\">;</span>\nfp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"binary.dat\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fp <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Record record<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fread</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>record<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Record<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">!</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>C++</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c++ line-numbers\"><code class=\"language-c++\">ifstream fin(&quot;binary.dat&quot;, ios-base::in | ios-base::binary);\n\nif (fin.is_open())\n{\n    Record record;\n    fin.read((char *)&amp;record, sizeof(Record));\n}\n\nfin.close();</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>ifstream:read() : read(char*, streamsize);\nex) fin.read(&#x26;firstName, 20); -> 파일로 부터 20바이트 읽어서 firstName에 저장</p>\n<h3>바이너리 파일에 쓰기</h3>\n<ul>\n<li>C</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\">FILE <span class=\"token operator\">*</span>fp<span class=\"token punctuation\">;</span>\nfp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"binaryOutput.dat\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fp <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> buffer<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Ha-Young Choi\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fwrite</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>C++</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c++ line-numbers\"><code class=\"language-c++\">ofstream fout(&quot;binaryOutput.dat&quot;, iosbase:out | iosbase:binary);\n\nif(fout.is_open())\n{\n    char buffer[20] = &quot;Ha-Young Choi&quot;;\n    fout.write(buffer, 20);\n}\nfout.close();</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>파일에서 탐색</h3>\n<ul>\n<li>C</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\">FILE <span class=\"token operator\">*</span>fp<span class=\"token punctuation\">;</span>\nfp <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"open.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fp <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fSeek</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SEEK_SET</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>C++</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c++ line-numbers\"><code class=\"language-c++\">fstream fs(&quot;open.dat&quot;, iobase:in|out|binary);\n\nif (fs.is_open())\n{\n    fs.seek(20, iosbase:beg);\n    if (!fs.fail())\n    {\n        // ...\n    }\n}\nfs.close();</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>탐색유형</h3>\n<ul>\n<li>\n<p>절대적 -> fout.seek(20);</p>\n<ul>\n<li>보통 tellp() // tellg()를 사용해서 기억해놨던 위치로 돌아갈 때 사용.</li>\n</ul>\n</li>\n<li>\n<p>상대적 -> fout.seek(20, iosbase::cur);</p>\n<ul>\n<li>iosbase:beg - 처음 위치로 부터</li>\n<li>iosbase:cur - 현재 위치로 부터</li>\n<li>iosbase:end - 끝 위치로 부터</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>seekp와 마찬가지로 seekg도 있다.\n쓰기 &#x3C; - > 읽기</p>\n</blockquote>\n<h3>정리</h3>\n<ol>\n<li>std::string 클래스</li>\n<li>메모리, 메모리 그리고 메모리</li>\n<li>문자열 스트림</li>\n<li>파일 스트림</li>\n</ol>","excerpt":"파일 입출력 (I/O)시 쓰이는 Lib ifstream : 파일입력 ofstream : 파일 출력 fstream: 파일 입력 및 출력 파일 스트림에 <<, >>, 조정자 등을 쓸 수 있다. C언어와의 비교 C C++ 각 Stream 마다 open() 함수가 있다.\nOpen…","frontmatter":{"date":"11 August, 2020","path":"/cpp/Ref07","title":"C++ 파일 입출력 (I/O)"},"fields":{"readingTime":{"text":"3 min read"}}}},"pageContext":{"slug":"/cpp/2020-08-11-C++-파일-입출력-(IO)/","previous":{"frontmatter":{"path":"/cpp/Ref06","draft":false,"category":"cpp"},"fields":{"slug":"/cpp/2020-08-05-C++-String-문자열/"}},"next":{"frontmatter":{"path":"/cpp/Ref07","draft":false,"category":"cpp"},"fields":{"slug":"/cpp/2020-08-13-C++-객체지향-프로그래밍-1/"}}}}}