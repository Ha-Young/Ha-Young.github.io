{"componentChunkName":"component---src-templates-blog-post-js","path":"/cpp/Ref02","result":{"data":{"markdownRemark":{"html":"<h3>C, C++ 콘솔 출력 간단 비교</h3>\n<ul>\n<li>C언어 콘솔 출력</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\"><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"오늘날짜 : %d \\n할 일 : %s\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"블로그 포스팅하기\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<ul>\n<li>C++ 언어 콘솔 출력</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c++ line-numbers\"><code class=\"language-c++\">cout &lt;&lt; &quot;오늘날짜 : &quot; &lt;&lt; date &lt;&lt; &quot;\\n할 일 : &quot; &lt;&lt; todo &lt;&lt; endl;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>C++에서의 출력은  C언어에서 %d, %s, %x 등과 같은 규격을 없애는 등 C언어의 불편한점을 해소하려고 했다.</p>\n<p>stream 개념을 도입하여 흐름을 표현하였다. (&#x3C;&#x3C; 연산자 - push operator)</p>\n<h3>C++언어에서 사용</h3>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c++ line-numbers\"><code class=\"language-c++\"># include &lt;iostream&gt;\n// using namepsace std;\n\nint main()\n{\n    int month = 8;\n    int date = 5;\n\n    std::cout &lt;&lt; &quot;오늘은 &quot; &lt;&lt; month &lt;&lt; &quot;월 &quot; &lt;&lt; date &lt;&lt; &quot;일 입니다.&quot; &lt;&lt; std::endl   \n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ul>\n<li>여기서 전처리기 include를 통해 iostream을 가져와야 한다.</li>\n<li>std:: &#x3C;- 라고 쓰는 이유는 namespace때문인데, namespace는 이름을 저장하는 공간이라고 보면 된다.\n우리가 큰 단위의 개발을 하면서 비슷한 이름들이 생길 가능성이 크기 때문에  서로 다른 모듈들에게서\n중복되는 이름이 없도록 구역을 나눈다고 보면 된다. (자바의 package와 비슷)\n여기서 std는 namespace이고 std namespace의 자원을 쓸 때 ::로 표현한다.</li>\n<li>위에는 주석처리 되어 있지만 using namespace std라고 하면 앞에 std::cout과 같은 표현을 cout으로 할 수 있다. 미리 namespace를 참조한다고 선언하는 것이라고 보면 된다.</li>\n<li>&#x3C;&#x3C; 연산자는 push operator로 C언어에서는 비트연산자로 쓰였다.\n하지만 C++에서는 연산자 오버로딩이라는게 있어서 이와같이 다른 연산자로 사용할 수 있다.</li>\n<li>endl은 c의 \\n과 같으나 다른점은 endl은 flush를 한다는 점.</li>\n</ul>\n<h3>Pragma once</h3>\n<p>우리가 C++개발을 하면서 다른모듈들을 사용하기 위해 include를 자주 할 텐데, 겹치는 모듈들이 생길 수가 있다.\n각기 다른 모듈들에서 어떠한 모듈들을 또 include하고 있는지 모르기 때문에 한번씩만 가져오게 할 수 있는 방법이 </p>\n<blockquote>\n<h1>pragma once</h1>\n</blockquote>\n<h3>조정자 (manipulator)</h3>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c++ line-numbers\"><code class=\"language-c++\">cout &lt;&lt; showbase</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>C++에서는 출력을 할 때 조정자(manipulator)라는 것이 생겼는데,\n출력을 보조해준다.</p>\n<ul>\n<li>showpos / noshowpos - 부호표시</li>\n<li>dec / hex / oct - 진법표현 (10 / 16 / 8 진수)</li>\n<li>uppercase / nouppercase - 소, 대문자</li>\n<li>showbase / noshowbase - 숫자 앞에 Ox (16진수)</li>\n<li>left / internal / right - 정렬 (왼쪽/가운데/오른쪽) 주로 setw()와 많이 쓴다.</li>\n<li>noshowpoint / showpoint - 소수점을 보여주냐 마냐</li>\n<li>fixed / scientific - 소수점 표기법 (고정소수점 / 지수표기)</li>\n<li>boolalpha / noboolalpha - true를 1 / false를 0 으로 표기</li>\n</ul>\n<p>그외 #include <iomanip> 안에 있는 조정자도 있다.</p>\n<ul>\n<li>setw() - 컬럼 영역 설정</li>\n<li>setfill() - 빈 영역 문자로 채우기</li>\n<li>setprecision() - 소수점 자리 보정</li>\n</ul>\n<p>와 같고 사용법은 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c++ line-numbers\"><code class=\"language-c++\">cout &lt;&lt; showbase &lt;&lt; hex &lt;&lt; 10 &lt;&lt; endl;\ncout &lt;&lt; setw(10) &lt;&lt; left &lt;&lt; &quot;hello&quot; &lt;&lt; endl;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<h3>정리</h3>\n<ol>\n<li>Hello World 출력해보기</li>\n<li>네임스페이스</li>\n<li>out 스트림</li>\n<li>&#x3C;&#x3C; 연산자</li>\n<li>출력형식 지정 - 조정자(manipulator)</li>\n</ol>","excerpt":"C, C++ 콘솔 출력 간단 비교 C언어 콘솔 출력 C++ 언어 콘솔 출력 C++에서의 출력은  C언어에서 %d, %s, %x 등과 같은 규격을 없애는 등 C언어의 불편한점을 해소하려고 했다. stream 개념을 도입하여 흐름을 표현하였다. (<< 연산자 - push operator…","frontmatter":{"date":"05 August, 2020","path":"/cpp/Ref02","title":"C++ 콘솔 출력"},"fields":{"readingTime":{"text":"3 min read"}}}},"pageContext":{"slug":"/cpp/2020-08-05-C++-콘솔-출력/","previous":{"frontmatter":{"path":"/cpp/Ref01","draft":false,"category":"cpp"},"fields":{"slug":"/cpp/2020-08-05-C++는-여전히-쓰이는가-쓰지-않더라도-왜-배워야-하는가/"}},"next":{"frontmatter":{"path":"/cpp/Ref03","draft":false,"category":"cpp"},"fields":{"slug":"/cpp/2020-08-05-C++-콘솔-입력/"}}}}}