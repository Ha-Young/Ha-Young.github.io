{"componentChunkName":"component---src-templates-blog-post-js","path":"/cpp/Ref03","result":{"data":{"markdownRemark":{"html":"<h3>C, C++ 콘솔 입력 간단 비교</h3>\n<ul>\n<li>C언어 콘솔 입력</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\"><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %d %s\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>month<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>date<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>todos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<ul>\n<li>C++언어 콘솔 입력</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\">cin <span class=\"token operator\">>></span> month <span class=\"token operator\">>></span> date <span class=\"token operator\">>></span> todos<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>C언어에서의 scanf를 통한 입력은 경계검사를 하지 않기때문에 안전하지 않았다.</p>\n<p>C++의 cin은 scanf를 어느정도 대체하였는데, 차이는</p>\n<p>null 스트링 &#x3C; - > stream 스트링 의 차이이다.</p>\n<ul>\n<li>null 스트링 : 마지막 비트가 null. 하나하나 읽으면서 null이면 그만 읽는 식. 표현하기위해 비트 하나가 필요(null 비트)</li>\n<li>stream 스트링 : 헤더에 길이값이 있는 것. 정해진 길이만 읽음. 길이비트 필요. null 스트링보다 비트가 많이 필요하지만 빠르게 읽을 수 있다.(정해진 크기의 값을 바로 읽기 때문)</li>\n</ul>\n<h3>C++언어에서 사용</h3>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c++ line-numbers\"><code class=\"language-c++\"># include &lt;iostream&gt;\nusing namespace std;\n\nint main()\n{\n    int month;\n    int date;\n\n    cin &gt;&gt; month &gt;&gt; date;\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>cin도 똑같이 메모리 할당 이슈가 있다</h3>\n<p>c언어보다 표현이 보다 쉬워지고 안전해졌지만 그래도 메모리 할당이슈는 여전했는데,</p>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c++ line-numbers\"><code class=\"language-c++\">char input[4];\ncin &gt;&gt; input;  // input의 길이를 모른다.</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>이와 같이 컴퓨터 입장으로서는 정해진 입력해야되는 변수의 정확한 크기를 모를 때 발생할 수 있다.</p>\n<p>해결하는 방법은</p>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c++ line-numbers\"><code class=\"language-c++\">char input[4];\ncin &gt;&gt; setw(4) &gt;&gt; input;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>과 같이 미리 잘라두는 것.</p>\n<h3>스트림 상태 확인</h3>\n<p>우리가 stream을 사용할때 stream 상태를 확인 할수가 있는데,</p>\n<p>C언어에서</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c line-numbers\"><code class=\"language-c\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fgets</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// todo</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>와 표현했었다.</p>\n<p>C++에서는 다음과 같이 확인 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c++ line-numbers\"><code class=\"language-c++\">cin &gt;&gt; line;\nif (!cin.eof())\n{\n    // todo\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>istream 상태확인 메서드</h3>\n<p>네임스페이스 - ios_base</p>\n<ul>\n<li>good()</li>\n<li>eof()</li>\n<li>fail()</li>\n<li>bad()</li>\n</ul>\n<p>를 통해 steam 상태를 확인 할 수 있다.</p>\n<h3>입력값을 통한 비교</h3>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c++ line-numbers\"><code class=\"language-c++\">int number;\ncin &gt;&gt; number;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>와 같이 한다고 가정해보자.</p>\n<p>우선 입력값에 따른 eofbit와 failbit는 다음과 같다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">입력값</th>\n<th align=\"center\">eofbit</th>\n<th align=\"center\">failbit</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">456abc</td>\n<td align=\"center\">unset</td>\n<td align=\"center\">unset</td>\n</tr>\n<tr>\n<td align=\"center\">456</td>\n<td align=\"center\">(un)set</td>\n<td align=\"center\">unset</td>\n</tr>\n<tr>\n<td align=\"center\">abc</td>\n<td align=\"center\">unset</td>\n<td align=\"center\">set</td>\n</tr>\n<tr>\n<td align=\"center\">eof</td>\n<td align=\"center\">set</td>\n<td align=\"center\">set</td>\n</tr>\n</tbody>\n</table>\n<p>기본적으로 숫자를 읽는것이기 때문에 문자가 나오면 멈추는데,</p>\n<ul>\n<li>첫번째 - 456을 읽고 a에서 포인터가 멈춰있는 상태. 일단 456이라는 숫자는 읽어서 값으로 들어가있다. 그래서 실패하지는 않아서 failbit가 unset 하지만, 끝나지도 않았으므로 eofbit도 unset</li>\n<li>두번째 - 456을 읽고 456 뒷 부분에 포인터가 위치(다 읽은 상태) 그래서 eofbit set. failbit unset.\n(un)set이라 한 이유는 가끔 unset이 될 때가 있다. 이럴때는 입력버리기를 사용해야 된다.</li>\n<li>세번째 - abc 문자에서 a에 포인터가 멈춰있는 상태. 숫자값도 아닐뿐더러 읽은 값이 없어서 failbit set, eofbit unset</li>\n<li>네번째 - eof를 읽긴 했으므로 eofbit는 set되나, 숫자값이 아니므로 failbit set</li>\n</ul>\n<h3>입력 버리기(Discarding Input)</h3>\n<p>입력상태 (스트림상태)를 무시하고, 버리고 다시 입력받고 싶을 때 사용한다.</p>\n<ul>\n<li>cin.clear() - 스트림을 good 상태로 돌려줌.</li>\n<li>cin.ignore() - 문자 1개를 버림</li>\n<li>cin.ignore(10) - 문자 10개를 버림</li>\n</ul>\n<blockquote>\n<p>ignore는 eof에 도달하거나 지정한 수만큼 버리면 멈춘다.</p>\n</blockquote>\n<ul>\n<li>cin.ignore(10, '\\n') - 문자 10개를 버리거나 newline을 만나면 멈춤.</li>\n<li>cin.ingore(LLONG_MAX, '\\n') - 최대 문자 수 (한 줄) 를 버리거나 newline을 만나면 멈춤.</li>\n</ul>\n<h3>입력 함수</h3>\n<h6>get() 함수</h6>\n<p>뉴라인 문자, 혹은 설정문자를 만나기 직전까지의 모든 문자를 가져온다.</p>\n<p><u>뉴라인 문자는 입력스트림에 남아있다.</u></p>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c++ line-numbers\"><code class=\"language-c++\">get(firstName, 100); // 99개 문자 혹은 newline까지의 문자.\nget(firstName, 100, &#39;#&#39;) // 99개 문자 혹은 &#39;#&#39; 문자가 나올때까지.</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<h6>getline() 함수</h6>\n<p>뉴라인 문자 혹은 설정문자를 만나기 직전까지의 모든 문자를 가져온다.</p>\n<p><u>뉴라인 문자는 입력스트림에서 버린다.</u></p>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-c++ line-numbers\"><code class=\"language-c++\">getline(firstName, 100); // 99개 문자 혹은 newline까지의 문자.\ngetline(firstName, 100, &#39;#&#39;) // 99개 문자 혹은 &#39;#&#39; 문자가 나올때까지.</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>차이점은 뉴라인을 버리냐 마냐</p>\n<h3>정리</h3>\n<ol>\n<li>입력스트림</li>\n<li>`>> 연산자</li>\n<li>스트림 상태 (파일 입력에서도 쓰임)</li>\n<li>입력 버리기 (파일 입력에서도 쓰임)</li>\n</ol>","excerpt":"C, C++ 콘솔 입력 간단 비교 C언어 콘솔 입력 C++언어 콘솔 입력 C언어에서의 scanf를 통한 입력은 경계검사를 하지 않기때문에 안전하지 않았다. C++의 cin은 scanf를 어느정도 대체하였는데, 차이는 null 스트링 < - > stream 스트링 의 차이이다. null…","frontmatter":{"date":"05 August, 2020","path":"/cpp/Ref03","title":"C++ 콘솔 입력"},"fields":{"readingTime":{"text":"3 min read"}}}},"pageContext":{}}}