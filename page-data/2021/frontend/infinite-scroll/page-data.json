{"componentChunkName":"component---src-templates-blog-post-js","path":"/2021/frontend/infinite-scroll/","result":{"data":{"site":{"siteMetadata":{"title":"HaYoung's Log","author":"@Ha-Young","siteUrl":"https://ha-young.github.io","comment":{"utterances":"Ha-Young/my-blog"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"bedb43bb-757a-5452-a9ce-9cc9a2b095b7","excerpt":"무한 스크롤? 일반적으로 무한스크롤 기능이 필요할 때에는 정보를 한꺼번에 가져와서 보여주기엔 정보량이 많거나 무거워서 api fetch로 받는 결과가 느릴 때, 스크롤을 통해 아주 작은 일부분만 가져와 추가로 보여주면서 사용자 경험을 높이는 기술이자 인터페이스라 할 수 있다. 즉, Scroll End지점까지 가면 다시 추가정보 fetch를 계속해나가는 방식 정보를 일부분만 가져와서 보여주고 이후 결과는 사용자의 움직임에 Interaction…","html":"<h2 id=\"무한-스크롤\" style=\"position:relative;\"><a href=\"#%EB%AC%B4%ED%95%9C-%EC%8A%A4%ED%81%AC%EB%A1%A4\" aria-label=\"무한 스크롤 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>무한 스크롤?</h2>\n<p>일반적으로 무한스크롤 기능이 필요할 때에는 <strong>정보를 한꺼번에 가져와서 보여주기엔 정보량이 많거나 무거워서 api fetch로 받는 결과가 느릴 때</strong>, 스크롤을 통해 아주 작은 일부분만 가져와 추가로 보여주면서 사용자 경험을 높이는 기술이자 인터페이스라 할 수 있다.</p>\n<blockquote>\n<p>즉, Scroll End지점까지 가면 다시 추가정보 fetch를 계속해나가는 방식</p>\n</blockquote>\n<p>정보를 일부분만 가져와서 보여주고 이후 결과는 사용자의 움직임에 Interaction하게 반응해서 추가로 정보를 가져오는 것이 pagenation과 비슷하기 때문에 자주 비교가 된다.</p>\n<h2 id=\"무한-스크롤하기\" style=\"position:relative;\"><a href=\"#%EB%AC%B4%ED%95%9C-%EC%8A%A4%ED%81%AC%EB%A1%A4%ED%95%98%EA%B8%B0\" aria-label=\"무한 스크롤하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>무한 스크롤하기</h2>\n<p>자 그럼 무한 스크롤에 대해서 자세한 설명을 무한스크롤은 하는 방법은 크게 2가지가 있는데,</p>\n<ul>\n<li>scroll event</li>\n<li>IntersectionObserver</li>\n</ul>\n<p>가 있다. 두 방법 다 장단점이 있으며, </p>\n<p><strong><code class=\"language-text\">scroll event</code></strong>는 우리가 익히 사용했던  DOM <code class=\"language-text\">scroll event</code>를 이용 하는 것이기 때문에 익숙해서 상대적으로 구현은 쉽지만, 이 <code class=\"language-text\">scroll event</code>에 <code class=\"language-text\">throttle</code> 혹은 <code class=\"language-text\">rAF</code>로 최적화를 해줘야 된다는 점이 있고,</p>\n<p><strong><code class=\"language-text\">IntersectionObserver</code></strong>는 익숙하지 않으면 익히는데 시간이 걸리기 때문에 상대적으로 어렵고, 페이지 맨 마지막에 가시성 감지를 위한 target 요소를 만들어야 되는 단점이 있다.</p>\n<p>전체적인 Scroll에 반응하는 <code class=\"language-text\">Scroll Event</code> 대신 <code class=\"language-text\">IntersectionObserver</code>를 이용하는 것이 성능상 더 효율적이긴 하겠지만, 상황에 맞게 구현하는 것이 훨씬 중요하다고 생각한다.</p>\n<blockquote>\n<p>Scroll Event에서 쓰이는 <code class=\"language-text\">documentElement.scrollTop</code> 과 <code class=\"language-text\">documentElement.offsetHeight</code>는 reflow를 일으켜서 성능상 좋지 않다.</p>\n</blockquote>\n<h2 id=\"scroll-event\" style=\"position:relative;\"><a href=\"#scroll-event\" aria-label=\"scroll event permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scroll Event</h2>\n<h3 id=\"1-scroll-event를-이용한-useinfinitescroll-custom-hook-만들기\" style=\"position:relative;\"><a href=\"#1-scroll-event%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-useinfinitescroll-custom-hook-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"1 scroll event를 이용한 useinfinitescroll custom hook 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Scroll Event를 이용한 useInfiniteScroll Custom Hook 만들기</h3>\n<p>우선, Scroll Event를 최적화 하기전에, Custom Hook으로 <code class=\"language-text\">useInfiniteScroll</code> 을 만들어 줘야 한다.</p>\n<p>설계 방식은 <code class=\"language-text\">[isFetching, setIsFetching] = useInfiniteScroll(fetchCallback)</code> 과 같은 방식으로 만들어서 <code class=\"language-text\">custom Hook</code>을 사용하는 곳에서 <code class=\"language-text\">setIsFetching</code>을 통해서도 접근 할 수 있게 하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useInfiniteScroll</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fetchCallback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isFetching<span class=\"token punctuation\">,</span> setIsFetching<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleScroll</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>innerHeight <span class=\"token operator\">+</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>scrollTop <span class=\"token operator\">>=</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>offsetHeight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">setIsFetching</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scroll'</span><span class=\"token punctuation\">,</span> handleScrollThrottle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            window<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scroll'</span><span class=\"token punctuation\">,</span> handleScrollThrottle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isFetching<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        \t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>   \n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">fetchCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>isFetching<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>isFetching<span class=\"token punctuation\">,</span> setIsFetching<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>자세한 구현 과정은 <a href=\"https://upmostly.com/tutorials/build-an-infinite-scroll-component-in-react-using-react-hooks\">이 곳</a>을 참조하자.</p>\n<blockquote>\n<ul>\n<li>window.innerHeight는 지금 화면으로 보이는 윈도우의 높이</li>\n<li>document.documentElement.scrollTop은 현재 화면이 어느 화면의 어느 좌표를 보고있는지를 알려주는 top 좌표 (얼마만큼 스크롤했느냐로 생각하면 된다)</li>\n<li>document.documentElement.offsetHeight는 스크롤을 포함한 전체 페이지 길이이다.</li>\n</ul>\n</blockquote>\n<p>다음과 같이 구현할 경우 컴포넌트에서 아래와 같이 사용 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isFetching<span class=\"token punctuation\">,</span> setIsFetching<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useInfiniteScroll</span><span class=\"token punctuation\">(</span>updateFunctionOnScroll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">updateFunctionOnScroll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetchFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setErrorState</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setIsFetching</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">updateFunctionOnScroll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"2-scroll-event-최적화\" style=\"position:relative;\"><a href=\"#2-scroll-event-%EC%B5%9C%EC%A0%81%ED%99%94\" aria-label=\"2 scroll event 최적화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Scroll Event 최적화</h3>\n<p>위와 같이 무한스크롤을 구현하면, scroll event가 너무 많이 발생하므로 throttle를 이용한 방법으로 최적화를 시키는 것이 가장 일반적인 방법이다.</p>\n<p>그리고 더 나아가서 <a href=\"https://developer.mozilla.org/ko/docs/Web/API/Window/requestAnimationFrame\">rAF(requestAnimationFrame)</a> 를 이용해 Animation frames를 이용해서도 최적화를 시킬 수 있다.</p>\n<h4 id=\"2-1-throttle-이용\" style=\"position:relative;\"><a href=\"#2-1-throttle-%EC%9D%B4%EC%9A%A9\" aria-label=\"2 1 throttle 이용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-1. throttle 이용</h4>\n<p><a href=\"https://lodash.com/docs/#throttle\">throttle</a>를 이용하면 Scroll Event의 핸들러가 호출되는 정도를 조절 할 수 있다.</p>\n<blockquote>\n<p>lodash의 throttle 사용.</p>\n</blockquote>\n<p>예를들어서 300ms를 기준으로 설정해놓는다면, scroll을 하고 있는 동안에는 300ms씩 마다 이벤트 핸들러가 호출이되어서 scroll event 핸들러의 호출 빈도를 줄일 수 있다.</p>\n<blockquote>\n<p>더 자세히 알고싶다면 <a href=\"https://css-tricks.com/the-difference-between-throttling-and-debouncing/\">throttle vs debounce</a> 를 확인하자.</p>\n</blockquote>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> throttle <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"lodash\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">THROTTLE_WAIT</span> <span class=\"token operator\">=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useInfiniteScroll</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fetchCallback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isFetching<span class=\"token punctuation\">,</span> setIsFetching<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> handleScrollThrottle <span class=\"token operator\">=</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>innerHeight <span class=\"token operator\">+</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>scrollTop <span class=\"token operator\">>=</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>offsetHeight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setIsFetching</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">THROTTLE_WAIT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"></span>  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scroll'</span><span class=\"token punctuation\">,</span> handleScrollThrottle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      window<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scroll'</span><span class=\"token punctuation\">,</span> handleScrollThrottle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isFetching<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fetchCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>isFetching<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>isFetching<span class=\"token punctuation\">,</span> setIsFetching<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"2-2-raf-사용\" style=\"position:relative;\"><a href=\"#2-2-raf-%EC%82%AC%EC%9A%A9\" aria-label=\"2 2 raf 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-2. rAF 사용</h4>\n<p>참조 : <a href=\"https://jbee.io/web/optimize-scroll-event/\">jbee님의 Scroll Event 최적화</a></p>\n<p>위의 throttle을 사용하는 방법은 throttle이 내부적으로 <strong>setTimeout을 기반으로 작동하기 때문에</strong> 우리 예상대로인 300ms씩 마다 발생해야 되지만, 무조건 300ms마다 발생시켜준다고 보장되지 않는다.</p>\n<p>이 말이 무슨말인가 하면, 300ms마다 작동되지않고 <strong>콜스택이 비워지지않고 다른 기능에 밀리다 밀려서 300ms 가 훨씬 지난 시점에 발생할 수도 있다</strong>는 얘기이다.</p>\n<p><code class=\"language-text\">requestAnimationFrame</code>는 브라우저가 렌더링하는 빈도 60fps(초당 60회)에 맞춰서 실행되는데, 이 말은 <strong>초당 60회의 실행을 좀 더 보장</strong>해준다는 말이다. </p>\n<blockquote>\n<p>브라우저가 렌더링 되기 직전에 넘겨준 콜백 함수가 실행된다.</p>\n</blockquote>\n<p><code class=\"language-text\">requestAnimationFrame</code>도 똑같이 비동기로 작동되는 것이기 때문에 완벽하게 보장하지 않기도 하고 콜스택에 의해 밀릴 수도 있지만 <code class=\"language-text\">requestAnimationFrame</code>은 <code class=\"language-text\">setTimeout</code>이 처리되는 <code class=\"language-text\">task queue</code>보다 우선순위에 있는 <code class=\"language-text\">animation frame</code>에서 처리되기 때문에 좀 더 최적화 된 방법이라 할 수 있다.</p>\n<p>또  <code class=\"language-text\">requestAnimationFrame</code> 을 이용하면  300ms라는 기준을 잡지 않고 60fps에 맞춰 실행되기 때문에 300ms와 같은 별다른 기준점을 주지않아도 된다.</p>\n<p><img src=\"https://blog.risingstack.com/content/images/2019/01/Execution_timing_event_loop_with_rendering.svg\" alt=\"Execution timing: Event loop with rendering\"></p>\n<p>자바스크립트 비동기에 대한 더 자세한 작동방법을 알고 싶다면 </p>\n<p>Bertalan Miklos의 <a href=\"https://blog.risingstack.com/writing-a-javascript-framework-execution-timing-beyond-settimeout/\">Javascript 비동기 작동방법</a> 에 관한 글을 읽어보자.</p>\n<p>다음으로 소스는 throttle과 같은 최적화를 시켜주는(실행 빈도 조절) 함수를 별도로 만들어야 한다.</p>\n<p>아래는 jbee님이 만든 <a href=\"https://github.com/JaeYeopHan/gatsby-starter-bee/blob/master/src/utils/event-manager.js\">toFit</a> 함수를 참조해서 만든 <code class=\"language-text\">throttleOnRendering</code> 함수이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">throttleOnRendering</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cb</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>cb<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Invalid required arguments'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">let</span> tick <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tick<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    tick <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      tick <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>소스에 대한 자세한 내용은 원본 문서를 참조하고, 브라우저 렌더링 실행 빈도에 맞춰서 실행빈도를 조절 할 수 있게 해준다.</p>\n<blockquote>\n<p>쉽게말해 브라우저 렌더링에 편승하는 것.</p>\n</blockquote>\n<p>이 <code class=\"language-text\">throttleOnRendering</code>을 이용하면 아래와 같이 코드를 구현할 수 있다.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useEffect<span class=\"token punctuation\">,</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> throttleOnRendering <span class=\"token keyword\">from</span> <span class=\"token string\">\"../utils/throttleOnRendering\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useInfiniteScroll</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fetchCallback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isFetching<span class=\"token punctuation\">,</span> setIsFetching<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> handleScrollThrottle <span class=\"token operator\">=</span> <span class=\"token function\">throttleOnRendering</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>innerHeight <span class=\"token operator\">+</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>scrollTop <span class=\"token operator\">>=</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>offsetHeight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">setIsFetching</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scroll'</span><span class=\"token punctuation\">,</span> handleScrollThrottle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      window<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scroll'</span><span class=\"token punctuation\">,</span> handleScrollThrottle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isFetching<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fetchCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>isFetching<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>isFetching<span class=\"token punctuation\">,</span> setIsFetching<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"intersectionobserver\" style=\"position:relative;\"><a href=\"#intersectionobserver\" aria-label=\"intersectionobserver permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>IntersectionObserver</h2>\n<p>IntersectionObserver는 요소의 가시성을 관찰할 수 있고, 해당 요소의 가시성에 대한 변화가 일어날 때마다 우리가 설정한 콜백함수를 실행시켜준다.</p>\n<blockquote>\n<p>일종의 Pub-Sub 패턴이자 요소 가시성에 대한 이벤트를 부여한다고 볼 수 있다.</p>\n</blockquote>\n<p>그리고 이 요소의 가시성이 변화할 때 마다 일어나는 콜백함수에서 가시성에 대한 조건을 걸어서 특정 조건일 때에만 특정 작업을 수행하도록 설정 할 수도 있다.</p>\n<p>IntersectionObserver에 대한 자세한 사용방법은 여기 <a href=\"https://heropy.blog/2019/10/27/intersection-observer/\">포스팅</a>을 참고하자. Heropy님이 잘 정리해두셨다.</p>\n<h3 id=\"intersectionobserver를-사용한-useinfinitescroll-custom-hook-만들기\" style=\"position:relative;\"><a href=\"#intersectionobserver%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-useinfinitescroll-custom-hook-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"intersectionobserver를 사용한 useinfinitescroll custom hook 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>IntersectionObserver를 사용한 useInfiniteScroll Custom Hook 만들기</h3>\n<p>IntersectionObserver를 사용한 <code class=\"language-text\">useInfiniteScroll()</code> Custom Hook을 만들기 위해서는 위의 Scroll Event를 사용했던 <code class=\"language-text\">useInfiniteScroll()</code> 보다 인자가 더 필요한데, 바로 요소의 가시성에 대한 조건을 부여할 타겟 요소를 인자로 받아야 한다.</p>\n<blockquote>\n<p>추가로 IntersectionObserver에 대한 옵션값을 받아도 좋다.</p>\n</blockquote>\n<p>나는 <code class=\"language-text\">[isFetching, setIsFetching] = useInfiniteScroll(fetchCallback, targetElement, options)</code> 로 설계를 하였다.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> defaultOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  root<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  rootMargin<span class=\"token operator\">:</span> <span class=\"token string\">'1px'</span><span class=\"token punctuation\">,</span>\n  threshold<span class=\"token operator\">:</span> <span class=\"token string\">'0.1'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useInfiniteScroll</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fetchCallback<span class=\"token punctuation\">,</span> targetElement<span class=\"token punctuation\">,</span> options <span class=\"token operator\">=</span> defaultOptions</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isFetching<span class=\"token punctuation\">,</span> setIsFetching<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">intersectionCallbackFunc</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">entries</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    entries<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entry</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>isIntersecting<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token function\">setIsFetching</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token function\">setIsFetching</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> observer<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>targetElement<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      observer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span>intersectionCallbackFunc<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">      observer<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>targetElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> observer<span class=\"token operator\">?.</span><span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span>targetElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isFetching<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>   \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">fetchCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>isFetching<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>isFetching<span class=\"token punctuation\">,</span> setIsFetching<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>Line 12~20 : 요소의 가시성의 변화가 일어났을 때 발생하게 될 Callback Function 선언</li>\n<li>Line 26~27 : 요소에 가시성 변화 관찰하기</li>\n<li>Line 30 : 요소 가시성 종료시키기 (Side Effect Clear)</li>\n</ul>\n<p>위 처럼 만들면 끝이다.</p>\n<h3 id=\"throttle-혹은-raf로-최적화-시키기\" style=\"position:relative;\"><a href=\"#throttle-%ED%98%B9%EC%9D%80-raf%EB%A1%9C-%EC%B5%9C%EC%A0%81%ED%99%94-%EC%8B%9C%ED%82%A4%EA%B8%B0\" aria-label=\"throttle 혹은 raf로 최적화 시키기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Throttle 혹은 rAF로 최적화 시키기</h3>\n<p>그리고 위의 Scroll Event 최적화 방법과 똑같이 요소의 가시성의 변화에 대해서 너무 자주일어나는 것이 우려된다면, Throttle이나 rAF를 사용해서 최적화를 시킬 수도 있다.</p>\n<p>방법은 쉽게 Intersection Observer의 Callback 함수에 적용시키면 된다.</p>\n<h4 id=\"throttle-적용\" style=\"position:relative;\"><a href=\"#throttle-%EC%A0%81%EC%9A%A9\" aria-label=\"throttle 적용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Throttle 적용</h4>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> throttle <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"lodash\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">THROTTLE_WAIT</span> <span class=\"token operator\">=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> defaultOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  root<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  rootMargin<span class=\"token operator\">:</span> <span class=\"token string\">'1px'</span><span class=\"token punctuation\">,</span>\n  threshold<span class=\"token operator\">:</span> <span class=\"token string\">'0.1'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useInfiniteScroll</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fetchCallback<span class=\"token punctuation\">,</span> targetElement<span class=\"token punctuation\">,</span> options <span class=\"token operator\">=</span> defaultOptions</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isFetching<span class=\"token punctuation\">,</span> setIsFetching<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  </span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> intersectionCallbackFuncThrottle <span class=\"token operator\">=</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entries</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    entries<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entry</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>isIntersecting<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token function\">setIsFetching</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n    <span class=\"token function\">setIsFetching</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">THROTTLE_WAIT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">let</span> observer<span class=\"token punctuation\">;</span></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>targetElement<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      observer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span>intersectionCallbackFuncThrottle<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      observer<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>targetElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> observer<span class=\"token operator\">?.</span><span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span>targetElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isFetching<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>   \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">fetchCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>isFetching<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>isFetching<span class=\"token punctuation\">,</span> setIsFetching<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"raf-적용\" style=\"position:relative;\"><a href=\"#raf-%EC%A0%81%EC%9A%A9\" aria-label=\"raf 적용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>rAF 적용</h4>\n<p>위 만들어 둔 <code class=\"language-text\">throttleOnRendering()</code> 를 사용하였다.</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> throttleOnRendering <span class=\"token keyword\">from</span> <span class=\"token string\">\"../utils/throttleOnRendering\"</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">const</span> defaultOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  root<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  rootMargin<span class=\"token operator\">:</span> <span class=\"token string\">'1px'</span><span class=\"token punctuation\">,</span>\n  threshold<span class=\"token operator\">:</span> <span class=\"token string\">'0.1'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useInfiniteScroll</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fetchCallback<span class=\"token punctuation\">,</span> targetElement<span class=\"token punctuation\">,</span> options <span class=\"token operator\">=</span> defaultOptions</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isFetching<span class=\"token punctuation\">,</span> setIsFetching<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> intersectionCallbackFuncThrottle <span class=\"token operator\">=</span> <span class=\"token function\">throttleOnRendering</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entries</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>    entries<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entry</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>isIntersecting<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setIsFetching</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">setIsFetching</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">THROTTLE_WAIT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> observer<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>targetElement<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      observer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span>intersectionCallbackFuncThrottle<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      observer<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>targetElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> observer<span class=\"token operator\">?.</span><span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span>targetElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isFetching<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>   \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">fetchCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>isFetching<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>isFetching<span class=\"token punctuation\">,</span> setIsFetching<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"번외-infinite-scroll-vs-pagenation\" style=\"position:relative;\"><a href=\"#%EB%B2%88%EC%99%B8-infinite-scroll-vs-pagenation\" aria-label=\"번외 infinite scroll vs pagenation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>번외: Infinite Scroll VS Pagenation</h2>\n<p>기본적으로 Infinite Scroll과 Pagenation은 정보를 일부분만 가져와서 보여주고, 성능상의 이점을 제공해준다는 점은 동일하나, 사용자 경험적인 측면에서는 많은 차이가 있다.</p>\n<p>Nick Babich가 쓴 <a href=\"https://uxplanet.org/ux-infinite-scrolling-vs-pagination-1030d29376f1\">UX: Infinite Scrolling VS Pagenation</a> 글을 보면,</p>\n<h3 id=\"infinite-scroll\" style=\"position:relative;\"><a href=\"#infinite-scroll\" aria-label=\"infinite scroll permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Infinite Scroll</h3>\n<ul>\n<li>\n<p>장점</p>\n<ul>\n<li>사용자 참여 및 콘텐츠 탐색이 쉽다.</li>\n<li>클릭하는 것보다 더 나은 사용자 경험을 제공한다.</li>\n<li><strong>모바일에 적합하다</strong></li>\n</ul>\n</li>\n<li>\n<p>단점</p>\n<ul>\n<li>스크롤을 해서 가져오는 정보가 많아질 수록 페이지 성능이 느려진다.</li>\n<li>정보 탐색이 힘들다. (특정 항목, 첫 위치로 돌아오기가 힘듦)</li>\n<li>스크롤 막대로 정확한 정보량을 알 수 없다. (끝에 도달하면 새로 갱신되기 때문에 언제 끝날지 모름)</li>\n<li>푸터를 찾기 힘들다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"pagenation\" style=\"position:relative;\"><a href=\"#pagenation\" aria-label=\"pagenation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pagenation</h3>\n<ul>\n<li>\n<p>장점</p>\n<ul>\n<li>사용자 의도에 맞게 페이지를 넘길 수 있다.</li>\n<li>사용자가 페이지에 통제감을 느낄 수 있다.</li>\n<li>특정 항목의 위치를 파악 및 찾기가 쉽다.</li>\n</ul>\n</li>\n<li>\n<p>단점</p>\n<ul>\n<li>‘클릭’ 혹은 ‘다음페이지’를 클릭해야되는 번거로움이 있다.</li>\n<li>한페이지에서 매우 제한된 내용을 본다.</li>\n</ul>\n</li>\n</ul>\n<p>각각 다음과 같은 장단점을 설명하고 있다.</p>\n<h3 id=\"infinite-scroll과-pagenation의-용도\" style=\"position:relative;\"><a href=\"#infinite-scroll%EA%B3%BC-pagenation%EC%9D%98-%EC%9A%A9%EB%8F%84\" aria-label=\"infinite scroll과 pagenation의 용도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Infinite Scroll과 Pagenation의 용도</h3>\n<p>위와 같은 장단점들을 잘 고려해서 상황에 따라 적절한 인터페이스를 선택하면 되겠지만,</p>\n<p>기본적으로 InfiniteScroll은 이미지, 동영상(썸네일) 등 빠르게 정보를 파악할 수 있는 곳에서,</p>\n<blockquote>\n<p>예로 페이스북, 유튜브, 인스타그램 등이 있다.</p>\n</blockquote>\n<p>Pagenation은 정보 파악이 느리거나 목표지향적인 곳에서</p>\n<blockquote>\n<p>예로 게시판이 있다.</p>\n</blockquote>\n<p>사용을 하면 된다.</p>\n<h2 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h2>\n<p><a href=\"https://upmostly.com/tutorials/build-an-infinite-scroll-component-in-react-using-react-hooks\">make useInfiniteScroll CustomHook</a></p>\n<p><a href=\"https://jbee.io/web/optimize-scroll-event/\">Jbee님의 rAF를 이용한Scroll Event 최적화</a></p>","tableOfContents":"<ul>\n<li><a href=\"/2021/frontend/infinite-scroll/#%EB%AC%B4%ED%95%9C-%EC%8A%A4%ED%81%AC%EB%A1%A4\">무한 스크롤?</a></li>\n<li><a href=\"/2021/frontend/infinite-scroll/#%EB%AC%B4%ED%95%9C-%EC%8A%A4%ED%81%AC%EB%A1%A4%ED%95%98%EA%B8%B0\">무한 스크롤하기</a></li>\n<li>\n<p><a href=\"/2021/frontend/infinite-scroll/#scroll-event\">Scroll Event</a></p>\n<ul>\n<li><a href=\"/2021/frontend/infinite-scroll/#1-scroll-event%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-useinfinitescroll-custom-hook-%EB%A7%8C%EB%93%A4%EA%B8%B0\">1. Scroll Event를 이용한 useInfiniteScroll Custom Hook 만들기</a></li>\n<li>\n<p><a href=\"/2021/frontend/infinite-scroll/#2-scroll-event-%EC%B5%9C%EC%A0%81%ED%99%94\">2. Scroll Event 최적화</a></p>\n<ul>\n<li><a href=\"/2021/frontend/infinite-scroll/#2-1-throttle-%EC%9D%B4%EC%9A%A9\">2-1. throttle 이용</a></li>\n<li><a href=\"/2021/frontend/infinite-scroll/#2-2-raf-%EC%82%AC%EC%9A%A9\">2-2. rAF 사용</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/2021/frontend/infinite-scroll/#intersectionobserver\">IntersectionObserver</a></p>\n<ul>\n<li><a href=\"/2021/frontend/infinite-scroll/#intersectionobserver%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-useinfinitescroll-custom-hook-%EB%A7%8C%EB%93%A4%EA%B8%B0\">IntersectionObserver를 사용한 useInfiniteScroll Custom Hook 만들기</a></li>\n<li>\n<p><a href=\"/2021/frontend/infinite-scroll/#throttle-%ED%98%B9%EC%9D%80-raf%EB%A1%9C-%EC%B5%9C%EC%A0%81%ED%99%94-%EC%8B%9C%ED%82%A4%EA%B8%B0\">Throttle 혹은 rAF로 최적화 시키기</a></p>\n<ul>\n<li><a href=\"/2021/frontend/infinite-scroll/#throttle-%EC%A0%81%EC%9A%A9\">Throttle 적용</a></li>\n<li><a href=\"/2021/frontend/infinite-scroll/#raf-%EC%A0%81%EC%9A%A9\">rAF 적용</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/2021/frontend/infinite-scroll/#%EB%B2%88%EC%99%B8-infinite-scroll-vs-pagenation\">번외: Infinite Scroll VS Pagenation</a></p>\n<ul>\n<li><a href=\"/2021/frontend/infinite-scroll/#infinite-scroll\">Infinite Scroll</a></li>\n<li><a href=\"/2021/frontend/infinite-scroll/#pagenation\">Pagenation</a></li>\n<li><a href=\"/2021/frontend/infinite-scroll/#infinite-scroll%EA%B3%BC-pagenation%EC%9D%98-%EC%9A%A9%EB%8F%84\">Infinite Scroll과 Pagenation의 용도</a></li>\n</ul>\n</li>\n<li><a href=\"/2021/frontend/infinite-scroll/#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>","frontmatter":{"title":"하옹의 프론트앤드 이야기 - Infinite Scroll(무한 스크롤)","date":"February 23, 2021"}}},"pageContext":{"slug":"/2021/frontend/infinite-scroll/","previous":{"fields":{"slug":"/2021/algorithm_javascript/프로그래머스-섬연결하기_lv3_그리디/"},"frontmatter":{"title":"[JS] 프로그래머스 - 섬연결하기 Lv3 (그리디)","category":"algorithm","draft":false}},"next":{"fields":{"slug":"/2021/algorithm_javascript/프로그래머스-N으로표현_lv3_dp/"},"frontmatter":{"title":"[Javascript] 프로그래머스 - N으로 표현 Lv3 (DP)","category":"algorithm","draft":false}}}},"staticQueryHashes":["1402886152","145675779","3128451518"]}