{"componentChunkName":"component---src-templates-blog-post-js","path":"/2021/memona_retrospect/2021-05-09/","result":{"data":{"site":{"siteMetadata":{"title":"HaYoung's Log","author":"@Ha-Young","siteUrl":"https://ha-young.github.io","comment":{"utterances":"Ha-Young/my-blog"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"56b24ed7-1920-57bf-9b93-1bdcad8e5150","excerpt":"한 것 Login Mutation 구현 jwt 발급 user 체크 후 없으면 생성 Apollo Mongo DataSource 적용 graphql datasource module 생성 frontend login mutation 적용 및 로그인 redirect useToken customHook graphql authenticate 적용 graphql context module 생성 odesay 2차까지 들음 잘한것 몰랐던 Apollo Mongo DataSource 적용한 것 odesay…","html":"<h2 id=\"한-것\" style=\"position:relative;\"><a href=\"#%ED%95%9C-%EA%B2%83\" aria-label=\"한 것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>한 것</h2>\n<ul>\n<li>\n<p>Login Mutation 구현</p>\n<ul>\n<li>jwt 발급</li>\n<li>user 체크 후 없으면 생성</li>\n</ul>\n</li>\n<li>\n<p>Apollo Mongo DataSource 적용</p>\n<ul>\n<li>graphql datasource module 생성</li>\n</ul>\n</li>\n<li>\n<p>frontend login mutation 적용 및 로그인 redirect</p>\n<ul>\n<li>useToken customHook</li>\n</ul>\n</li>\n<li>\n<p>graphql authenticate 적용</p>\n<ul>\n<li>graphql context module 생성</li>\n</ul>\n</li>\n<li>odesay 2차까지 들음</li>\n</ul>\n<h2 id=\"잘한것\" style=\"position:relative;\"><a href=\"#%EC%9E%98%ED%95%9C%EA%B2%83\" aria-label=\"잘한것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>잘한것</h2>\n<ul>\n<li>몰랐던 Apollo Mongo DataSource 적용한 것</li>\n<li>odesay 2차까지 완료</li>\n<li>graphql module화 잘 하고 있음</li>\n<li>graphql 적응 잘 하고 있음</li>\n</ul>\n<h2 id=\"못한것\" style=\"position:relative;\"><a href=\"#%EB%AA%BB%ED%95%9C%EA%B2%83\" aria-label=\"못한것 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>못한것</h2>\n<ul>\n<li>\n<p>오늘 테스크 카드 할당량 못채움…</p>\n<ul>\n<li>mock data랑 geoJson생성은 나중에 하자 ㅠ</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"retrospect\" style=\"position:relative;\"><a href=\"#retrospect\" aria-label=\"retrospect permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Retrospect</h2>\n<p>오늘 드디어 로그인을 성공했다.</p>\n<p>graphql로 로그인을 어떻게 해야되나 mongoDB는 어떻게 꽂아야되나 정말 걱정 많이했었는데 이 부분들이 해소되어 너무 좋다.</p>\n<p>graphql 로그인은 mutation으로 구현했고, user가 없으면 생성시키는 로직으로 하였다.</p>\n<ul>\n<li>회원가입 너무 귀찮잖아…</li>\n</ul>\n<p>token 발급까지 성공했고 그 다음 odesay 2차를 들었다.</p>\n<p>하지만 왠걸 datasource라는 것이 있는것을 알게되었고 이 dataSource는 내부적으로 캐싱기능이 있어서 사용하는게 좋아보였다.</p>\n<p>물론 강의는 dataSourceRest라서 나와 다른 dataSource를 사용한 것이지만 db를 쓰는 나는 db관련 즉, mongoDB에 대한 dataSource가 있을 것이라고 생각했고 찾아보니 있었다.</p>\n<p>이래저래 또 서칭하고 삽질하면서 apollo datasource mongodb를 적용하였다.</p>\n<p>근데 강의에서는 한번 쿼리 날리고 두번째 쿼리에서 시간이 확 줄던데 나는 똑같았다…</p>\n<p>그냥 쌩으로 mongoose model 썼을때랑 차이가 없는데 이거…</p>\n<p>암튼 datasource 쓰면 좋다고 하니까 써서 만족!</p>\n<p>그 다음으로 authenticate를 해야했는데,</p>\n<p>apolloserver의 context를 사용해야 했다.</p>\n<p>요건 전역으로 사용하게 되는 건데, req 객체를 받을 수 있었고 이 req객체를 받아 header에서 token을 꺼낸 뒤에 verify하고 리턴해주면 되었다. (이번엔 auth로 리턴)</p>\n<ul>\n<li>예전에는 user 객체로 통째로 들고다녔는데 이번엔 필요하면 쿼리로 쓰면 되는 graphql이니 _id만 넣고 댕기기로 하였다.</li>\n</ul>\n<p>요건 예전 express할 때 authenticate middleware 방식이랑 똑같았고 쓰는것도 각 엔드포인트 컨트롤러 레벨에서 쓰듯이,</p>\n<p>graphql 또한 resolver 레벨에서 체크하면 되었다.</p>\n<ul>\n<li>요것도 따로 auth module화 하였음</li>\n</ul>\n<p>그 뒤 post, area 스키마 타입 정의하고 끗.</p>\n<p>mock data랑 geoJson생성은 나중에 하자 ㅠ</p>","tableOfContents":"<ul>\n<li><a href=\"/2021/memona_retrospect/2021-05-09/#%ED%95%9C-%EA%B2%83\">한 것</a></li>\n<li><a href=\"/2021/memona_retrospect/2021-05-09/#%EC%9E%98%ED%95%9C%EA%B2%83\">잘한것</a></li>\n<li><a href=\"/2021/memona_retrospect/2021-05-09/#%EB%AA%BB%ED%95%9C%EA%B2%83\">못한것</a></li>\n<li><a href=\"/2021/memona_retrospect/2021-05-09/#retrospect\">Retrospect</a></li>\n</ul>","frontmatter":{"title":"[바닐라코딩 2차 프로젝트 데일리 회고] 2021-05-09","date":"May 09, 2021"}}},"pageContext":{"slug":"/2021/memona_retrospect/2021-05-09/","previous":{"fields":{"slug":"/2021/memona_retrospect/2021-05-08/"},"frontmatter":{"title":"[바닐라코딩 2차 프로젝트 데일리 회고] 2021-05-08","category":"vanilla coding","draft":false}},"next":null}},"staticQueryHashes":["1402886152","145675779","3128451518"]}