{"componentChunkName":"component---src-templates-blog-post-js","path":"/2021/algorithm_javascript/Leet_Code-559_Maximum_Depth_of_ N-ary_Tree-Easy-BFS-DFS/","result":{"data":{"site":{"siteMetadata":{"title":"HaYoung's Log","author":"@Ha-Young","siteUrl":"https://ha-young.github.io","comment":{"utterances":"Ha-Young/my-blog"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"7e84a4c1-c626-536d-8df4-f88ff8baaa13","excerpt":"문제 설명 Maximum Depth of N-ary Tree Given a n-ary tree, find its maximum depth. The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node. Nary-Tree input serialization is represented in their level order traversal, each group…","html":"<h2 id=\"문제-설명\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%EC%84%A4%EB%AA%85\" aria-label=\"문제 설명 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 설명</h2>\n<h3 id=\"maximum-depth-of-n-ary-tree\" style=\"position:relative;\"><a href=\"#maximum-depth-of-n-ary-tree\" aria-label=\"maximum depth of n ary tree permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Maximum Depth of N-ary Tree</h3>\n<p>Given a n-ary tree, find its maximum depth.</p>\n<p>The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p>\n<p><em>Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).</em></p>\n<p><strong>Example 1:</strong></p>\n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png\" alt=\"img\"></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Input: root = [1,null,3,2,4,null,5,6]\nOutput: 3</code></pre></div>\n<p><strong>Example 2:</strong></p>\n<p><img src=\"https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png\" alt=\"img\"></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\nOutput: 5</code></pre></div>\n<p><strong>Constraints:</strong></p>\n<ul>\n<li>The depth of the n-ary tree is less than or equal to <code class=\"language-text\">1000</code>.</li>\n<li>The total number of nodes is between <code class=\"language-text\">[0, 104]</code>.</li>\n</ul>\n<h2 id=\"나의-풀이\" style=\"position:relative;\"><a href=\"#%EB%82%98%EC%9D%98-%ED%92%80%EC%9D%B4\" aria-label=\"나의 풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>나의 풀이</h2>\n<h3 id=\"소스\" style=\"position:relative;\"><a href=\"#%EC%86%8C%EC%8A%A4\" aria-label=\"소스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>소스</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * // Definition for a Node.\n * function Node(val,children) {\n *    this.val = val;\n *    this.children = children;\n * };\n */</span>\n\n<span class=\"token comment\">/**\n * @param {Node} root\n * @return {number}\n */</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">maxDepth</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>root<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">let</span> currentDepth <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> _maxDepth <span class=\"token operator\">=</span> currentDepth<span class=\"token punctuation\">;</span> \n        \n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> child <span class=\"token keyword\">of</span> root<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> childDepth <span class=\"token operator\">=</span> <span class=\"token function\">maxDepth</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> currentDepth<span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_maxDepth <span class=\"token operator\">&lt;</span> childDepth<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            _maxDepth <span class=\"token operator\">=</span> childDepth<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">return</span> _maxDepth<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"설명\" style=\"position:relative;\"><a href=\"#%EC%84%A4%EB%AA%85\" aria-label=\"설명 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>설명</h3>\n<p>맨 처음에</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val<span class=\"token punctuation\">,</span> children</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> children<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>과 같은 형태로 들어오는 줄 모르고</p>\n<p>문제처럼 </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">root = [1,null,3,2,4,null,5,6]</code></pre></div>\n<p>과 같은 형태의 배열로 들어오는 줄 알고</p>\n<p>이 배열을 트리구조로 변환하는데 시간을 소모하기도 했고 도저히 풀리지가 않았다.</p>\n<p>그래서 찾아보니 Javascript는 애초에 인자로 받을 때 부터 위 주석으로 Node생성자 함수를 통해 만들어진</p>\n<p>Node가 인자로 들어오는 것을 발견…!</p>\n<p>그래서 맨 처음 <code class=\"language-text\">console.log</code> 로 출력을 찍어보면 다음과 같이 나온다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  val: 1,\n  children: [\n    { val: 3, children: [Array] },\n    { val: 2, children: [] },\n    { val: 4, children: [] }\n  ]\n}</code></pre></div>\n<p>그래서 Javascript에 한해서는 Input값이 위와 같은 형태로 들어오기 때문에 이에 맞춰서 풀어주어야 한다.</p>\n<blockquote>\n<p>Input 배열을 Tree구조로 변환하는데 힘 뺄 필요는 없다.</p>\n</blockquote>\n<p>그래서 DFS방식인 stack으로 접근하려고 하였으나, maxDepth를 구하는데 closure 변수로 값을 캐치하는 것이 쉽지 않아서</p>\n<p>콜 스택을 쌓아가면서 쉽게 구할 수 있는 재귀형태로 바꾸었다.</p>\n<p>핵심 아이디어는,</p>\n<p>노드가 주어지면 그 노드를 root 노드로 하는 트리의 maxDepth를 구하는 함수를 만들었다.</p>\n<p>해당 노드의 서브 트리인 children을 순회하면서 해당 서브트리의 maxDepth를 구하고, 현재 노드로 돌아와서 depth에 1을 더하면</p>\n<p>지금 node의 depth가 구해지는 원리를 이용했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> child <span class=\"token keyword\">of</span> root<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> childDepth <span class=\"token operator\">=</span> <span class=\"token function\">maxDepth</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_maxDepth <span class=\"token operator\">&lt;</span> childDepth<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            _maxDepth <span class=\"token operator\">=</span> childDepth<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>각 서브트리의 높이 중 가장 큰 높이를 구한 후에 리턴을 하면 호출 한 그 상위 노드에서 받아 1 더하고 다시 상위 노드에서 받아 1더하면서 maxDepth를 찾는 방식.</p>\n<h2 id=\"다른사람의-풀이\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%EB%A5%B8%EC%82%AC%EB%9E%8C%EC%9D%98-%ED%92%80%EC%9D%B4\" aria-label=\"다른사람의 풀이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다른사람의 풀이</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">maxDepth</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> root<span class=\"token punctuation\">.</span>children <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>root<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">maxDepth</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>나보다 깔끔하게 잘 푼 방법들이 많았지만 그 중에서 이 풀이만 유독 마음에 들었다.</p>\n<p><code class=\"language-text\">map()</code> 함수로 재귀를 타는 방법이랑 <code class=\"language-text\">Math.max()</code> 함수를 이용했다는 점이 너무 깔끔하고 선언적이라서 배울만 하다고 생각된다.</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/2021/algorithm_javascript/Leet_Code-559_Maximum_Depth_of_%20N-ary_Tree-Easy-BFS-DFS/#%EB%AC%B8%EC%A0%9C-%EC%84%A4%EB%AA%85\">문제 설명</a></p>\n<ul>\n<li><a href=\"/2021/algorithm_javascript/Leet_Code-559_Maximum_Depth_of_%20N-ary_Tree-Easy-BFS-DFS/#maximum-depth-of-n-ary-tree\">Maximum Depth of N-ary Tree</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/2021/algorithm_javascript/Leet_Code-559_Maximum_Depth_of_%20N-ary_Tree-Easy-BFS-DFS/#%EB%82%98%EC%9D%98-%ED%92%80%EC%9D%B4\">나의 풀이</a></p>\n<ul>\n<li><a href=\"/2021/algorithm_javascript/Leet_Code-559_Maximum_Depth_of_%20N-ary_Tree-Easy-BFS-DFS/#%EC%86%8C%EC%8A%A4\">소스</a></li>\n<li><a href=\"/2021/algorithm_javascript/Leet_Code-559_Maximum_Depth_of_%20N-ary_Tree-Easy-BFS-DFS/#%EC%84%A4%EB%AA%85\">설명</a></li>\n</ul>\n</li>\n<li><a href=\"/2021/algorithm_javascript/Leet_Code-559_Maximum_Depth_of_%20N-ary_Tree-Easy-BFS-DFS/#%EB%8B%A4%EB%A5%B8%EC%82%AC%EB%9E%8C%EC%9D%98-%ED%92%80%EC%9D%B4\">다른사람의 풀이</a></li>\n</ul>","frontmatter":{"title":"[Javascript] LeetCode - 559: Maximum Depth of N-ary Tree Lv-Easy (DFS&BFS)","date":"March 14, 2021"}}},"pageContext":{"slug":"/2021/algorithm_javascript/Leet_Code-559_Maximum_Depth_of_ N-ary_Tree-Easy-BFS-DFS/","previous":{"fields":{"slug":"/2021/algorithm_javascript/프로그래머스-N으로표현_lv3_dp/"},"frontmatter":{"title":"[Javascript] 프로그래머스 - N으로 표현 Lv3 (DP)","category":"algorithm","draft":false}},"next":{"fields":{"slug":"/2021/algorithm_javascript/LeetCode-101_Symmetric_Tree_Lv-Easy_DFS-BFS/"},"frontmatter":{"title":"[Javascript] LeetCode - 101: Symmetric Tree Lv-Easy (DFS&BFS)","category":"algorithm","draft":false}}}},"staticQueryHashes":["1402886152","145675779","3128451518"]}