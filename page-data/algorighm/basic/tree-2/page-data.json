{"componentChunkName":"component---src-templates-blog-post-js","path":"/algorighm/basic/tree-2","result":{"data":{"markdownRemark":{"html":"<h2>이진 탐색 트리 구현</h2>\n<p>이진 탐색트리를 만들기 위해서는 기본적으로 Node 클래스와 해당 Node클래스에 left, right로 다음 노드를 연결하는 링크드리스트 형태와 같이 구현을 해야한다.</p>\n<h3>1. 노드 클래스 만들기</h3>\n<p>이진트리에 데이터를 가지고 left, right 링크드 리스트를 포함하는 Node 클래스를 만든다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value\n        self<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        self<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>2. 이진 탐색 트리 클래스(NodeMgmt) 구현</h3>\n<p>다음으로 이진 탐색 트리 클래스(NodeMgmt)를 만든다.\n이진트리클래스는 다음과 같은 기능을 한다.</p>\n<ol>\n<li>삽입 (Insert)</li>\n<li>탐색</li>\n<li>삭제</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">NodeMgmt</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> head\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>3. 이진 탐색 트리 삽입(Insert) 구현</h3>\n<p>이진 탐색 트리에 삽입을 구현하는건 쉽다.\n조건이 만족할때까지 (빈 노드를 만날 때 까지) 계속해서 노드와 크기비교를 하면서 찾아가면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">NodeMgmt</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> head\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> value <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">break</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">break</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>이진 탐색 트리의 조건에 부합하게 데이터를 삽입해주면 된다.</p>\n<h3>4. 이진 탐색 트리 탐색(Search) 구현</h3>\n<p>이진 탐색 트리의 탐색을 구현하는 방법은 삽입과 똑같이 노드의 값을 비교하면서 찾아가면 되는데,\n같은값을 찾으면 True를 return 하고 끝에 도달했을 때에는 못찾은 것이니, False를 리턴한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">NodeMgmt</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> head\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n        <span class=\"token keyword\">while</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> value<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n            <span class=\"token keyword\">elif</span> value <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>        </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>5. 이진 탐색 트리 삭제(Delete) 구현 아이디어</h3>\n<p>위의 삽입과 탐색과 달리 이진 탐색 트리 삭제는 매우 복잡하다.</p>\n<p>그래서 경우의 수를 나뉘어서 구현하면 그나마 쉬운데, 경우의 수는 다음과 같다.</p>\n<h4>1. Leaf Node 삭제</h4>\n<ul>\n<li>Leaf Node: Child Node 가 없는 Node</li>\n<li>삭제할 Node의 Parent Node가 삭제할 Node를 가리키지 않도록 한다.<img src=\"http://www.fun-coding.org/00_Images/tree_remove_leaf.png\" alt=\"img\"></li>\n</ul>\n<h4>2. Child Node 가 하나인 Node 삭제</h4>\n<ul>\n<li>삭제할 Node의 Parent Node가 삭제할 Node의 Child Node를 가리키도록 한다.<img src=\"http://www.fun-coding.org/00_Images/tree_remove_1child.png\" alt=\"img\"></li>\n</ul>\n<h4>3. Child Node 가 두 개인 Node 삭제</h4>\n<p>아래 둘 중 하나를 선택.</p>\n<ol>\n<li><strong>삭제할 Node의 오른쪽 자식 중, 가장 작은 값을 삭제할 Node의 Parent Node가 가리키도록 한다.</strong></li>\n<li><strong>삭제할 Node의 왼쪽 자식 중, 가장 큰 값을 삭제할 Node의 Parent Node가 가리키도록 한다.</strong><img src=\"http://www.fun-coding.org/00_Images/tree_remove_2child.png\" alt=\"img\"></li>\n</ol>\n<h5>3.1. 삭제할 Node의 오른쪽 자식중, 가장 작은 값을 삭제할 Node의 Parent Node가 가리키게 할 경우</h5>\n<ul>\n<li>삭제할 Node의 오른쪽 자식 선택</li>\n<li>오른쪽 자식의 가장 왼쪽에 있는 Node를 선택</li>\n<li>해당 Node를 삭제할 Node의 Parent Node의 왼쪽 Branch가 가리키게 함</li>\n<li>해당 Node의 왼쪽 Branch가 삭제할 Node의 왼쪽 Child Node를 가리키게 함</li>\n<li>해당 Node의 오른쪽 Branch가 삭제할 Node의 오른쪽 Child Node를 가리키게 함</li>\n<li>만약 해당 Node가 오른쪽 Child Node를 가지고 있었을 경우에는, 해당 Node의 본래 Parent Node의 왼쪽 Branch가 해당 오른쪽 Child Node를 가리키게 함</li>\n</ul>\n<h5>3.2. 삭제할 Node의 왼쪽 자식중, 가장 큰 값을 삭제할 Node의 Parent Node가 가리키게 할 경우</h5>\n<ul>\n<li>삭제할 Node의 왼쪽 자식 선택</li>\n<li>왼쪽 자식의 가장 오른쪽에 있는 Node를 선택</li>\n<li>해당 Node를 삭제할 Node의 Parent Node의 왼쪽 Branch가 가리키게 함</li>\n<li>해당 Node의 오른쪽 Branch가 삭제할 Node의 오른쪽 Child Node를 가리키게 함</li>\n<li>해당 Node의 오른쪽 Branch가 삭제할 Node의 오른쪽 Child Node를 가리키게 함</li>\n<li>만약 해당 Node가 왼쪽 Child Node를 가지고 있었을 경우에는, 해당 Node의 본래 Parent Node의 오른쪽 Branch가 해당 왼쪽 Child Node를 가리키게 함</li>\n</ul>\n<h3>6. 이진 탐색 트리 삭제(Delete) 구현</h3>\n<h4>1. 삭제할 Node 탐색</h4>\n<ul>\n<li>\n<p>삭제할 Node가 없는 경우도 처리해야 함</p>\n<ul>\n<li>이를 위해 삭제할 Node가 없는 경우는 False를 리턴하고, 함수를 종료 시킴</li>\n</ul>\n</li>\n<li>\n<p>우리가 삭제를 하기 위해서는 현재노드도 중요하지만 부모노드 (parent) 를 알고 있어야 됨.</p>\n<ul>\n<li>삭제노드의 child node를 parent node와 연결시켜 주어야 됨.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    searched <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n    self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n    self<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n    <span class=\"token keyword\">while</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> value<span class=\"token punctuation\">:</span>\n            searched <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n            <span class=\"token keyword\">break</span>\n        <span class=\"token keyword\">elif</span> value <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node\n            self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node\n            self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n    \n    <span class=\"token keyword\">if</span> searched <span class=\"token operator\">==</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n    \n    <span class=\"token comment\">### 이후부터 Case들을 분리해서, 코드 작성</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>2. Case1: 삭제할 Node가 Leaf Node인 경우</h4>\n<p><img src=\"http://www.fun-coding.org/00_Images/tree_remove_leaf_code.png\" alt=\"img\"></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># self.current_node 가 삭제할 Node, self.parent는 삭제할 Node의 Parent Node인 상태</span>\n    <span class=\"token keyword\">if</span>  self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">and</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> value <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        <span class=\"token keyword\">del</span> self<span class=\"token punctuation\">.</span>current_node</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>3. Case2: 삭제할 Node가 Child Node를 한 개 가지고 있을 경우</h4>\n<img src=\"http://www.fun-coding.org/00_Images/tree_remove_1child_code.png\" width=\"400\">\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">    <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">and</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> value <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left\n    <span class=\"token keyword\">elif</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">and</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> value <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>4. Case3-1: 삭제할 Node가 Child Node를 두 개 가지고 있을 경우 (삭제할 Node가 Parent Node 왼쪽에 있을 때)</h4>\n<ul>\n<li>\n<p>기본 사용 가능 전략</p>\n<ol>\n<li><strong>삭제할 Node의 오른쪽 자식 중, 가장 작은 값을 삭제할 Node의 Parent Node가 가리키도록 한다.</strong></li>\n<li>삭제할 Node의 왼쪽 자식 중, 가장 큰 값을 삭제할 Node의 Parent Node가 가리키도록 한다.</li>\n</ol>\n</li>\n<li>\n<p>기본 사용 가능 전략 중, 1번 전략을 사용하여 코드를 구현하기로 함</p>\n<ul>\n<li>경우의 수가 또다시 두가지가 있음</li>\n<li><strong>Case3-1-1:</strong> 삭제할 Node가 Parent Node의 왼쪽에 있고, 삭제할 Node의 오른쪽 자식 중, 가장 작은 값을 가진 Node의 Child Node가 없을 때</li>\n<li>\n<p><strong>Case3-1-2:</strong> 삭제할 Node가 Parent Node의 왼쪽에 있고, 삭제할 Node의 오른쪽 자식 중, 가장 작은 값을 가진 Node의 오른쪽에 Child Node가 있을 때</p>\n<ul>\n<li>가장 작은 값을 가진 Node의 Child Node가 왼쪽에 있을 경우는 없음, 왜냐하면 왼쪽 Node가 있다는 것은 해당 Node보다 더 작은 값을 가진 Node가 있다는 뜻이기 때문임</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<img src=\"http://www.fun-coding.org/00_Images/tree_remove_2child_code_left.png\" width=\"600\">\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">    <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">and</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># case3</span>\n        <span class=\"token keyword\">if</span> value <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">:</span> <span class=\"token comment\"># case3-1</span>\n            self<span class=\"token punctuation\">.</span>change_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n            self<span class=\"token punctuation\">.</span>change_node_parent <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n            <span class=\"token keyword\">while</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>change_node_parent <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node\n                self<span class=\"token punctuation\">.</span>change_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>left\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>change_node_parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>right\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>change_node_parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n            self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node\n            self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n            self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>left</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h4>5. Case3-2: 삭제할 Node가 Child Node를 두 개 가지고 있을 경우 (삭제할 Node가 Parent Node 오른쪽에 있을 때)</h4>\n<ul>\n<li>\n<p>기본 사용 가능 전략</p>\n<ol>\n<li><strong>삭제할 Node의 오른쪽 자식 중, 가장 작은 값을 삭제할 Node의 Parent Node가 가리키도록 한다.</strong></li>\n<li>삭제할 Node의 왼쪽 자식 중, 가장 큰 값을 삭제할 Node의 Parent Node가 가리키도록 한다.</li>\n</ol>\n</li>\n<li>\n<p>기본 사용 가능 전략 중, 1번 전략을 사용하여 코드를 구현하기로 함</p>\n<ul>\n<li>경우의 수가 또다시 두가지가 있음</li>\n<li><strong>Case3-2-1:</strong> 삭제할 Node가 Parent Node의 오른쪽에 있고, 삭제할 Node의 오른쪽 자식 중, 가장 작은 값을 가진 Node의 Child Node가 없을 때</li>\n<li>\n<p>Case3-2-2:</p>\n<p>삭제할 Node가 Parent Node의 오른쪽에 있고, 삭제할 Node의 오른쪽 자식 중, 가장 작은 값을 가진 Node의 오른쪽에 Child Node가 있을 때</p>\n<ul>\n<li>가장 작은 값을 가진 Node의 Child Node가 왼쪽에 있을 경우는 없음, 왜냐하면 왼쪽 Node가 있다는 것은 해당 Node보다 더 작은 값을 가진 Node가 있다는 뜻이기 때문임</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://www.fun-coding.org/00_Images/tree_remove_2child_code_right.png\" alt=\"img\"></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>change_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n            self<span class=\"token punctuation\">.</span>change_node_parent <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n            <span class=\"token keyword\">while</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>change_node_parent <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node\n                self<span class=\"token punctuation\">.</span>change_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>left\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>change_node_parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>right\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>change_node_parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n            self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node\n            self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left\n            self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>전체 구현 소스</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value\n        self<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        self<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n        \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">NodeMgmt</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> head\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> value <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">break</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">break</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n        <span class=\"token keyword\">while</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> value<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n            <span class=\"token keyword\">elif</span> value <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>        \n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 삭제할 노드 탐색</span>\n        searched <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n        self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n        self<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n        <span class=\"token keyword\">while</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> value<span class=\"token punctuation\">:</span>\n                searched <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n                <span class=\"token keyword\">break</span>\n            <span class=\"token keyword\">elif</span> value <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node\n                self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node\n                self<span class=\"token punctuation\">.</span>current_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n\n        <span class=\"token keyword\">if</span> searched <span class=\"token operator\">==</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>    \n\n        <span class=\"token comment\"># case1</span>\n        <span class=\"token keyword\">if</span>  self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">and</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> value <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        \n        <span class=\"token comment\"># case2</span>\n        <span class=\"token keyword\">elif</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">and</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> value <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left\n        <span class=\"token keyword\">elif</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">and</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> value <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right        \n        \n        <span class=\"token comment\"># case 3</span>\n        <span class=\"token keyword\">elif</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">and</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># case3-1</span>\n            <span class=\"token keyword\">if</span> value <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>change_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n                self<span class=\"token punctuation\">.</span>change_node_parent <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n                <span class=\"token keyword\">while</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>change_node_parent <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node\n                    self<span class=\"token punctuation\">.</span>change_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>left\n                <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>change_node_parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>right\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>change_node_parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n                self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node\n                self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n                self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>left\n            <span class=\"token comment\"># case 3-2</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>change_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n                self<span class=\"token punctuation\">.</span>change_node_parent <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n                <span class=\"token keyword\">while</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>change_node_parent <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node\n                    self<span class=\"token punctuation\">.</span>change_node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>left\n                <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>change_node_parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>right\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>change_node_parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n                self<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>change_node\n                self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>right\n                self<span class=\"token punctuation\">.</span>change_node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>current_node<span class=\"token punctuation\">.</span>left\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","excerpt":"이진 탐색 트리 구현 이진 탐색트리를 만들기 위해서는 기본적으로 Node 클래스와 해당 Node클래스에 left, right로 다음 노드를 연결하는 링크드리스트 형태와 같이 구현을 해야한다. 1. 노드 클래스 만들기 이진트리에 데이터를 가지고 left, right…","frontmatter":{"date":"22 September, 2020","path":"/algorighm/basic/tree-2","title":"자료구조 Tree에 대해 알아보자 - 2 이진 탐색 트리 구현"},"fields":{"readingTime":{"text":"8 min read"}}}},"pageContext":{"slug":"/data-structrue/2020-09-22-자료구조-Tree에-대해-알아보자---2-이진탐색트리-구현/","previous":{"frontmatter":{"path":"/algorighm/basic/tree-1","draft":false,"category":"algorithm"},"fields":{"slug":"/data-structrue/2020-09-22-자료구조-Tree에-대해-알아보자---1-트리,이진탐색트리/"}},"next":{"frontmatter":{"path":"/algorithm/guide","draft":false,"category":"algorithm"},"fields":{"slug":"/algorithm/2020-09-28_알고리즘_문제풀이_가이드/"}}}}}